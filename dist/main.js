(()=>{"use strict";var e={320:(e,n,t)=>{t.d(n,{Z:()=>l});var o=t(537),i=t.n(o),r=t(645),a=t.n(r)()(i());a.push([e.id,".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}","",{version:3,sources:["webpack://./src/css/animations.css"],names:[],mappings:"AAAA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B",sourcesContent:[".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}"],sourceRoot:""}]);const l=a},414:(e,n,t)=>{t.d(n,{Z:()=>u});var o=t(537),i=t.n(o),r=t(645),a=t.n(r),l=t(667),s=t.n(l),d=new URL(t(542),t.b),c=a()(i()),h=s()(d);c.push([e.id,`html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(${h}) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */`,"",{version:3,sources:["webpack://./src/css/fonts.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;IACI,oBAAoB;IACpB,+DAA+C;EACjD;;EAEA;;;;;;;;;;GAUC",sourcesContent:["html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(../fonts/munro.ttf) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */"],sourceRoot:""}]);const u=c},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,i,r){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);o&&a[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),n.push(c))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(i," */");return[n].concat([r]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var r={},a=[],l=0;l<e.length;l++){var s=e[l],d=o.base?s[0]+o.base:s[0],c=r[d]||0,h="".concat(d," ").concat(c);r[d]=c+1;var u=t(h),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var g=i(p,o);o.byIndex=l,n.splice(l,0,{identifier:h,updater:g,references:1})}a.push(h)}return a}function i(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,i){var r=o(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<r.length;a++){var l=t(r[a]);n[l].references--}for(var s=o(e,i),d=0;d<r.length;d++){var c=t(r[d]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}r=s}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,i&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},542:(e,n,t)=>{e.exports=t.p+"f78662ff4aad4d038806.ttf"}},n={};function t(o){var i=n[o];if(void 0!==i)return i.exports;var r=n[o]={id:o,exports:{}};return e[o](r,r.exports,t),r.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var i=o.length-1;i>-1&&!e;)e=o[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{const e=(e,n)=>{e.appendChild(n)},n=(e,n)=>{n.parentNode===e&&e.removeChild(n)},o=e=>document.createElement(e),i=(e,n)=>{n.forEach((n=>{e.classList.add(n)}))},r=(e,n)=>e.classList.contains(n),a=(e,n)=>{n.forEach((n=>{e.classList.remove(n)}))},l=e=>document.querySelector(e),s=e=>document.querySelectorAll(e),d=(e,n)=>{e.textContent=n},c=(e,n,t)=>{e.addEventListener(n,t)},h=(e,n,t)=>{e.removeEventListener(n,t)},u=(e,n)=>{e.style.cssText=n},p=(e,n,t)=>{n.map(((n,o)=>{e.setAttribute(n,t[o])}))},g=(e,n,t,o)=>{e.style.top=t-o/2+"px",e.style.left=n-o/2+"px"},m=(e,n)=>{const t=n.getBoundingClientRect();return{x:e.clientX-t.left,y:e.clientY-t.top}},f=(e,n)=>{if(null===e||null===n)return!1;const t=e.getBoundingClientRect(),o=n.getBoundingClientRect();return!(t.right-15<o.left+15||t.left+15>o.right-15||t.bottom-15<o.top+15||t.top+15>o.bottom-15)},x=(e,n)=>{if(null===e||null===n)return!1;const t=e.getBoundingClientRect(),o=n.getBoundingClientRect();return!(t.right<o.left||t.left>o.right||t.bottom<o.top||t.top>o.bottom)},b=(e,n)=>{const t=e.style.left,o=e.style.top;let i,r;return"none"===n?(i=Number(t.substring(0,t.length-2)),r=Number(o.substring(0,o.length-2))):(i=Number(t.substring(0,t.length-2))+n/2,r=Number(o.substring(0,o.length-2))+n/2),{x:i,y:r}};var y=t(379),v=t.n(y),A=t(795),w=t.n(A),_=t(569),M=t.n(_),k=t(565),C=t.n(k),I=t(216),B=t.n(I),T=t(589),D=t.n(T),$=t(320),E={};E.styleTagTransform=D(),E.setAttributes=C(),E.insert=M().bind(null,"head"),E.domAPI=w(),E.insertStyleElement=B(),v()($.Z,E),$.Z&&$.Z.locals&&$.Z.locals;var z=t(414),S={};S.styleTagTransform=D(),S.setAttributes=C(),S.insert=M().bind(null,"head"),S.domAPI=w(),S.insertStyleElement=B(),v()(z.Z,S),z.Z&&z.Z.locals&&z.Z.locals;const R=t.p+"e81fdca74d3f5b1809d3.png",P=t.p+"82e9ac88b221b8bd6b76.png";t.p;let F=null,L=null,j=null,N=null,O=null,W=null,Z=null;const U=t.p+"5684f2b604c331435607.png",H=[[0,0,0,0,6,7,0,0,0,0],[0,0,5,0,6,8,10,0,0,0],[0,0,0,0,6,7,10,0,0,0],[0,0,0,0,6,7,10,0,0,0],[0,0,0,0,6,8,10,0,0,0],[0,0,0,0,6,7,10,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0]],q=[[0,0,0,0,0,0,0,2,6,0],[0,0,0,0,0,0,0,2,6,0],[0,0,0,0,0,5,0,2,6,0],[0,0,0,0,0,0,0,2,6,0],[0,0,0,0,0,0,0,2,6,0],[0,0,5,0,0,0,0,2,6,0],[0,0,0,0,0,0,0,2,6,0],[0,0,0,0,0,0,0,2,6,0],[0,0,0,0,0,0,0,2,6,0],[0,0,0,0,0,0,0,2,6,0]],G=[[7,4,10,0,0,0,0,0,0,0],[7,4,10,0,0,0,0,0,0,0],[7,4,10,0,0,0,0,0,0,0],[7,4,10,0,0,0,0,0,0,0],[7,4,10,0,0,0,0,0,0,0],[7,4,10,0,0,0,0,0,0,0],[7,4,10,0,0,0,0,0,0,0],[7,4,10,0,0,0,0,0,5,0],[7,4,10,0,0,0,0,0,0,0],[7,4,10,0,0,0,0,0,0,0]],Y=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,5,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,5,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,5,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],J=[[[0,0,0,0,6,8,0,0,0,0],[0,0,0,0,6,8,0,11,0,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,10,0,0,0],[0,0,0,0,6,7,10,0,0,0],[0,0,0,0,6,7,10,0,5,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,5,0,0,6,9,0,0,0,0],[0,0,0,0,6,9,0,0,0,0]],H,q,G,Y,[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,5,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,5,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],G,q,H,Y,[[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,8,0,0,5,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,5,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0]]];let K;const Q=(e,n)=>{K=e,K.forEach(((e,t)=>{e.forEach(((e,o)=>{X(e,t,o,n)}))}))},X=(e,n,t,o)=>{let i=new Image;i.src=U,i.onload=function(){o.imageSmoothingEnabled=!1,o.drawImage(i,32*e,0,32,32,64*n,64*t,64,64)}},V=t.p+"34d9a99d3f3e7de647ab.png",ee=t.p+"bd6b270a5746a2e9b4ff.png",ne=t.p+"3d5d3708ee783e84e3da.png",te=t.p+"8a4cc9c73d3e00071e47.png";let oe=0;const ie=[4,5,8,9,10];let re=[350,450,250,560,200,350,270];const ae=["down","left","up","right","none"],le=["Magnet_Drone","Force-field_Drone","Lightning_Rod_Drone","Air_Strike","Machine_Gun","Drone_GPS_Hack","Recall_Drones","Repair_Package_Drone"],se=["\nAttracts th package drone and\nmissiles towards it.\n\n- Placeable\n- Only one on the field at a time\n\n- Cooldown: none\n","\nDissolves bullets and missiles it touches,\nbut can be taken down by attack drones\n\n- Placeable\n- Only one on the field at a time\n\n- Depletes power in 10 seconds\n- Cooldown: 15 seconds\n","\nAbsorbs lightning in a small radius\n\n- Placeable\n- Only one on the field at a time\n\n- Depletes power in 10 seconds\n- Cooldown: 15 seconds\n","\nCall a missile to any point on the field\n\n- Ammo: 1 missile\n- Damage: high\n- Cooldown: 3 seconds\n","\nFires shots at any point on the field,\nmachine overheats after 20 shots\n\n- Ammo: 20 bullets\n- Firerate: 4 bullets per second\n- Cooldown: 10 seconds\n","\nLocks position of all drones temporarily,\nmissiles lose heat-seeking function.\n\n- Duration: 10 seconds\n- Cooldown: 20 seconds\n","\nRemove all placed drones from field.\n\n- Cooldown: none\n","\nWhen held near package drone, \nrestores 3 health every 3 seconds.\n\n- Cooldown: 10 seconds\n","\nHas Dio's special package,\nget it to his house somewhere west.\n","\nShoots low damage burst shots\nin 4 diagonal directions.\n","\nFires heat-seeking missiles\nor torpedoes,  tboth are high damage.\n","\nWill try to ram into you and cut you\nwith its saws. Longer contact means\nmore damage.\n","\nThe boss. Can spawn attack drones\nand even summon lightning somehow.\n"],de=t.p+"253f6d096c5e70f2592b.png",ce=t.p+"40bead41f130d5bf6de7.png",he=t.p+"99abed76b1b33034fd39.png",ue=t.p+"e17a9544f3d78de0605e.png",pe=t.p+"3331e3f5214631b75c3d.png",ge=n=>{const t=o("div");let r;i(t,["shader"]),t.id=n,"light-shader"===n?r="\n            background-image: linear-gradient(135deg, rgba(227, 245, 66, 0.3), rgba(230, 201, 147, 0.1));\n        ":"dark-shader"===n&&(r="\n            background-image: linear-gradient(135deg, rgba(54, 88, 163, 0.3), rgba(90, 76, 115, 0.6));\n        "),u(t,`\n        height:640px;\n        width: 640px;\n        position: absolute;\n        z-index: 5;\n        ${r}\n    `),e(N,t)},me=(e,n,t,r)=>{const a=o("div");return i(a,["pathblock"]),u(a,`\n        background-color: rgba(245, 66, 66, 0.3);\n        left: ${e}px;\n        top: ${n}px;\n        height: ${r}px;\n        width: ${t}px;\n        position:absolute;\n    `),a},fe=()=>{s(".pathblock").forEach((e=>{n(N,e)}))};let xe=[],be=20,ye=!1,ve=30;function Ae(t,r,a,s){this.name=t,this.index=s,this.img=r,this.imgsrc=a,this.currentFrame=0,this.canvele,this.imgele,this.backele,this.lock=null,this.init=()=>{const n=this.index;this.addedleft=64*xe.length,this.size;const t=this.name,r=o("canvas");i(r,["mini-canvas",`${t}`]),p(r,["width","height"],["64px","64px"]),u(r,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const a=r.getContext("2d"),l=this.img;a.imageSmoothingEnabled=!1,l.onload=function(){a.clearRect(0,0,64,64),a.drawImage(l,16*n,0,16,16,0,0,64,64)},this.canvele=r,this.ctx=a;const s=o("canvas");i(s,["canvas-icon"]),p(s,["width","height","id"],["64px","64px",t]),u(s,"\n        ");const d=o("div");i(d,["backele",t]),u(d,"\n            width: 64px;\n            height: 64px;\n            position:relative;\n        ");const c=s.getContext("2d");return c.imageSmoothingEnabled=!1,l.onload=function(){c.clearRect(0,0,64,64),c.drawImage(l,16*n,0,16,16,0,0,64,64)},s.dataset.imgsrc=this.imgsrc,s.dataset.index=n,this.imgele=s,this.initMouse(r,s),e(d,s),this.backele=d,d},this.cooldown=r=>{const a=this.backele,l=o("div");i(l,["lock",t]),u(l,`\n            width: 16px;\n            height: 16px;\n            scale: 4;\n            top: 24px;\n            left: 24px;\n            image-rendering: pixelated;\n            position:absolute;\n            background: url(${de}) -144px 0px;\n        `),e(a,l),this.lock=l,setTimeout((()=>{n(a,l),this.lock=null}),r)},this.initMouse=(i,a)=>{const s=i.getContext("2d");let d;const p=L;let f,x=[],b=this.size,y=(this.currentFrame,this.index),v=!1;const A=e=>{v=!0,0===x.length&&("Machine_Gun"===t?(be=20,x.push(setInterval((()=>{0===be?clearInterval(x[0]):(be-=1,Fe("good_hit",f.x-24,f.y-24,90*Math.floor(4*Math.random())))}),250))):"Magnet_Drone"===t?x.push(setInterval((()=>{!1===vn&&g(F,f.x,f.y,200)}),100)):"Lightning_Rod_Drone"===t?x.push(setInterval((()=>{g(W,f.x,f.y,200)}),100)):"Repair_Package_Drone"===t&&x.push(setInterval((()=>{g(O,f.x,f.y,200),0===ve?(ve=30,Pn(zn+3)):ve-=1}),100)))},w=e=>{e.preventDefault(),f=m(e,p),d=m(e,document.body),g(i,d.x,d.y,64)};c(a,"mousedown",(a=>{a.preventDefault(),!1===vn&&(i.style.top="-1000px",i.style.left="-1000px",e(document.body,i),c(document.body,"mousemove",w),c(p,"mouseenter",A),s.clearRect(0,0,64,64),s.drawImage(r,16*y,0,16,16,0,0,64,64),"Magnet_Drone"===t?(null!==F&&(n(L,F),F=null),(()=>{const n=o("div");n.id="magnet_hitbox",u(n,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        z-index: 5;\n        pointer-events: none;\n    "),F=n,e(l(".wrapper"),n)})()):("Force-field_Drone"===t&&this.cooldown(15e3),"Lightning_Rod_Drone"===t&&(this.cooldown(15e3),(()=>{const n=o("div");n.id="lr_hitbox",u(n,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        z-index: 5;\n        pointer-events: none;\n    "),W=n,e(l(".wrapper"),n)})()),"Air_Strike"===t&&(_e=!0,fe(),this.cooldown(3e3)),"Machine_Gun"===t&&(this.cooldown(1e4),_e=!0,fe()),"Drone_GPS_Hack"===t&&(this.cooldown(2e4),ye=!0,setTimeout((()=>{ye=!1}),1e4)),"Repair_Package_Drone"===t&&((()=>{const n=o("div");n.id="heal_hitbox",u(n,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        z-index: 5;\n        pointer-events: none;\n    "),O=n,e(l(".wrapper"),n)})(),this.cooldown(1e4)),"Recall_Drones"===t&&(null!==On[1]&&Gn(1),null!==On[2]&&Gn(2),null!==On[3]&&Gn(3))),["Magnet_Drone","Lightning_Rod_Drone","Force-field_Drone"].includes(this.name)&&null!==On[Hn(this.name)]&&Gn(Hn(this.name)))})),c(document.body,"mouseup",(e=>{h(document.body,"mousemove",w),h(p,"mouseenter",A);let o=m(e,p);if(!0===v){if("Air_Strike"===this.name&&Fe("good_missile",o.x,o.y,0),["Magnet_Drone","Lightning_Rod_Drone","Force-field_Drone"].includes(this.name)){const e=o.x-40,i=o.y-40,r=4;if(e<576&&e>0&&i<576&&i>0)if(Kn(t,e,i),"Force-field_Drone"===t){const n=e-10,t=i-10;Fe("force_field",n+32+r/2,t-r,90),Fe("force_field",n-r,t+32+r/2,0),Fe("force_field",n+32+r/2,t+64+r,90),Fe("force_field",n+64+r,t+32+r/2,0),setTimeout((()=>{Gn(3)}),1e4)}else"Lightning_Rod_Drone"===t&&setTimeout((()=>{Gn(2),n(L,W),W=null}),1e4)}"Repair_Package_Drone"===t&&null!==O&&(n(L,O),F=null),v=!1}clearInterval(x[0]),x=[],null!=l(`.mini-canvas.${this.name}`)&&n(document.body,i),s.clearRect(0,0,b,b)})),c(a,"mouseenter",(e=>{jn(e.target.id,e.target)}))}}let we=[],_e=!1;const Me=(e,n,t)=>{let o,r,a,l=5;"gunner_drone"===e&&(o=he,r=150),"missile_drone"===e&&(o=ue,r=300),"attack_drone"===e&&(o=pe,r=6,l=2),"none"===o?a="none":(a=new Image,a.src=o);let s=Math.floor(Math.random()*r*.5),d=360*Math.random();const c=Zn(L,e,32,o,n,t,5,!0,6);i(c,["enemy"]),we.push({ele:c,type:e,x:n,y:t,img:a,fireevery:r,firetimer:s,timeout:null,size:64,moving:!1,moveTimer:10,speed:l,rot:d,direction_data:{none:0},draw_index:0,frame:0,show:!0,frames:6,updates_per_frames:4,timer:1,hp:5})},ke=()=>{we.map((e=>{!0===_e&&(Be(e),Ie(e),Ce(e)),Yn(e,"increment","none")}))},Ce=e=>{null!==Re&&x(e.ele,Re.ele)&&(Fe("hit",Re.x,Re.y,90*Math.floor(4*Math.random())),We(Re),Re=null,e.hp=e.hp-1,0===e.hp&&(Fe("explosion",e.x+16,e.y+16,90*Math.floor(4*Math.random())),De(e))),"attack_drone"===e.type&&null!==On[3]&&f(e.ele,On[3].ele)&&(Fe("explosion",On[3].x+16,On[3].y+16,90*Math.floor(4*Math.random())),Gn(3))},Ie=e=>{ye||(!0===e.moving&&(0===e.moveTimer?(e.moveTimer=10,e.moving=!1,e.rot=360*Math.random()):(e.moveTimer=e.moveTimer-1,Te(e,e.rot))),"attack_drone"===e.type&&Te(e,Ne(e.x,e.y,j)+180))},Be=e=>{if(null!==Se&&x(Se,e.ele)&&De(e),0===e.firetimer){e.firetimer=e.fireevery;const n=e.x+32,t=e.y+32;"gunner_drone"===e.type&&($e(n,t),setTimeout((()=>{$e(n,t)}),200),setTimeout((()=>{$e(n,t)}),400),setTimeout((()=>{e.moving=!0}),1e3)),"missile_drone"===e.type&&(Fe("missile",n,t,180),setTimeout((()=>{e.moving=!0}),1e3)),"attack_drone"===e.type&&et%2==0&&x(e.ele,j)&&Pn(zn-1)}else e.firetimer=e.firetimer-1},Te=(e,n)=>{const t=e.x,o=e.y,i=n+90,r=e.speed*Math.cos(i*(Math.PI/180)),a=e.speed*Math.sin(i*(Math.PI/180)),l=t+r-e.size/2,s=o+a-e.size/2;let d=!0;l<576&&l>0&&s<576&&s>0&&(d=!1),d||(e.x=l+e.size/2,e.y=s+e.size/2,e.ele.style.left=`${e.x}px`,e.ele.style.top=`${e.y}px`)},De=e=>{n(L,e.ele),h(e.ele,"mouseenter",Un),we=we.filter((function(n){return n!==e}))},$e=(e,n)=>{Fe("bullet",e,n,45),Fe("bullet",e,n,135),Fe("bullet",e,n,225),Fe("bullet",e,n,315)},Ee=()=>{we=[],s(".enemy").forEach((e=>{n(L,e),h(e,"mouseenter",Un)}))};let ze=[],Se=null,Re=null,Pe=[];const Fe=(n,t,r,a)=>{const l=o("div");let s,d,c,h=r,p=0,g=1,m="none";"wind"===n?(s=9,d=100,p=1,c=2):"bullet"===n?(s=1,d="none",p=10,c=2):"hit"===n?(s=2,d=10,c=2):"lightning_warning"===n?(s=10,d=20,c=4,g=.5):"lightning_strike"===n?(s=4,d=7,p=0,c=4):"lightning_bolt"===n?(s=3,d=7,c=4):"missile"===n?(s=0,d="none",p=12,c=2):"explosion"===n?(s=7,d=10,c=2):"good_missile"===n?(s=0,d="none",p=15,c=2,m=r,h=0):"good_explosion"===n?(s=7,d=10,c=4):"good_hit"===n?(s=2,d=10,c=4):"force_field"===n&&(s=12,c=4,d="none"),i(l,["effect",n]),u(l,`\n        scale: ${c};\n        top: ${r}px;\n        left: ${t}px;\n        height: 16px;\n        width: 16px;\n        background: url(${ce}) -${16*s}px 0;\n        position:absolute;\n        image-rendering: pixelated;\n        transform: rotate(${a}deg);\n        opacity: ${g};\n    `);const f={type:n,x:t,y:h,speed:p,fadein:d,rot:a,ele:l,size:16,final_y:m};ze.push(f),"good_explosion"===n&&(Se=l),"good_hit"===n&&(null!=Re&&(We(Re),Re=null),Re=f),"force_field"===n&&Pe.push(l),e(N,l)},Le=()=>{ze=[],s(".effect").forEach((e=>{n(N,e)}))},je=e=>{const n=e.x,t=e.y,o=e.rot+90,i=e.speed*Math.cos(o*(Math.PI/180)),r=e.speed*Math.sin(o*(Math.PI/180)),a=n+i-e.size/2,l=t+r-e.size/2;let d=!1;s(".edge").forEach((n=>{x(n,e.ele)&&(d=!0)})),d?We(e):(e.x=a+e.size/2,e.y=l+e.size/2,e.ele.style.left=`${e.x}px`,e.ele.style.top=`${e.y}px`)},Ne=(e,n,t)=>{const o=b(t,64),i=o.x-e,r=o.y-n;let a=Math.atan(-r/i);return i<0&&(-r<0?a-=Math.PI:a+=Math.PI),a*=180/Math.PI,a-=90,a=-a,a<=-180&&(a+=360),a},Oe=()=>{ze.map((e=>{if(["bullet","wind","good_missile"].includes(e.type))je(e);else if("missile"===e.type){let n;if(!ye){x(F,e.ele),n=Ne(e.x,e.y,j);let t=((e,n)=>{let t=n-e;return t<=-180&&(t+=360),t>180&&(t-=360),t>0?-1:t<0?1:0})(e.rot,n);1===t?e.rot=e.rot+3:-1===t&&(e.rot=e.rot-3),e.rot>180&&(e.rot=e.rot-360),e.ele.style.transform=`rotate(${e.rot}deg)`}Pe.map((n=>{f(e.ele,n)&&We(e)})),je(e)}if((e=>{if(0===e.fadein){if("lightning_warning"===e.type)if(x(e.ele,W))if(null===On[2]){const e=b(W,200);let n=Math.floor((e.y-64)/64);for(let t=0;t<n+1;t++)Fe("lightning_bolt",e.x,e.y-64-64*t,0)}else{const e=b(On[2].ele,64);let n=Math.floor((e.y-64)/64);for(let t=0;t<n+1;t++)Fe("lightning_bolt",e.x,e.y-64-64*t,0)}else{Fe("lightning_strike",e.x,e.y,90*Math.floor(4*Math.random()));let n=(e.y-24)/64;for(let t=0;t<n+1;t++)Fe("lightning_bolt",e.x,e.y-64*t,0)}else"good_explosion"===e.type?Se=null:"lightning_strike"===e.type&&10===oe&&0===qe&&mn();We(e)}else"none"!==e.fadein?(e.fadein=e.fadein-1,"lightning_warning"===e.type&&(e.fadein%4==0||e.fadein%4==1?e.ele.style.background=`url(${ce}) -176px 0`:e.ele.style.background=`url(${ce}) -160px 0`)):"good_missile"===e.type?e.y>=e.final_y&&(Fe("good_explosion",e.x,e.y,90*Math.floor(4*Math.random())),We(e)):"force_field"===e.type&&(null===On[3]&&(We(e),Pe=[]),e.ele.style.background=et%8<4?`url(${ce}) -208px 0`:`url(${ce}) -192px 0`)})(e),!0===_e){if("bullet"===e.type){if(f(e.ele,j)){Pn(zn-1);let n=0,t=0;45===e.rot?(n=16,t=-16):135===e.rot?(n=16,t=16):225===e.rot?(n=-16,t=16):315===e.rot&&(n=-16,t=-16);let o=b(j,64);Fe("hit",o.x+n,o.y+t,360*Math.random()),We(e)}Pe.map((n=>{f(e.ele,n)&&We(e)}))}if("lightning_strike"===e.type&&f(e.ele,j)&&(Pn(zn-3),We(e)),"missile"===e.type){if(f(e.ele,j)){Pn(zn-3);let n=b(j,64);Fe("explosion",n.x,n.y,360*Math.random()),We(e)}if(null!==On[1])if(f(e.ele,On[1].ele)){let t=b(F,64);Fe("explosion",t.x+64,t.y+64,360*Math.random()),We(e),Gn(1),null!==F&&n(L,F)}else null!==Re&&f(Re.ele,e.ele)&&We(e)}}}))},We=e=>{n(N,e.ele),ze=ze.filter((function(n){return n!==e}))},Ze=e=>{let n,t;if("random"===e){let e=Math.floor(4*Math.random());n=ae[e]}else{if("none"===e){if(21===Math.floor(100*Math.random())){const e=64*Math.floor(10*Math.random())+24,n=64*Math.floor(10*Math.random())+24;Fe("lightning_warning",e,n,0)}return}n=e}if("down"===n?(qn(0,On[0].x,640,!0),t=0):"right"===n?(qn(0,640,On[0].y,!0),t=270):"up"===n?(qn(0,On[0].x,0,!0),t=180):"left"===n&&(qn(0,0,On[0].y,!0),t=90),!(21===Math.floor(22*Math.random())&&Fe("wind",640*Math.random(),640*Math.random(),t),8!==oe&&9!==oe&&10!==oe||21!==Math.floor(100*Math.random()))){const e=64*Math.floor(10*Math.random())+24,n=64*Math.floor(10*Math.random())+24;Fe("lightning_warning",e,n,0)}},Ue=t.p+"84225ec5d1329e2c7ddb.png";let He=null,qe=0,Ge=null,Ye=null,Je=["fire","missile","drones","evade","lightning"];const Ke=[{x:86,y:35},{x:98,y:46},{x:106,y:56}],Qe=[{x:73,y:73},{x:90,y:90}],Xe=[{x:86,y:60},{x:78,y:50},{x:93,y:67}];let Ve="none",en=!1,nn=25,tn=200;const on=()=>{null!==Re&&null!==He&&f(He,Re.ele)&&(Fe("hit",Re.x,Re.y,90*Math.floor(4*Math.random())),We(Re),Re=null,Ln(Sn-1)),null!==Se&&f(He,Se)&&(Ln(Sn-5),Se=null)},rn=()=>{const e=b(He,"none");Ke.map((n=>{Fe("bullet",e.x+2*n.x-10,e.y+2*(128-n.y),-90)}))},an=()=>{const e=b(He,"none");Qe.map((n=>{Fe("missile",e.x+2*n.x-10,e.y+2*(128-n.y),-135)}))},ln=e=>{rn(),setTimeout((()=>{rn()}),400),setTimeout((()=>{rn()}),800),setTimeout((()=>{rn()}),1200),setTimeout((()=>{rn()}),3400),setTimeout((()=>{rn()}),3800),setTimeout((()=>{rn()}),4200),setTimeout((()=>{2===e?Ye=null:Ge=null}),8e3)},sn=e=>{setTimeout((()=>{an()}),1e3),setTimeout((()=>{an()}),3e3),setTimeout((()=>{2===e?Ye=null:Ge=null}),8e3)},dn=()=>{const e=b(He,"none"),n=Xe[Math.floor(Math.random()*Xe.length)];Me("attack_drone",e.x+2*(5*Math.random()+n.x),e.y+2*(5*Math.random()+n.y))},cn=e=>{dn(),setTimeout((()=>{dn()}),2e3),setTimeout((()=>{dn()}),4e3),setTimeout((()=>{2===e?Ye=null:Ge=null}),1e4)},hn=e=>{rn(),en=!0,tn=375*Math.random()+5,nn=150*Math.random()+5,setTimeout((()=>{rn(),tn=375*Math.random()+5,nn=150*Math.random()+5}),1e3),setTimeout((()=>{rn(),tn=375*Math.random()+5,nn=150*Math.random()+5}),2e3),setTimeout((()=>{rn(),tn=375*Math.random()+5,nn=150*Math.random()+5}),3e3),setTimeout((()=>{tn=200,nn=25}),4e3),setTimeout((()=>{rn(),en=!1,2===e?Ye=null:Ge=null}),8e3)},un=e=>{if(0===e)for(let e=0;e<10;e++)setTimeout((()=>{Fe("lightning_warning",480,64*e+32,0)}),100*e),setTimeout((()=>{Fe("lightning_warning",544,64*e+32,0)}),100*e+100);else if(1===e)for(let e=0;e<10;e++)setTimeout((()=>{Fe("lightning_warning",352,64*e+32,0),Fe("lightning_warning",480,64*e+32,0),Fe("lightning_warning",608,64*e+32,0)}),100*e);else if(2===e)for(let e=1;e<6;e++)setTimeout((()=>{Fe("lightning_warning",352,64*e+32,0),Fe("lightning_warning",416,64*e+32,0),Fe("lightning_warning",480,64*e+32,0),Fe("lightning_warning",544,64*e+32,0),Fe("lightning_warning",608,64*e+32,0)}),100*e);else if(3===e)for(let e=5;e<10;e++)setTimeout((()=>{Fe("lightning_warning",352,64*e+32,0),Fe("lightning_warning",416,64*e+32,0),Fe("lightning_warning",480,64*e+32,0),Fe("lightning_warning",544,64*e+32,0),Fe("lightning_warning",608,64*e+32,0)}),100*e);else if(4===e)for(let e=0;e<10;e++)setTimeout((()=>{Fe("lightning_warning",64*(5+Math.floor(e/2))+32,64*e+32,0),Fe("lightning_warning",64*(9-Math.floor(e/2))+32,64*e+32,0)}),100*e)},pn=e=>{un(Math.floor(5*Math.random())),setTimeout((()=>{un(Math.floor(5*Math.random()))}),3e3),setTimeout((()=>{un(Math.floor(5*Math.random()))}),6e3),setTimeout((()=>{2===e?Ye=null:Ge=null}),1e4)},gn=(e,n)=>{const t=b(He,"none"),o=n,i=e-t.x,r=o-t.y,a=Math.sqrt(i*i+r*r),l=i/a*5,s=r/a*5,d=t.x+l,c=t.y+s;a>5&&(He.style.left=`${d}px`,He.style.top=`${c}px`)},mn=()=>{const e=Zn(L,"boss",128,Ue,25,200,5,!0,1);He=e,Fn()},fn=t.p+"a75425134302ef47a2e4.png",xn=[["D: My package has been suspiciously failed to be delivered twice in a row now!","D: I'm not even getting refunds for this!!","D: I guess when you want something done you have to do it yourself."],["P: Package drone status: Ready to deliver ref#7355608 to [ADDRESS]","P: Package drone status: Aberration detected - access from unautorised party","P: Package drone status: Limited remote control mode activated. Freedom of movement restricted at this admin level","D: Damn, I'm in but I cant' move. Guess I'll need my magnet drones to move the package. At least I haven't triggered security... yet."],["P: Package drone status: Warning. Security drones in area. Deviation from designated path may result in aggression.","D: These will do nothing against what I have in my arsenal."],["P: Package drone status: Warning. Heavy wind detected, recalculation of trajectory detected to remain on path.","D: Might be wise to control the drone's rotors directly with my control hack, even if it is temporary."],["D: What?! The path doesn't even go to my house! Someone's already in the system and stealing packages. No wonder I never got mine.","D: No time to get distracted tho, the sooner I get my package, the sooner I can forget about this scummy company."],["S: Security drone status: Aberration detected in rogue package drone. Requesting immediate backup to eliminate the issue","D: Finally: A reason to go all out"],["D: Hey, that's my house! I'm so close!","d: !!..","A: You have laid waste to my brethren and humiliated me!","A: Why do you persist in protecting a nonsentient piece of scrap metal?","d: I'm just rightfully getting something I paid for. Now get out my way before you end up like the rest of your trash!","A: Such determination you hold for something your life is not dependent on!","A: Unlike you, I will get REPLACED if I fail to elimiate any aberrations, and now your on the top of my list!","d: About time you get an update! Your buggy programming can't detect a real threat to your crumbling company if you ever saw one.","d: There are thieves in your system and you go after a guy who's protecting his legal property?! I think it's time for YOU to pay."],["A: Well, you have defeated me. I failed the one job I was programmed to complete. I will no doubt be replaced soon.","A: Say something nice. It might be the last thing I hear before I'm gone forever","D: We're not too different, man. We both made sacrifices defending metal.","D: Tell me, do you have a name?","A: They refered to me as 'Security AI Beta Test v8.10.04'","D: Haha, no wonder you failed. You never made it past beta!","D: Well then, I will give you a proper name. You will be crowned as the one who guarded pieces of rock minerals.","D: The custodian of ore.","C: Befitting name. So long then, enjoy your package.","D: Finally, it is in my hands!","D: Tungsten cube!!"],["S: Security drone status: Aberration detected. Package drone carrying ref#7355608 deviating from path.","S: Fire at will."]];let bn=0,yn=[],vn=!0;const An=e=>{vn=!0,Number.isInteger(e)&&(bn=e);const n=_n(yn[bn]);16===bn&&Fe("lightning_warning",352,352,0),bn+=1,c(n,"click",wn)},wn=e=>{bn<=3&&En();let t=e.target;r(t,"dialogue")||(t=t.parentNode,r(t,"dialogue")||(t=t.parentNode)),h(t,"click",wn),i(t,["dialogue-start-end"]),33===bn&&$n(6,!0),34===bn&&$n(7,!0),35===bn&&$n(8,!0),setTimeout((()=>{n(l(".game"),t),yn[bn-1].follow?An():(vn=!1,10===oe&&(qe=1))}),200)},_n=n=>{const t=o("div");return i(t,["dialogue","dialogue-start-end"]),p(t,["id","draggable"],[`dialogue-${n.code}`,"false"]),u(t,"\n            color:white;\n            background-color: #262b44;\n            border: 5px solid #5a6988;\n            position:absolute;\n            transition: 0.1s;\n            width: 600px;\n            height: 100px;\n            left: calc(50% -200px);\n            top: 500px;\n            display:flex;\n            justify-content: flex-start;\n            align-items: center;\n            gap: 10px;\n            padding: 10px;\n            z-index: 7;\n        "),e(t,Mn(n.charactersrc,n.index)),e(t,kn(n.text,n.charname)),e(l(".game"),t),setTimeout((()=>t.classList.remove("dialogue-start-end")),100),t},Mn=(e,n)=>{const t=o("div");return i(t,["charBox"]),u(t,`\n        border: 2px solid #5a6988;\n        min-width: 32px;\n        min-height: 32px;\n        margin: 16px;\n        scale: 2;\n        image-rendering: pixelated;\n        background: url(${e}) -${32*n}px 0px;\n    `),t},kn=(n,t)=>{const i=o("div"),r=o("div"),a=o("div");return u(i,"\n        position:relative;\n        top: -10px;\n    "),u(r,"\n        color:white;\n        font-family: 'munro';\n        font-size: 20px;\n    "),u(a,"\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n    "),d(r,n),d(a,t),e(i,a),e(i,r),i},Cn=()=>{xn.map((e=>{e.map(((n,t)=>{const o=n.substring(0,1),i=n.substring(3,n.length);let r,a,l,s=fn;l=t!==e.length-1,"D"===o?(r="Dio",a=0):"d"===o?(r="Dio",a=3):"A"===o?(r="Security AI",a=4):"P"===o?(r="Package Drone",a=1):"S"===o?(r="Security Drone",a=2):"C"===o&&(r="Custodian of Ore",a=4),((e,n,t,o,i,r)=>{yn.push({text:e,code:t,charactersrc:o,follow:i,charname:n,index:r})})(i,r,a,s,l,a),a+=1}))}))},In=t.p+"7802023df83792136271.png";let Bn=!0,Tn=0,Dn=0;const $n=(e,n)=>{Tn=e,Bn=n;const t=l(".cutscene");t.style.visibility=Bn?"visible":"hidden",t.style.background=`url(${In}) -${320*Tn}px 0px`},En=()=>{3===Dn&&($n(Tn,!1),setTimeout((()=>{An()}),1e3)),0===Dn?(Dn+=1,h(l(".start-but"),"click",En),n(L,l(".start-but")),An(),$n(1,!0)):2===Dn?($n(2,!0),Dn+=1):Dn+=1};let zn=25,Sn=100;const Rn=()=>{const e=o("div");return u(e,`\n        position:absolute;\n        width: 16px;\n        height: 16px;\n        background: url(${de}) -128px 0px;\n        scale: 300%;\n        image-rendering: pixelated;\n        left: 8px;\n        z-index: 5;\n        transform: translate(0, 3px);\n    `),e},Pn=n=>{if(n<=0)$n(4,!0),l(".healthbar").textContent="",Le(),Ee();else{let t,i;null===l(".healthbar")?(t=zn,i=n):"number"==typeof n&&(t=n>25?25:n,zn=t,i=l(".healthbar"),i.textContent="",e(i,Rn()));for(let n=0;n<t;n++){const t=25-n,r=350,a=470,l=Math.floor(t/25*(a-r)+r),s=o("div");s.id=`heart-${t}`,u(s,`\n            height:28px;\n            width: 28px;\n            margin: 2px;\n            background-color: hsl(${l}, 70%, 62%);\n        `),e(i,s)}}},Fn=()=>{const n=o("div");i(n,["bbwrap"]),u(n,"\n        width: 550px;\n        max-height: 12px;\n        background-color: #181425;\n        position: absolute;\n        left: 40px;\n        color:white;\n        display:flex;\n        justify-content: flex-start;\n        padding: 10px;\n        align-items: center;\n        position:absolute;\n        gap: 20px;\n        z-index: 5;\n    ");const t=o("div");u(t,"\n        font-size: 20px;\n        font-family:munro;\n        color:white;\n    "),d(t,"BOSS"),e(n,t);const r=o("div");i(r,["bbbar"]),u(r,"\n        height: 5px;\n        width: 500px;\n        background-color: white;\n    "),e(n,r),e(L,n)},Ln=e=>{Sn=e;const t=l(".bbbar");e<=0?(n(L,t),2===qe&&(qe=3,setTimeout((()=>{$n(5,!0),qe=4,An(24)}),3e3))):e<=50?(qe=2,t.style.width=e/100*500+"px"):t.style.width=e/100*500+"px"},jn=(n,t)=>{const r=t.cloneNode(!1);r.id="infoPic",a(r,["canvas-icon"]),"boss"===n?(p(r,["width","height"],["256px","256px"]),u(r,"\n            padding-left: 5px;\n            padding-top: 10px;\n            left: -15px;\n            position:relative;\n        ")):(p(r,["width","height"],["64px","64px"]),u(r,"\n        padding-left: 5px;\n        padding-top: 10px;\n    "));const s=r.getContext("2d");s.imageSmoothingEnabled=!1;const c=new Image;c.src=r.dataset.imgsrc;let h=r.dataset.index;["package_drone","gunner_drone","missile_drone","attack_drone","boss"].includes(n)?c.onload="boss"===n?function(){s.clearRect(0,0,256,256),s.drawImage(c,0,0,128,128,0,0,256,256)}:function(){s.clearRect(0,0,64,64),s.drawImage(c,0,0,32,32,0,0,64,64)}:c.onload=function(){s.clearRect(0,0,64,64),s.drawImage(c,16*h,0,16,16,0,0,64,64)},"package_drone"===n&&(h=8),"gunner_drone"===n&&(h=9),"missile_drone"===n&&(h=10),"attack_drone"===n&&(h=11),"boss"===n&&(h=12);const g=l(".infoTop");g.textContent="";const m=o("div");i(m,["infoTitle"]);let f=n.replace("_"," ");f=f.replace("_"," "),d(m,f),u(m,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n        text-transform: capitalize;\n    ");const x=o("div");i(x,["infoText"]),u(x,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 15px;\n        white-space: pre;\n    "),d(x,se[h]),e(g,m),e(g,r),e(g,x)};let Nn,On=[null,null,null,null],Wn=["package_drone","magnet_drone","lightning_rod_drone","force_field_drone"];const Zn=(n,t,r,a,l,s,d,h,g)=>{let m=64;"boss"===t&&(m=256);const f=o("canvas");let x;i(f,["spritecanvas",t]),p(f,["id","width","height"],[t,`${m}px`,`${m}px`]),"none"===a?x="none":(x=new Image,x.src=a),u(f,`\n        position:absolute;\n        top: ${s}px;\n        left: ${l}px;\n    `);let b={name:t,size:r,ele:f,canvsize:m,x:l,y:s,direction:"left",img:x,speed:d,direction_data:{none:0},draw_index:0,frame:0,show:h,frames:g,updates_per_frames:4,timer:1};if(Wn.includes(t)&&(On[Hn(t)]=b),h){const t=f.getContext("2d");t.imageSmoothingEnabled=!1,x.onload=function(){t.clearRect(0,0,m,m),t.drawImage(x,0,0*r,r,r,0,0,m,m)},e(n,f),c(f,"mouseenter",Un)}return"package_drone"===t&&(j=f),"boss"===t&&(Nn=b),f.dataset.imgsrc=a,f},Un=e=>{jn(e.target.id,e.target)},Hn=e=>{let n;return n="package_drone"===e?0:"lightning_rod_drone"===e||"Lightning_Rod_Drone"===e?2:"magnet_drone"===e||"Magnet_Drone"===e?1:3,n},qn=(e,n,t,o)=>{const i=On[e],r=o?2:i.speed,a=n-i.size/2,l=t-i.size/2,s=a-i.x,d=l-i.y,c=Math.sqrt(s*s+d*d),h=s/c*r,u=d/c*r,p=i.x+h-i.size/2,g=i.y+u-i.size/2;Math.atan(-u/h),((e,n)=>{if(e>0&&n>0&&e<=640&&n<=640){const t=Math.floor(e/64),o=Math.floor(n/64);K[t][o]}})(p,g);let m=!0;if(p<576&&p>0&&g<576&&g>0&&(m=!1),m);else if(c>i.speed){On[e].x=p+i.size/2,On[e].y=g+i.size/2,Jn(e,p,g);let n=Math.atan(-u/h);h<0&&(-u<0?n-=Math.PI:n+=Math.PI),n*=180/Math.PI;let t="left";n>=22.5&&n<=67.5?t="upright":n>=67.5&&n<=112.5?t="up":n>=112.5&&n<=157.5?t="upleft":n<=22.5&&n>=-22.5?t="right":n<=-22.5&&n>=-67.5?t="downright":n<=-67.5&&n>=-112.5?t="down":n<=-112.5&&n>=-157.5?t="downleft":n>=157.5&&n<=-157.5&&(t="left")}},Gn=e=>{h(On[e].ele,"mouseenter",Un),n(L,On[e].ele),On[e]=null},Yn=(e,n,t)=>{let o=n;if("increment"===n&&(e.timer===e.updates_per_frames?(o=e.frame+1,e.frame=o,e.timer=1):e.timer+=1),o===e.frames&&(o="highlight"===e.name?1:0,e.frame=o),1===e.timer){e.direction=t;const n=e.direction_data[t];e.draw_index=n;const i=e.ele.getContext("2d"),r=e.img;i.clearRect(0,0,64,64),i.drawImage(r,32*o,32*n,32,32,0,0,64,64)}},Jn=(e,n,t)=>{u(On[e].ele,`\n        position:absolute;\n        pointer-events:none;\n        top: ${t}px;\n        left: ${n}px;\n    `)},Kn=(e,n,t)=>{let o,i;"Lightning_Rod_Drone"===e?(o=ee,i="lightning_rod_drone"):"Magnet_Drone"===e?(o=te,i="magnet_drone"):"Force-field_Drone"===e&&(o=ne,i="force_field_drone"),Zn(L,i,32,o,n,t,0,!0,6)};let Qn;const Xn=(e,n,t,r,a)=>{const l=o("div");return i(l,["button",e]),l.id=e,u(l,`\n            position: absolute;\n            left:${r}px;\n            top: ${a}px;\n            width: 32px;\n            height: 32px;\n            background: url(${P}) -${32*n}px 0;\n        `),c(l,"click",t),l},Vn=()=>{10===oe||(s(".shader").forEach((e=>{n(N,e)})),null!==On[1]&&Gn(1),null!==On[2]&&Gn(2),null!==On[3]&&Gn(3),oe+=1,d(l("#level"),`Level: ${oe}`),(t=>{const r=o("div");if(i(r,["level","shader"]),r.id=t,u(r,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),Le(),(e=>{Ee(),"level-1"===e?(Me("gunner_drone",70,450),Me("gunner_drone",100,50)):"level-2"===e?(Me("gunner_drone",150,450),Me("gunner_drone",100,100)):"level-3"===e?(Me("gunner_drone",50,50),Me("gunner_drone",70,400),Me("gunner_drone",300,400)):"level-4"===e?(Me("gunner_drone",50,50),Me("gunner_drone",200,500),Me("gunner_drone",200,200)):"level-5"===e?(Me("missile_drone",150,400),Me("gunner_drone",200,350),Me("gunner_drone",300,500),Me("gunner_drone",500,550)):"level-6"===e?(Me("gunner_drone",500*Math.random()+50,500*Math.random()+50),Me("gunner_drone",50,300),Me("gunner_drone",100,500*Math.random()+50),Me("missile_drone",400,400)):"level-7"===e?(Me("gunner_drone",500*Math.random()+50,300),Me("gunner_drone",200,500*Math.random()+50),Me("gunner_drone",300*Math.random()+300,500*Math.random()+50),Me("missile_drone",500*Math.random()+50,500*Math.random()+50),Me("attack_drone",320,200*Math.random()+220)):"level-8"===e?(Me("gunner_drone",500,500*Math.random()+50),Me("gunner_drone",500*Math.random()+50,500),Me("missile_drone",500*Math.random()+50,500*Math.random()+50),Me("attack_drone",250,200*Math.random()+20),Me("attack_drone",450,200*Math.random()+420)):"level-9"===e&&(Me("gunner_drone",100,100),Me("gunner_drone",500*Math.random()+50,500*Math.random()+50),Me("missile_drone",200*Math.random()+50,200*Math.random()+50),Me("missile_drone",300*Math.random()+250,300*Math.random()+250),Me("attack_drone",150,200*Math.random()+220),Me("attack_drone",350,200*Math.random()+220))})(t),"level-1"===t)e(r,me(0,200,300,150)),e(r,me(200,350,440,150)),An(7);else if("level-2"===t)e(r,me(400,200,240,100)),e(r,me(300,200,100,300)),e(r,me(100,500,300,50)),e(r,me(0,550,150,50));else if("level-3"===t)e(r,me(140,550,500,50)),e(r,me(140,320,50,230)),e(r,me(140,270,320,50)),e(r,me(410,220,50,50)),e(r,me(0,170,460,50));else if("level-4"===t)e(r,me(360,170,280,100)),e(r,me(220,270,200,50)),e(r,me(100,320,170,50)),e(r,me(0,370,160,50)),An(9);else if("level-5"===t)e(r,me(480,370,160,50)),e(r,me(430,230,50,360)),e(r,me(317,180,233,50)),e(r,me(550,78,50,152)),e(r,me(100,478,50,112)),e(r,me(267,275,50,203)),e(r,me(188,78,50,111)),e(r,me(138,134,50,141)),e(r,me(100,28,500,50)),e(r,me(100,590,380,50)),e(r,me(100,428,167,50)),e(r,me(0,275,267,50));else if("level-6"===t)e(r,me(373,275,267,50)),e(r,me(373,325,50,315)),An(11);else if("level-7"===t)An(13);else if("level-10"===t){const e=l(".endblock");n(N,e),An(15)}e(N,r)})(`level-${oe}`),Q(J[oe],Z),ie.includes(oe)?ge("dark-shader"):ge("light-shader"),_e=!(oe<=6))};t.p;let et=0,nt=!1;const tt=1e3/30;let ot=window.performance.now();const it=(e,n,t)=>{const r=o("canvas");i(r,["game-canvas",`layer-${t}`]),p(r,["width","height"],[`${e}px`,`${n}px`]),u(r,"\n        position:absolute;\n    ");const a=r.getContext("2d");return 0===t&&(((e,n,t)=>{K=J[0],console.log(K),((e,n,t)=>{Q(K,e)})(e)})(a),Z=a),r};function rt(e,t,o){const i=()=>{window.requestAnimationFrame(i);const e=window.performance.now(),t=e-ot;t<tt||(ot=e-t%tt,(()=>{et+=1,(()=>{if(x(F,j)&&(e=>{const n=b(F,200);qn(0,n.x,n.y,!1)})(),oe>0&&oe<=6){const e=s(".pathblock");let t=!1;e.forEach((e=>{f(e,j)&&(t=!0)})),!1===t&&!1===_e&&(e.forEach((e=>{n(l(".level.shader"),e)})),_e=!0,!1===nt&&(nt=!0,An(35)))}if(x(l(".endblock"),j)){if(0===oe)g(j,600,420,64),On[0].x=570,On[0].y=420;else{const e=b(j,64);On[0].y=oe<=5?re[oe+1]:e.y,On[0].x=570,g(j,On[0].x,On[0].y,64)}Vn()}})(),10!==oe?!1===vn&&(ie.includes(oe)&&Ze(ae[ie.indexOf(oe)]),ke(),Oe()):(ke(),Oe(),on(),(()=>{if(1===qe||2===qe){if(null===Ge&&null===Ye){Ge=Je[Math.floor(Math.random()*Je.length)],"fire"===Ge?ln(1):"missile"===Ge?sn(1):"drones"===Ge?cn(1):"evade"===Ge?hn(1):"lightning"===Ge&&pn(1),console.log(Ge);let e=Math.floor(5*Math.random());Ve=ae[e]}2===qe&&(null===Ye&&(Ye=Je[Math.floor(Math.random()*Je.length)],Ye==Ge&&(Ye=null),"fire"===Ye?ln(2):"missile"===Ye?sn(2):"drones"===Ye?cn(2):"evade"===Ye?hn(2):"lightning"===Ye&&pn(2)),console.log(Ye))}if(3===qe&&(Ve="none",et%3==0)){const e=b(He,"none");Fe("explosion",e.x+256*Math.random(),e.y+256*Math.random(),90*Math.floor(4*Math.random()))}})(),Ze(Ve),!0===en&&!1===ye&&gn(nn,tn));for(let e=0;e<4;e++)null!==On[e]&&Yn(On[e],"increment","none")})())};i()}const at=o("div");i(at,["game"]),e(document.body,at),u(at,"\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n    position:relative;\n    width:100%;\n    left: -100px;\n"),e(at,(()=>{u(document.body,`\n        background-color: #242424;\n        background-image: url("${R}");\n        background-size: 128px;\n        background-repeat: repeat;\n        padding: 20px;\n    `);const n=(()=>{const n=o("div");return i(n,["wrapper"]),u(n,"\n        position:relative;\n        border: 5px solid #8b9bb4;\n        width:640px;\n        height:640px;\n    "),e(document.body,n),L=n,n})(),t=it(640,640,0),r=it(640,640,1);e(n,t),e(n,r),(e=>{Zn(e,"package_drone",32,V,500,300,5,!0,8)})(n),(n=>{const t=o("div");i(t,["shadwrap"]),u(t,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n        pointer-events:none;\n        z-index:4;\n    "),e(n,t),e(t,(e=>{const n=o("div");return i(n,["endblock"]),u(n,"\n            background-color: rgba(34, 117, 59, 0.6);\n            left: 0px;\n            top: 0px;\n            height: 640px;\n            width: 10px;\n            position:absolute;\n        "),n})()),N=t,(n=>{let t=o("div");i(t,["edge","left"]),u(t,"\n            left: -15px;\n            top: -10px;\n            height: 660px;\n            width: 10px;\n            position:absolute;\n    "),e(n,t),t=o("div"),i(t,["edge","top"]),u(t,"\n            left: -10px;\n            top: -15px;\n            height: 10px;\n            width: 660px;\n            position:absolute;\n    "),e(n,t),t=o("div"),i(t,["edge","bottom"]),u(t,"\n            left: 0px;\n            top: 635px;\n            height: 10px;\n            width: 660px;\n            position:absolute;\n    "),e(n,t),t=o("div"),i(t,["edge","right"]),u(t,"\n            left: 635px;\n            top: 0px;\n            height: 660px;\n            width: 10px;\n            position:absolute;\n    "),e(n,t)})(n)})(n),console.log("commencing"),rt();const a=(Qn=o("div"),i(Qn,["button-overlay"]),u(Qn,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(n=>{e(n,Xn("changebg",8,Vn,16,16))})(Qn),Qn);return e(n,a),n})()),e(at,(()=>{const n=(()=>{const n=o("div");return i(n,["mini-wrapper"]),u(n,"\n        position:relative;\n        background-color: #181425;\n        border: 5px solid #8b9bb4;\n        width: 640px;\n        display:flex;\n        justify-content: space-around;\n        height:64px;\n        align-items:center;\n        margin-top: 10px;\n    "),e(document.body,n),n})();return t=n,le.map((n=>e(t,(e=>{const n=new Image;n.src=de;const t=new Ae(e,n,de,xe.length),o=t.init();return xe.push(t),o})(n)))),Cn(),(()=>{const n=o("div");i(n,["infoScreen"]),u(n,"\n        width: 250px;\n        height: 640px;\n        background-color: #181425;\n        border: 5px solid #8b9bb4;\n        position: absolute;\n        left: 650px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n        display: flex;\n        flex-direction: column;\n    "),e(n,(()=>{const e=o("div");return i(e,["infoTop"]),u(e,"\n        padding: 5px;\n        position:relative;\n    "),e})()),e(n,(()=>{const n=o("div");i(n,["infoBottom"]),u(n,"\n        display: flex;\n        justify-content: flex-end;\n        flex-direction: column;\n        flex-grow: 1;\n        position:relative;\n    ");const t=o("h1");return t.id="level",u(t,"\n        color:#3a4466;\n        align-self: right;\n        font-size: 30px;\n        font-family:munro;\n        position: relative;\n        top: 22px;\n        left: 5px;\n    "),d(t,"Level: 0"),e(n,t),n})()),e(L,(()=>{const n=o("div");return i(n,["healthbar"]),u(n,"\n        width: 32px;\n        height: 640px;\n        background-color: #181425;\n        border: 5px solid #8b9bb4;\n        position: absolute;\n        left: -52px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n        display:flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    "),Pn(n),e(n,Rn()),n})()),e(L,n)})(),(n=>{const t=o("div");i(t,["cutscene"]),t.style.visibility=Bn?"visible":"hidden",u(t,`\n        height:320px;\n        width: 320px;\n        scale: 2;\n        position:absolute;\n        top: 160px;\n        left: 160px;\n        background: url(${In}) -${320*Tn}px 0px;\n        image-rendering: pixelated;\n        z-index: 6;\n    `),e(n,t);const r=o("div");i(r,["start-but","button"]),u(r,"\n        width: 100px;\n        height:50px;\n        position:absolute;\n        left: 270px;\n        top: 450px;\n        background-color: #a22633;\n        border: 5px solid #FFFFFF;\n        color: white;\n        font-family: munro;\n        font-size: 40px;\n        padding:5px;\n        padding-bottom: 0px;\n        text-align: center;\n        vertical-align: center;\n        z-index: 7;\n    "),d(r,"Start"),c(r,"click",En),e(n,r)})(L),n;var t})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,