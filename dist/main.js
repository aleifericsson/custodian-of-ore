(()=>{"use strict";var e={320:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([e.id,".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}","",{version:3,sources:["webpack://./src/css/animations.css"],names:[],mappings:"AAAA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B",sourcesContent:[".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}"],sourceRoot:""}]);const s=a},414:(e,n,t)=>{t.d(n,{Z:()=>u});var o=t(537),r=t.n(o),i=t(645),a=t.n(i),s=t(667),l=t.n(s),d=new URL(t(542),t.b),c=a()(r()),p=l()(d);c.push([e.id,`html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(${p}) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */`,"",{version:3,sources:["webpack://./src/css/fonts.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;IACI,oBAAoB;IACpB,+DAA+C;EACjD;;EAEA;;;;;;;;;;GAUC",sourcesContent:["html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(../fonts/munro.ttf) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */"],sourceRoot:""}]);const u=c},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);o&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),n.push(c))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],d=o.base?l[0]+o.base:l[0],c=i[d]||0,p="".concat(d," ").concat(c);i[d]=c+1;var u=t(p),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)n[u].references++,n[u].updater(h);else{var g=r(h,o);o.byIndex=s,n.splice(s,0,{identifier:p,updater:g,references:1})}a.push(p)}return a}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=t(i[a]);n[s].references--}for(var l=o(e,r),d=0;d<i.length;d++){var c=t(i[d]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}i=l}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},542:(e,n,t)=>{e.exports=t.p+"f78662ff4aad4d038806.ttf"}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var i=n[o]={id:o,exports:{}};return e[o](i,i.exports,t),i.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!e;)e=o[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{const e=(e,n)=>{e.appendChild(n)},n=(e,n)=>{n.parentNode===e&&e.removeChild(n)},o=e=>document.createElement(e),r=(e,n)=>{n.forEach((n=>{e.classList.add(n)}))},i=(e,n)=>e.classList.contains(n),a=(e,n)=>{n.forEach((n=>{e.classList.remove(n)}))},s=e=>document.querySelector(e),l=e=>document.querySelectorAll(e),d=(e,n)=>{e.textContent=n},c=(e,n,t)=>{e.addEventListener(n,t)},p=(e,n,t)=>{e.removeEventListener(n,t)},u=(e,n)=>{e.style.cssText=n},h=(e,n,t)=>{n.map(((n,o)=>{e.setAttribute(n,t[o])}))},g=(e,n,t,o)=>{e.style.top=t-o/2+"px",e.style.left=n-o/2+"px"},m=(e,n)=>{const t=n.getBoundingClientRect();return{x:e.clientX-t.left,y:e.clientY-t.top}},f=(e,n)=>{if(null===e||null===n)return!1;const t=e.getBoundingClientRect(),o=n.getBoundingClientRect();return!(t.right-15<o.left+15||t.left+15>o.right-15||t.bottom-15<o.top+15||t.top+15>o.bottom-15)},x=(e,n)=>{if(null===e||null===n)return!1;const t=e.getBoundingClientRect(),o=n.getBoundingClientRect();return!(t.right<o.left||t.left>o.right||t.bottom<o.top||t.top>o.bottom)},b=(e,n)=>{const t=e.style.left,o=e.style.top;return{x:Number(t.substring(0,t.length-2))+n/2,y:Number(o.substring(0,o.length-2))+n/2}};var y=t(379),v=t.n(y),A=t(795),w=t.n(A),_=t(569),k=t.n(_),C=t(565),M=t.n(C),I=t(216),B=t.n(I),D=t(589),$=t.n(D),E=t(320),z={};z.styleTagTransform=$(),z.setAttributes=M(),z.insert=k().bind(null,"head"),z.domAPI=w(),z.insertStyleElement=B(),v()(E.Z,z),E.Z&&E.Z.locals&&E.Z.locals;var T=t(414),S={};S.styleTagTransform=$(),S.setAttributes=M(),S.insert=k().bind(null,"head"),S.domAPI=w(),S.insertStyleElement=B(),v()(T.Z,S),T.Z&&T.Z.locals&&T.Z.locals;const R=t.p+"2303bf42784ad28af8cb.gif",P=t.p+"82e9ac88b221b8bd6b76.png";t.p;let L=null,j=null,F=null,N=null,O=null,W=null;const Z=t.p+"89cc97a32f3bdd1a1f7c.png";let U;const H=(e,n)=>{e.forEach(((e,t)=>{e.forEach(((e,o)=>{G(e,t,o,n)}))}))},G=(e,n,t,o)=>{const r=64;let i=new Image;i.src=Z,i.onload=function(){o.drawImage(i,e*r,0,r,r,n*r,t*r,r,r)}},Y=()=>new Array(10).fill(0).map((()=>new Array(10).fill(10))),q=t.p+"34d9a99d3f3e7de647ab.png",J=t.p+"f192e88a398e0860ed26.png",K=t.p+"2e1e9a0ec65f1856fb5a.png",X=t.p+"150d8cbb242787ea4063.png";let Q=0;const V=[4,5,8,9,10];let ee=[350,450,250,560,200,350,270];const ne=["down","left","up","right","random"],te=["Magnet_Drone","Force-field_Drone","Lightning_Rod_Drone","Air_Strike","Machine_Gun","Drone_GPS_Hack","Recall_Drones","Repair_Package_Drone"],oe=["\nAttracts metal towards it\n\n- Placeable\n- Only one on the field at a time\n\n- Cooldown: none\n","\nDissolves bullets and missiles it touches,\nbut can be taken down by attack drones\n\n- Placeable\n- Only one on the field at a time\n\n- Depletes power in 10 seconds\n- Cooldown: 15 seconds\n","\nAbsorbs lightning in a small radius\n\n- Placeable\n- Only one on the field at a time\n\n- Depletes power in 10 seconds\n- Cooldown: 15 seconds\n","\nCall a missile to any point on the field\n\n- Ammo: 1 missile\n- Damage: high\n- Cooldown: 3 seconds\n","\nFires shots at any point on the field,\nmachine overheats after 20 shots\n\n- Ammo: 20 bullets\n- Firerate: 4 bullets per second\n- Cooldown: 10 seconds\n","\nLocks position of all drones temporarily,\nmissiles lose heat-seeking function.\n\n- Duration: 10 seconds\n- Cooldown: 20 seconds\n","\nRemove all placed drones from field.\n\n- Cooldown: none\n","\nWhen held near package drone, \nrestores 2 health every 4 seconds.\n\n- Cooldown: 20 seconds\n","\nHas Dio's special package,\nget it to his house somewhere west.\n","\nShoots low damage burst shots\nin 4 diagonal directions.\n","\nFires heat-seeking missiles\nor torpedoes,  tboth are high damage.\n","\nWill try to ram into you and cut you\nwith its saws. Longer contact means\nmore damage.\n","\nThe boss. Can spawn all drones\nand even summon lightning somehow.\n"],re=t.p+"253f6d096c5e70f2592b.png",ie=t.p+"288679a9935244c50a6f.png",ae=[["D: My package has been suspiciously failed to be delivered twice in a row now!","D: I'm not even getting refunds for this!!","D: I guess when you want something done you have to do it yourself."],["P: Package drone status: Ready to deliver ref#7355608","P: Package drone status: Aberration detected - access from unautorised party","P: Package drone status: Limited remote control mode activated. Freedom of movement restricted at this admin level","D: Damn, I'm in but I cant' move. Guess I'll need my magnet drones to move the package. At least I haven't triggered security... yet."],["P: Package drone status: Warning. Security drones in area. Deviation from designated path may result in aggression.","D: These will do nothing against what I have in my arsenal."],["P: Package drone status: Warning. Heavy wind detected, recalculation of trajectory detected to remain on path.","D: Might be wise to control the drone's rotors directly with my control hack, even if it is temporary."],["D: What?! The path doesn't even go to my house! Someone's already in the system and stealing packages. No wonder I never got mine.","D: No time to get distracted tho, the sooner I get my package, the sooner I can forget about this scummy company."],["S: Security drone status: Aberration detected in rogue package drone. Requesting immediate backup to eliminate the issue","D: Finally: A reason to go all out"],["D: Hey, that's my house! I'm so close!","d: !!..","A: You have laid waste to my brethren and humiliated me!","A: Why do you persist in protecting a nonsentient piece of scrap metal?","d: I'm just rightfully getting something I paid for. Now get out my way before you end up like the rest of your trash!","A: Such determination you hold for something your life is not dependent on!","A: Unlike you, I will get REPLACED if I fail to elimiate any aberrations, and now your on the top of my list!","d: About time you get an update! Your buggy programming can't detect a real threat to your crumbling company if you ever saw one.","d: There are thieves in your system and you go after a guy who's protecting his legal property?! I think it's time for YOU to pay."],["A: Well, you have defeated me. I failed the one job I was programmed to complete. I will no doubt be replaced soon.","A: Say something nice. It might be the last thing I hear before I'm gone forever","D: We're not too different, man. We both made sacrifices defending metal.","D: Tell me, do you have a name?","A: They refered to me as 'Security AI Beta Test v8.10.04'","D: Haha, no wonder you failed. You never made it past beta!","D: Well then, I will give you a proper name. You will be crowned as the one who guarded pieces of rock minerals.","D: The custodian of ore.","C: Befitting name. So long then, enjoy your package.","D: Finally, it is in my hands!","D: Tungsten cube!!"]];let se=0,le=[];const de=e=>{Number.isInteger(e)&&(se=e);const n=pe(le[se]);se+=1,c(n,"click",ce)},ce=e=>{se<=3&&ve();let t=e.target;i(t,"dialogue")||(t=t.parentNode,i(t,"dialogue")||(t=t.parentNode)),p(t,"click",ce),r(t,["dialogue-start-end"]),setTimeout((()=>{n(s(".game"),t),le[se-1].follow&&de()}),200)},pe=n=>{const t=o("div");return r(t,["dialogue","dialogue-start-end"]),h(t,["id","draggable"],[`dialogue-${n.code}`,"false"]),u(t,"\n            color:white;\n            background-color: slategray;\n            border: 5px solid darkred;\n            position:absolute;\n            transition: 0.1s;\n            width: 600px;\n            height: 100px;\n            left: calc(50% -200px);\n            top: 500px;\n            display:flex;\n            justify-content: flex-start;\n            align-items: center;\n            gap: 10px;\n            padding: 10px;\n            z-index: 7;\n        "),e(t,ue(n.charactersrc,n.index)),e(t,he(n.text,n.charname)),e(s(".game"),t),setTimeout((()=>t.classList.remove("dialogue-start-end")),100),t},ue=(e,n)=>{const t=o("div");return r(t,["charBox"]),u(t,`\n        border: 2px solid darkred;\n        min-width: 32px;\n        min-height: 32px;\n        margin: 16px;\n        scale: 2;\n        image-rendering: pixelated;\n        background: url(${e}) -${32*n}px 0px;\n    `),t},he=(n,t)=>{const r=o("div"),i=o("div"),a=o("div");return u(r,"\n        position:relative;\n        top: -10px;\n    "),u(i,"\n        color:white;\n        font-family: 'munro';\n        font-size: 20px;\n    "),u(a,"\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n    "),d(i,n),d(a,t),e(r,a),e(r,i),r},ge=()=>{ae.map((e=>{e.map(((n,t)=>{const o=n.substring(0,1),r=n.substring(3,n.length);let i,a,s,l=ie;s=t!==e.length-1,"D"===o?(i="Dio",a=0):"d"===o?(i="Dio",a=3):"A"===o?(i="Security AI",a=4):"P"===o?(i="Package Drone",a=1):"S"===o?(i="Security Drone",a=2):"C"===o&&(i="Custodian of Ore",a=4),((e,n,t,o,r,i)=>{le.push({text:e,code:t,charactersrc:o,follow:r,charname:n,index:i})})(r,i,a,l,s,a),a+=1}))}))},me=t.p+"9f4a624ec8848f4ec512.png";let fe=!0,xe=0,be=0;const ye=(e,n)=>{xe=e,fe=n;const t=s(".cutscene");t.style.visibility=fe?"visible":"hidden",t.style.background=`url(${me}) -${320*xe}px 0px`},ve=()=>{3===be&&(ye(xe,!1),setTimeout((()=>{de()}),1e3)),0===be?(be+=1,p(s(".start-but"),"click",ve),n(j,s(".start-but")),de(),ye(1,!0)):2===be?(ye(2,!0),be+=1):be+=1},Ae=t.p+"40bead41f130d5bf6de7.png",we=t.p+"99abed76b1b33034fd39.png",_e=t.p+"e17a9544f3d78de0605e.png",ke=t.p+"3331e3f5214631b75c3d.png",Ce=(e,n)=>{const t=Math.floor(n.x/64),o=Math.floor(n.y/64);let r=U[t][o];r++,20==r&&(r=0),((e,n,t)=>{U[e][n]=t})(t,o,r)};let Me=[],Ie=20,Be=!1,De=40;function $e(t,i,a,l){this.name=t,this.index=l,this.img=i,this.imgsrc=a,this.currentFrame=0,this.canvele,this.imgele,this.backele,this.lock=null,this.init=()=>{const n=this.index;this.addedleft=64*Me.length,this.size;const t=this.name,i=o("canvas");r(i,["mini-canvas",`${t}`]),h(i,["width","height"],["64px","64px"]),u(i,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const a=i.getContext("2d"),s=this.img;a.imageSmoothingEnabled=!1,s.onload=function(){a.clearRect(0,0,64,64),a.drawImage(s,16*n,0,16,16,0,0,64,64)},this.canvele=i,this.ctx=a;const l=o("canvas");r(l,["canvas-icon"]),h(l,["width","height","id"],["64px","64px",t]),u(l,"\n        ");const d=o("div");r(d,["backele",t]),u(d,"\n            width: 64px;\n            height: 64px;\n            position:relative;\n        ");const c=l.getContext("2d");return c.imageSmoothingEnabled=!1,s.onload=function(){c.clearRect(0,0,64,64),c.drawImage(s,16*n,0,16,16,0,0,64,64)},l.dataset.imgsrc=this.imgsrc,l.dataset.index=n,this.imgele=l,this.initMouse(i,l),e(d,l),this.backele=d,d},this.cooldown=i=>{const a=this.backele,s=o("div");r(s,["lock",t]),u(s,`\n            width: 16px;\n            height: 16px;\n            scale: 4;\n            top: 24px;\n            left: 24px;\n            image-rendering: pixelated;\n            position:absolute;\n            background: url(${re}) -144px 0px;\n        `),e(a,s),this.lock=s,setTimeout((()=>{n(a,s),this.lock=null}),i)},this.initMouse=(r,a)=>{const l=r.getContext("2d");let d;const h=j;let f,x=[],b=this.size,y=(this.currentFrame,this.index),v=!1;const A=e=>{v=!0,0===x.length&&("Machine_Gun"===t?(Ie=20,x.push(setInterval((()=>{0===Ie?clearInterval(x[0]):(Ie-=1,We("good_hit",f.x-24,f.y-24,90*Math.floor(4*Math.random())))}),250))):"Magnet_Drone"===t?x.push(setInterval((()=>{g(L,f.x,f.y,200)}),100)):"Lightning_Rod_Drone"===t?x.push(setInterval((()=>{g(W,f.x,f.y,200)}),100)):"Repair_Package_Drone"===t&&x.push(setInterval((()=>{g(O,f.x,f.y,200),0===De?(De=40,qe(Ye+2)):De-=1}),100)))},w=e=>{e.preventDefault(),f=m(e,h),d=m(e,document.body),g(r,d.x,d.y,64)};c(a,"mousedown",(a=>{a.preventDefault(),r.style.top="-1000px",r.style.left="-1000px",e(document.body,r),c(document.body,"mousemove",w),c(h,"mouseenter",A),l.clearRect(0,0,64,64),l.drawImage(i,16*y,0,16,16,0,0,64,64),"Magnet_Drone"===t?(null!==L&&(n(j,L),L=null),(()=>{const n=o("div");n.id="magnet_hitbox",u(n,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        z-index: 5;\n        pointer-events: none;\n    "),L=n,e(s(".wrapper"),n)})()):("Force-field_Drone"===t&&this.cooldown(15e3),"Lightning_Rod_Drone"===t&&(this.cooldown(15e3),(()=>{const n=o("div");n.id="lr_hitbox",u(n,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        z-index: 5;\n        pointer-events: none;\n        background-color: rgba(255,255,255, 0.5);\n    "),W=n,e(s(".wrapper"),n)})()),"Air_Strike"===t&&this.cooldown(3e3),"Machine_Gun"===t&&this.cooldown(1e4),"Drone_GPS_Hack"===t&&(this.cooldown(2e4),Be=!0,setTimeout((()=>{Be=!1}),1e4)),"Repair_Package_Drone"===t&&((()=>{const n=o("div");n.id="heal_hitbox",u(n,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        z-index: 5;\n        pointer-events: none;\n    "),O=n,e(s(".wrapper"),n)})(),this.cooldown(2e4)),"Recall_Drones"===t&&(null!==Xe[1]&&on(1),null!==Xe[2]&&on(2),null!==Xe[3]&&on(3))),["Magnet_Drone","Lightning_Rod_Drone","Force-field_Drone"].includes(this.name)&&null!==Xe[nn(this.name)]&&on(nn(this.name))})),c(document.body,"mouseup",(e=>{p(document.body,"mousemove",w),p(h,"mouseenter",A);let o=m(e,h);if(!0===v){if("Air_Strike"===this.name&&We("good_missile",o.x,o.y,0),["Magnet_Drone","Lightning_Rod_Drone","Force-field_Drone"].includes(this.name)){const e=o.x-40,r=o.y-40,i=4;if(e<576&&e>0&&r<576&&r>0)if(sn(t,e,r),"Force-field_Drone"===t){const n=e-10,t=r-10;We("force_field",n+32+i/2,t-i,90),We("force_field",n-i,t+32+i/2,0),We("force_field",n+32+i/2,t+64+i,90),We("force_field",n+64+i,t+32+i/2,0),setTimeout((()=>{on(3)}),1e4)}else"Lightning_Rod_Drone"===t&&setTimeout((()=>{on(2),n(j,W),W=null}),1e4)}"Repair_Package_Drone"===t&&null!==O&&(n(j,O),L=null),v=!1}clearInterval(x[0]),x=[],null!=s(`.mini-canvas.${this.name}`)&&n(document.body,r),l.clearRect(0,0,b,b)})),c(a,"mouseenter",(e=>{Je(e.target.id,e.target)}))}}let Ee=[],ze=!1;const Te=(e,n,t)=>{let o,i,a,s=5;"gunner_drone"===e&&(o=we,i=100),"missile_drone"===e&&(o=_e,i=250),"attack_drone"===e&&(o=ke,i=6,s=2),"none"===o?a="none":(a=new Image,a.src=o);let l=Math.floor(Math.random()*i*.5),d=360*Math.random();const c=Ve(j,e,32,o,n,t,5,!0,6);r(c,["enemy"]),Ee.push({ele:c,type:e,x:n,y:t,img:a,fireevery:i,firetimer:l,timeout:null,size:64,moving:!1,moveTimer:10,speed:s,rot:d,direction_data:{none:0},draw_index:0,frame:0,show:!0,frames:6,updates_per_frames:4,timer:1})},Se=(e,n)=>{const t=e.x,o=e.y,r=n+90,i=e.speed*Math.cos(r*(Math.PI/180)),a=e.speed*Math.sin(r*(Math.PI/180)),s=t+i-e.size/2,l=o+a-e.size/2;let d=!0;s<576&&s>0&&l<576&&l>0&&(d=!1),d||(e.x=s+e.size/2,e.y=l+e.size/2,e.ele.style.left=`${e.x}px`,e.ele.style.top=`${e.y}px`)},Re=e=>{n(j,e.ele),Ee=Ee.filter((function(n){return n!==e}))},Pe=(e,n)=>{We("bullet",e,n,45),We("bullet",e,n,135),We("bullet",e,n,225),We("bullet",e,n,315)},Le=()=>{Ee=[],l(".enemy").forEach((e=>{n(j,e)}))};let je=[],Fe=null,Ne=null,Oe=[];const We=(n,t,i,a)=>{const s=o("div");let l,d,c,p=i,h=0,g=1,m="none";"wind"===n?(l=9,d=100,h=1,c=2):"bullet"===n?(l=1,d="none",h=10,c=2):"hit"===n?(l=2,d=10,c=2):"lightning_warning"===n?(l=10,d=20,c=4,g=.5):"lightning_strike"===n?(l=4,d=7,h=0,c=4):"lightning_bolt"===n?(l=3,d=7,c=4):"missile"===n?(l=0,d="none",h=12,c=2):"explosion"===n?(l=7,d=10,c=2):"good_missile"===n?(l=0,d="none",h=15,c=2,m=i,p=0):"good_explosion"===n?(l=7,d=10,c=4):"good_hit"===n?(l=2,d=10,c=4):"force_field"===n&&(l=12,c=4,d="none"),r(s,["effect",n]),u(s,`\n        scale: ${c};\n        top: ${i}px;\n        left: ${t}px;\n        height: 16px;\n        width: 16px;\n        background: url(${Ae}) -${16*l}px 0;\n        position:absolute;\n        image-rendering: pixelated;\n        transform: rotate(${a}deg);\n        opacity: ${g};\n    `);const f={type:n,x:t,y:p,speed:h,fadein:d,rot:a,ele:s,size:16,final_y:m};je.push(f),"good_explosion"===n&&(Fe=s),"good_hit"===n&&(null!=Ne&&(Ge(Ne),Ne=null),Ne=f),"force_field"===n&&Oe.push(s),e(N,s)},Ze=()=>{je=[],l(".effect").forEach((e=>{n(N,e)}))},Ue=e=>{const n=e.x,t=e.y,o=e.rot+90,r=e.speed*Math.cos(o*(Math.PI/180)),i=e.speed*Math.sin(o*(Math.PI/180)),a=n+r-e.size/2,s=t+i-e.size/2;let d=!1;l(".edge").forEach((n=>{x(n,e.ele)&&(d=!0)})),d?Ge(e):(e.x=a+e.size/2,e.y=s+e.size/2,e.ele.style.left=`${e.x}px`,e.ele.style.top=`${e.y}px`)},He=(e,n,t)=>{const o=b(t,64),r=o.x-e,i=o.y-n;let a=Math.atan(-i/r);return r<0&&(-i<0?a-=Math.PI:a+=Math.PI),a*=180/Math.PI,a-=90,a=-a,a<=-180&&(a+=360),a},Ge=e=>{n(N,e.ele),je=je.filter((function(n){return n!==e}))};let Ye=20;const qe=n=>{if(n<=0)ye(4,!0),s(".healthbar").textContent="",Ze(),Le();else{let t,r;null===s(".healthbar")?(t=Ye,r=n):"number"==typeof n&&(t=n>20?20:n,Ye=t,r=s(".healthbar"),r.textContent="");for(let n=0;n<t;n++){const t=20-n,i=350,a=470,s=Math.floor(t/20*(a-i)+i),l=o("div");l.id=`heart-${t}`,u(l,`\n            height:28px;\n            width: 28px;\n            margin: 2px;\n            background-color: hsl(${s}, 70%, 62%);\n        `),e(r,l)}}},Je=(n,t)=>{const i=t.cloneNode(!1);i.id="infoPic",a(i,["canvas-icon"]),h(i,["width","height"],["64px","64px"]),u(i,"\n        padding-left: 5px;\n        padding-top: 10px;\n    ");const l=i.getContext("2d");l.imageSmoothingEnabled=!1;const c=new Image;c.src=i.dataset.imgsrc;let p=i.dataset.index;["package_drone","gunner_drone","missile_drone","attack_drone","boss_drone"].includes(n)?c.onload=function(){l.clearRect(0,0,64,64),l.drawImage(c,0,0,32,32,0,0,64,64)}:c.onload=function(){l.clearRect(0,0,64,64),l.drawImage(c,16*p,0,16,16,0,0,64,64)},"package_drone"===n&&(p=9),"gunner_drone"===n&&(p=10),"missile_drone"===n&&(p=11),"attack_drone"===n&&(p=12),"boss_drone"===n&&(p=13);const g=s(".infoTop");g.textContent="";const m=o("div");r(m,["infoTitle"]);let f=n.replace("_"," ");f=f.replace("_"," "),d(m,f),u(m,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n        text-transform: capitalize;\n    ");const x=o("div");r(x,["infoText"]),u(x,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 15px;\n        white-space: pre;\n    "),d(x,oe[p]),e(g,m),e(g,i),e(g,x)};let Ke,Xe=[null,null,null,null],Qe=["package_drone","magnet_drone","lightning_rod_drone","force_field_drone"];const Ve=(n,t,i,a,s,l,d,p,g)=>{let m=64;"boss"===t&&(m=256,console.log("huh???"));const f=o("canvas");let x;r(f,["spritecanvas",t]),h(f,["id","width","height"],[t,`${m}px`,`${m}px`]),"none"===a?x="none":(x=new Image,x.src=a),u(f,`\n        position:absolute;\n        top: ${l}px;\n        left: ${s}px;\n    `);let b={name:t,size:i,ele:f,canvsize:m,x:s,y:l,direction:"left",img:x,speed:d,direction_data:{none:0},draw_index:0,frame:0,show:p,frames:g,updates_per_frames:4,timer:1};if(Qe.includes(t)&&(Xe[nn(t)]=b),p){const t=f.getContext("2d");t.imageSmoothingEnabled=!1,x.onload=function(){t.clearRect(0,0,m,m),t.drawImage(x,0,0*i,i,i,0,0,m,m)},e(n,f),c(f,"mouseenter",en)}return"package_drone"===t&&(F=f),"boss"===t&&(Ke=b),f.dataset.imgsrc=a,f},en=e=>{Je(e.target.id,e.target)},nn=e=>{let n;return n="package_drone"===e?0:"lightning_rod_drone"===e||"Lightning_Rod_Drone"===e?2:"magnet_drone"===e||"Magnet_Drone"===e?1:3,n},tn=(e,n,t,o)=>{const r=Xe[e],i=o?2:r.speed,a=n-r.size/2,s=t-r.size/2,l=a-r.x,d=s-r.y,c=Math.sqrt(l*l+d*d),p=l/c*i,u=d/c*i,h=r.x+p-r.size/2,g=r.y+u-r.size/2;Math.atan(-u/p),((e,n)=>{if(e>0&&n>0&&e<=640&&n<=640){const t=Math.floor(e/64),o=Math.floor(n/64);U[t][o]}})(h,g);let m=!0;if(h<576&&h>0&&g<576&&g>0&&(m=!1),m);else if(c>r.speed){Xe[e].x=h+r.size/2,Xe[e].y=g+r.size/2,an(e,h,g);let n=Math.atan(-u/p);p<0&&(-u<0?n-=Math.PI:n+=Math.PI),n*=180/Math.PI;let t="left";n>=22.5&&n<=67.5?t="upright":n>=67.5&&n<=112.5?t="up":n>=112.5&&n<=157.5?t="upleft":n<=22.5&&n>=-22.5?t="right":n<=-22.5&&n>=-67.5?t="downright":n<=-67.5&&n>=-112.5?t="down":n<=-112.5&&n>=-157.5?t="downleft":n>=157.5&&n<=-157.5&&(t="left")}},on=e=>{n(j,Xe[e].ele),Xe[e]=null},rn=(e,n,t)=>{let o=n;if("increment"===n&&(e.timer===e.updates_per_frames?(o=e.frame+1,e.frame=o,e.timer=1):e.timer+=1),o===e.frames&&(o="highlight"===e.name?1:0,e.frame=o),1===e.timer){e.direction=t;const n=e.direction_data[t];e.draw_index=n;const r=e.ele.getContext("2d"),i=e.img;r.clearRect(0,0,64,64),r.drawImage(i,32*o,32*n,32,32,0,0,64,64)}},an=(e,n,t)=>{u(Xe[e].ele,`\n        position:absolute;\n        pointer-events:none;\n        top: ${t}px;\n        left: ${n}px;\n    `)},sn=(e,n,t)=>{let o,r;"Lightning_Rod_Drone"===e?(o=J,r="lightning_rod_drone"):"Magnet_Drone"===e?(o=X,r="magnet_drone"):"Force-field_Drone"===e&&(o=K,r="force_field_drone"),Ve(j,r,32,o,n,t,0,!0,1)},ln=n=>{const t=o("div");let i;r(t,["shader"]),t.id=n,"light-shader"===n?i="\n            background-image: linear-gradient(135deg, rgba(227, 245, 66, 0.3), rgba(230, 201, 147, 0.1));\n        ":"dark-shader"===n&&(i="\n            background-image: linear-gradient(135deg, rgba(54, 88, 163, 0.3), rgba(90, 76, 115, 0.6));\n        "),u(t,`\n        height:640px;\n        width: 640px;\n        position: absolute;\n        z-index: 5;\n        ${i}\n    `),e(N,t)},dn=(e,n,t,i)=>{const a=o("div");return r(a,["pathblock"]),u(a,`\n        background-color: rgba(245, 66, 66, 0.3);\n        left: ${e}px;\n        top: ${n}px;\n        height: ${i}px;\n        width: ${t}px;\n        position:absolute;\n    `),a},cn=e=>{const n=o("div");return r(n,["endblock"]),u(n,"\n            background-color: rgba(34, 117, 59, 0.6);\n            left: 0px;\n            top: 0px;\n            height: 640px;\n            width: 10px;\n            position:absolute;\n        "),n},pn=t.p+"84225ec5d1329e2c7ddb.png";let un,hn;const gn=(e,n,t,i,a)=>{const s=o("div");return r(s,["button",e]),s.id=e,u(s,`\n            position: absolute;\n            left:${i}px;\n            top: ${a}px;\n            width: 32px;\n            height: 32px;\n            background: url(${P}) -${32*n}px 0;\n        `),c(s,"click",t),s},mn=()=>{if(l(".shader").forEach((e=>{n(N,e)})),null!==Xe[1]&&on(1),null!==Xe[2]&&on(2),null!==Xe[3]&&on(3),10===Q?Q=0:Q+=1,10===Q){const n=Ve(j,"boss",128,pn,25,200,5,!0,1);un=n,(()=>{const n=o("div");r(n,["bbwrap"]),u(n,"\n        width: 550px;\n        max-height: 12px;\n        background-color: #242424;\n        position: absolute;\n        left: 40px;\n        color:white;\n        display:flex;\n        justify-content: flex-start;\n        padding: 10px;\n        align-items: center;\n        position:absolute;\n        gap: 20px;\n        z-index: 5;\n    ");const t=o("div");u(t,"\n        font-size: 20px;\n        font-family:munro;\n        color:white;\n    "),d(t,"BOSS"),e(n,t);const i=o("div");r(i,["bbbar"]),u(i,"\n        height: 5px;\n        width: 500px;\n        background-color: white;\n    "),e(n,i),e(j,n)})()}d(s("#level"),`Level: ${Q}`),(n=>{const t=o("div");r(t,["level","shader"]),t.id=n,u(t,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),Ze(),(e=>{Le(),"level-1"===e?(Te("gunner_drone",70,450),Te("gunner_drone",100,50)):"level-2"===e?(Te("gunner_drone",150,450),Te("gunner_drone",100,100)):"level-3"===e?(Te("gunner_drone",50,50),Te("gunner_drone",70,400),Te("gunner_drone",300,400)):"level-4"===e?(Te("gunner_drone",50,50),Te("gunner_drone",200,500),Te("gunner_drone",200,200)):"level-5"===e?(Te("missile_drone",150,400),Te("gunner_drone",200,350),Te("gunner_drone",300,500),Te("gunner_drone",500,550)):"level-6"===e?(Te("gunner_drone",500*Math.random()+50,500*Math.random()+50),Te("gunner_drone",50,300),Te("gunner_drone",100,500*Math.random()+50),Te("missile_drone",400,400)):"level-7"===e?(Te("gunner_drone",500*Math.random()+50,300),Te("gunner_drone",200,500*Math.random()+50),Te("gunner_drone",300*Math.random()+300,500*Math.random()+50),Te("missile_drone",500*Math.random()+50,500*Math.random()+50),Te("attack_drone",320,200*Math.random()+220)):"level-8"===e?(Te("gunner_drone",500*Math.random()+50,300),Te("gunner_drone",500,500*Math.random()+50),Te("gunner_drone",500*Math.random()+50,500),Te("missile_drone",500*Math.random()+50,500*Math.random()+50),Te("missile_drone",100,500*Math.random()+50),Te("attack_drone",250,200*Math.random()+20),Te("attack_drone",450,200*Math.random()+420)):"level-9"===e&&(Te("gunner_drone",100,100),Te("gunner_drone",500*Math.random()+50,320),Te("gunner_drone",500*Math.random()+50,500*Math.random()+50),Te("missile_drone",200*Math.random()+50,200*Math.random()+50),Te("missile_drone",300*Math.random()+250,300*Math.random()+250),Te("attack_drone",150,200*Math.random()+220),Te("attack_drone",350,200*Math.random()+220),Te("attack_drone",450,150))})(n),"level-1"===n?(e(t,dn(0,200,300,150)),e(t,dn(200,350,440,150))):"level-2"===n?(e(t,dn(400,200,240,100)),e(t,dn(300,200,100,300)),e(t,dn(100,500,300,50)),e(t,dn(0,550,150,50))):"level-3"===n?(e(t,dn(140,550,500,50)),e(t,dn(140,320,50,230)),e(t,dn(140,270,320,50)),e(t,dn(410,220,50,50)),e(t,dn(0,170,460,50))):"level-4"===n?(e(t,dn(360,170,280,100)),e(t,dn(220,270,200,50)),e(t,dn(100,320,170,50)),e(t,dn(0,370,160,50))):"level-5"===n?(e(t,dn(480,370,160,50)),e(t,dn(430,230,50,360)),e(t,dn(317,180,233,50)),e(t,dn(550,78,50,152)),e(t,dn(100,478,50,112)),e(t,dn(267,275,50,203)),e(t,dn(188,78,50,111)),e(t,dn(138,134,50,141)),e(t,dn(100,28,500,50)),e(t,dn(100,590,380,50)),e(t,dn(100,428,167,50)),e(t,dn(0,275,267,50))):"level-6"===n&&(e(t,dn(373,275,267,50)),e(t,dn(373,325,50,315))),"level-10"!==n&&e(t,cn(":)")),e(N,t)})(`level-${Q}`),V.includes(Q)?ln("dark-shader"):ln("light-shader"),ze=!(Q<=6)};t.p;let fn=0;const xn=()=>{fn+=1,bn(),Ee.map((e=>{!0===ze&&((e=>{if(null!==Fe&&f(Fe,e.ele)&&Re(e),0===e.firetimer){e.firetimer=e.fireevery;const n=e.x+32,t=e.y+32;"gunner_drone"===e.type&&(Pe(n,t),setTimeout((()=>{Pe(n,t)}),200),setTimeout((()=>{Pe(n,t)}),400),setTimeout((()=>{e.moving=!0}),1e3)),"missile_drone"===e.type&&(We("missile",n,t,180),setTimeout((()=>{e.moving=!0}),1e3)),"attack_drone"===e.type&&x(e.ele,F)&&qe(Ye-1)}else e.firetimer=e.firetimer-1})(e),(e=>{Be||(!0===e.moving&&(0===e.moveTimer?(e.moveTimer=10,e.moving=!1,e.rot=360*Math.random()):(e.moveTimer=e.moveTimer-1,Se(e,e.rot))),"attack_drone"===e.type&&Se(e,He(e.x,e.y,F)+180))})(e)),rn(e,"increment","none")})),V.includes(Q)&&(e=>{let n,t;if("random"===e){let e=Math.floor(4*Math.random());n=ne[e]}else n=e;"down"===n?(tn(0,Xe[0].x,640,!0),t=0):"right"===n?(tn(0,640,Xe[0].y,!0),t=270):"up"===n?(tn(0,Xe[0].x,0,!0),t=180):"left"===n&&(tn(0,0,Xe[0].y,!0),t=90);const o=Math.floor(22*Math.random());if(21===o&&We("wind",640*Math.random(),640*Math.random(),t),(8===Q||9===Q||10===Q)&&(Math.floor(300*Math.random()),21===o)){const e=64*Math.floor(10*Math.random())+24,n=64*Math.floor(10*Math.random())+24;We("lightning_warning",e,n,0)}})(ne[V.indexOf(Q)]),je.map((e=>{if(["bullet","wind","good_missile"].includes(e.type))Ue(e);else if("missile"===e.type){let n;if(!Be){x(L,e.ele),n=He(e.x,e.y,F);let t=((e,n)=>{let t=n-e;return t<=-180&&(t+=360),t>180&&(t-=360),t>0?-1:t<0?1:0})(e.rot,n);1===t?e.rot=e.rot+3:-1===t&&(e.rot=e.rot-3),e.rot>180&&(e.rot=e.rot-360),e.ele.style.transform=`rotate(${e.rot}deg)`}Oe.map((n=>{f(e.ele,n)&&Ge(e)})),Ue(e)}if((e=>{if(0===e.fadein){if("lightning_warning"===e.type)if(x(e.ele,W))if(null===Xe[2]){const e=b(W,200);let n=Math.floor((e.y-64)/64);for(let t=0;t<n+1;t++)We("lightning_bolt",e.x,e.y-64(64*t),0)}else{const e=b(Xe[2].ele,64);let n=Math.floor((e.y-64)/64);for(let t=0;t<n+1;t++)We("lightning_bolt",e.x,e.y-64-64*t,0)}else{We("lightning_strike",e.x,e.y,90*Math.floor(4*Math.random()));let n=(e.y-24)/64;for(let t=0;t<n+1;t++)We("lightning_bolt",e.x,e.y-64*t,0)}"good_explosion"===e.type&&(Fe=null),Ge(e)}else"none"!==e.fadein?(e.fadein=e.fadein-1,"lightning_warning"===e.type&&(e.fadein%4==0||e.fadein%4==1?e.ele.style.background=`url(${Ae}) -176px 0`:e.ele.style.background=`url(${Ae}) -160px 0`)):"good_missile"===e.type?e.y>=e.final_y&&(We("good_explosion",e.x,e.y,90*Math.floor(4*Math.random())),Ge(e)):"force_field"===e.type&&(null===Xe[3]&&(Ge(e),Oe=[]),e.ele.style.background=fn%8<4?`url(${Ae}) -208px 0`:`url(${Ae}) -192px 0`)})(e),!0===ze){if("bullet"===e.type){if(f(e.ele,F)){qe(Ye-1);let n=0,t=0;45===e.rot?(n=16,t=-16):135===e.rot?(n=16,t=16):225===e.rot?(n=-16,t=16):315===e.rot&&(n=-16,t=-16);let o=b(F,64);We("hit",o.x+n,o.y+t,360*Math.random()),Ge(e)}Oe.map((n=>{f(e.ele,n)&&Ge(e)}))}if("lightning_strike"===e.type&&f(e.ele,F)&&(qe(Ye-3),Ge(e)),"missile"===e.type){if(f(e.ele,F)){qe(Ye-4);let n=b(F,64);We("explosion",n.x,n.y,360*Math.random()),Ge(e)}if(null!==Xe[1])if(f(e.ele,Xe[1].ele)){let t=b(L,64);We("explosion",t.x+64,t.y+64,360*Math.random()),Ge(e),on(1),null!==L&&n(j,L)}else null!==Ne&&f(Ne.ele,e.ele)&&Ge(e)}}})),rn(Xe[0],"increment","none")},bn=()=>{if(x(L,F)&&(e=>{const n=b(L,200);tn(0,n.x,n.y,!1)})(),Q>0&&Q<=6){const e=l(".pathblock");let t=!1;e.forEach((e=>{f(e,F)&&(t=!0)})),!1===t&&(e.forEach((e=>{n(s(".level.shader"),e)})),ze=!0)}if(x(s(".endblock"),F)){if(0===Q)g(F,600,420,64),Xe[0].x=570,Xe[0].y=420;else{const e=b(F,64);Xe[0].y=Q<=5?ee[Q+1]:e.y,Xe[0].x=570,g(F,Xe[0].x,Xe[0].y,64)}mn()}},yn=1e3/30;let vn=window.performance.now();const An=(e,n,t)=>{const a=o("canvas");r(a,["game-canvas",`layer-${t}`]),h(a,["width","height"],[`${e}px`,`${n}px`]),u(a,"\n        position:absolute;\n    ");const s=a.getContext("2d");return(e=>{c(e,"click",(n=>{e.getContext("2d");const t=function(e,n){const t=e.getBoundingClientRect();return{x:n.clientX-t.left,y:n.clientY-t.top}}(e,n);i(e,"layer-1")&&Ce(0,t)}))})(a),0===t&&((e,n,t)=>{U=Y(),U[2][1]=11,U[9][9]=18,U[9][8]=18,U[8][8]=19,U[8][9]=19,console.log(U),((e,n,t)=>{H(U,e)})(e)})(s),a};let wn=-1;const _n=e=>{"slider1"===e.target.id?s(".layer-1").style.left=`${e.target.value}px`:"slider2"===e.target.id&&(s(".button-overlay").style.left=`${e.target.value}px`)},kn=o("div");r(kn,["game"]),e(document.body,kn),u(kn,"\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n    position:relative;\n    width:100%;\n    left: -100px;\n"),e(kn,(()=>{u(document.body,`\n        background-color: #242424;\n        background-image: url("${R}");\n        background-size: 70px;\n        background-repeat: repeat;\n        padding: 20px;\n    `);const n=(()=>{const n=o("div");return r(n,["wrapper"]),u(n,"\n        position:relative;\n        border: 5px solid darkred;\n        width:640px;\n        height:640px;\n    "),e(document.body,n),j=n,n})(),t=An(640,640,0),i=An(640,640,1);e(n,t),e(n,i),Ve(n,"package_drone",32,q,500,300,5,!0,8),(n=>{const t=o("div");r(t,["shadwrap"]),u(t,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n        pointer-events:none;\n    "),e(n,t),e(t,cn("start")),N=t,(n=>{let t=o("div");r(t,["edge","left"]),u(t,"\n            left: -15px;\n            top: -10px;\n            height: 660px;\n            width: 10px;\n            position:absolute;\n    "),e(n,t),t=o("div"),r(t,["edge","top"]),u(t,"\n            left: -10px;\n            top: -15px;\n            height: 10px;\n            width: 660px;\n            position:absolute;\n    "),e(n,t),t=o("div"),r(t,["edge","bottom"]),u(t,"\n            left: 0px;\n            top: 635px;\n            height: 10px;\n            width: 660px;\n            position:absolute;\n    "),e(n,t),t=o("div"),r(t,["edge","right"]),u(t,"\n            left: 635px;\n            top: 0px;\n            height: 660px;\n            width: 10px;\n            position:absolute;\n    "),e(n,t)})(n)})(n),console.log("commencing"),function(e,n,t){const o=()=>{window.requestAnimationFrame(o);const e=window.performance.now(),n=e-vn;n<yn||(vn=e-n%yn,xn())};o()}();const a=(hn=o("div"),r(hn,["button-overlay"]),u(hn,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(n=>{e(n,gn("changebg",8,mn,16,16))})(hn),hn);return e(n,a),n})()),e(kn,(()=>{const n=(()=>{const n=o("div");return r(n,["mini-wrapper"]),u(n,"\n        position:relative;\n        background-color: #000000;\n        border: 5px solid darkred;\n        width: 640px;\n        display:flex;\n        justify-content: space-around;\n        height:64px;\n        align-items:center;\n        margin-top: 10px;\n    "),e(document.body,n),n})();return t=n,te.map((n=>e(t,(e=>{const n=new Image;n.src=re;const t=new $e(e,n,re,Me.length),o=t.init();return Me.push(t),o})(n)))),ge(),(()=>{const n=o("div");r(n,["infoScreen"]),u(n,"\n        width: 250px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkred;\n        position: absolute;\n        left: 650px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n    "),e(n,(()=>{const e=o("div");return r(e,["infoTop"]),u(e,"\n        padding: 5px;\n    "),e})()),e(n,(()=>{const e=o("div");return r(e,["infoBottom"]),e})()),e(j,(()=>{const n=o("div");r(n,["healthbar"]),u(n,"\n        width: 32px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkred;\n        position: absolute;\n        left: -52px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n        display:flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    "),qe(n);const t=o("div");return u(t,`\n        position:absolute;\n        width: 16px;\n        height: 16px;\n        background: url(${re}) -128px 0px;\n        scale: 300%;\n        image-rendering: pixelated;\n        left: 8px;\n        z-index: 5;\n        transform: translate(0, 3px);\n    `),e(n,t),n})()),e(j,n)})(),(n=>{const t=o("div");r(t,["cutscene"]),t.style.visibility=fe?"visible":"hidden",u(t,`\n        height:320px;\n        width: 320px;\n        scale: 2;\n        position:absolute;\n        top: 160px;\n        left: 160px;\n        background: url(${me}) -${320*xe}px 0px;\n        image-rendering: pixelated;\n        z-index: 6;\n    `),e(n,t);const i=o("div");r(i,["start-but","button"]),u(i,"\n        width: 100px;\n        height:50px;\n        position:absolute;\n        left: 270px;\n        top: 450px;\n        background-color: darkred;\n        color: white;\n        font-family: munro;\n        font-size: 30px;\n        padding:5px;\n        padding-bottom: 0px;\n        text-align: center;\n        vertical-align: center;\n        z-index: 7;\n    "),d(i,"Start"),c(i,"click",ve),e(n,i)})(j),n;var t})()),e(kn,(()=>{const n=(()=>{const n=o("div");r(n,["debug-wrapper"]),u(n,"\n        position:relative;\n    ");const t=o("input");t.id="slider1",c(t,"input",_n),h(t,["type","min","max","value","class"],["range","0","640","0","slidey"]),e(n,t);const i=o("input");i.id="slider2",c(i,"input",_n),h(i,["type","min","max","value","class"],["range","0","640","0","slidey"]),e(n,i);const a=o("h1");a.id="score",u(a,"\n        color:white;\n        font-family: munro;\n    ");const l=o("h1");return l.id="level",u(l,"\n        color:white;\n        font-family:munro;\n    "),d(l,"Level: 0"),((e="bruh")=>{wn+=1,d("bruh"===e?s("#score"):e,`Score: ${wn}`)})(a),e(n,a),e(n,l),n})();return e(document.body,n),n})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,