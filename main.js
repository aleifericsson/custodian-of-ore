(()=>{"use strict";var n={320:(n,t,e)=>{e.d(t,{Z:()=>s});var o=e(537),r=e.n(o),i=e(645),a=e.n(i)()(r());a.push([n.id,".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}","",{version:3,sources:["webpack://./src/css/animations.css"],names:[],mappings:"AAAA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B",sourcesContent:[".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}"],sourceRoot:""}]);const s=a},414:(n,t,e)=>{e.d(t,{Z:()=>u});var o=e(537),r=e.n(o),i=e(645),a=e.n(i),s=e(667),l=e.n(s),c=new URL(e(542),e.b),d=a()(r()),p=l()(c);d.push([n.id,`html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(${p}) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */`,"",{version:3,sources:["webpack://./src/css/fonts.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;IACI,oBAAoB;IACpB,+DAA+C;EACjD;;EAEA;;;;;;;;;;GAUC",sourcesContent:["html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(../fonts/munro.ttf) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */"],sourceRoot:""}]);const u=d},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",o=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),o&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),o&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);o&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},667:n=>{n.exports=function(n,t){return t||(t={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]|(%20)/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,o=0;o<t.length;o++)if(t[o].identifier===n){e=o;break}return e}function o(n,o){for(var i={},a=[],s=0;s<n.length;s++){var l=n[s],c=o.base?l[0]+o.base:l[0],d=i[c]||0,p="".concat(c," ").concat(d);i[c]=d+1;var u=e(p),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)t[u].references++,t[u].updater(f);else{var m=r(f,o);o.byIndex=s,t.splice(s,0,{identifier:p,updater:m,references:1})}a.push(p)}return a}function r(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=e(i[a]);t[s].references--}for(var l=o(n,r),c=0;c<i.length;c++){var d=e(i[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=l}}},569:n=>{var t={};n.exports=function(n,e){var o=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,r&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},542:(n,t,e)=>{n.exports=e.p+"f78662ff4aad4d038806.ttf"}},t={};function e(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return n[o](i,i.exports,e),i.exports}e.m=n,e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var o=t.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!n;)n=o[r--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{const n=(n,t)=>{n.appendChild(t)},t=(n,t)=>{t.parentNode===n&&n.removeChild(t)},o=n=>document.createElement(n),r=(n,t)=>{t.forEach((t=>{n.classList.add(t)}))},i=(n,t)=>n.classList.contains(t),a=(n,t)=>{t.forEach((t=>{n.classList.remove(t)}))},s=n=>document.querySelector(n),l=n=>document.querySelectorAll(n),c=(n,t)=>{n.textContent=t},d=(n,t,e)=>{n.addEventListener(t,e)},p=(n,t,e)=>{n.removeEventListener(t,e)},u=(n,t)=>{n.style.cssText=t},f=(n,t,e)=>{t.map(((t,o)=>{n.setAttribute(t,e[o])}))},m=(n,t,e,o)=>{n.style.top=e-o/2+"px",n.style.left=t-o/2+"px"},h=(n,t)=>{const e=t.getBoundingClientRect();return{x:n.clientX-e.left,y:n.clientY-e.top}},g=(n,t)=>{if(null===n||null===t)return!1;const e=n.getBoundingClientRect(),o=t.getBoundingClientRect();return!(e.right<o.left||e.left>o.right||e.bottom<o.top||e.top>o.bottom)},A=(n,t)=>{const e=n.style.left,o=n.style.top;return{x:Number(e.substring(0,e.length-2))+t/2,y:Number(o.substring(0,o.length-2))+t/2}};var b=e(379),v=e.n(b),x=e(795),y=e.n(x),C=e(569),w=e.n(C),B=e(565),k=e.n(B),I=e(216),E=e.n(I),$=e(589),M=e.n($),_=e(320),z={};z.styleTagTransform=M(),z.setAttributes=k(),z.insert=w().bind(null,"head"),z.domAPI=y(),z.insertStyleElement=E(),v()(_.Z,z),_.Z&&_.Z.locals&&_.Z.locals;var S=e(414),R={};R.styleTagTransform=M(),R.setAttributes=k(),R.insert=w().bind(null,"head"),R.domAPI=y(),R.insertStyleElement=E(),v()(S.Z,R),S.Z&&S.Z.locals&&S.Z.locals;const D=e.p+"2303bf42784ad28af8cb.gif",T=e.p+"82e9ac88b221b8bd6b76.png",P=(e.p,e.p+"46f9a3232743a28fe55c.mp3"),L=e.p+"f6a9d30b202864f403ab.mp3",j=e.p+"4b0a7fa0436041018c59.mp3",N=e.p+"2313cadcd41e0912116a.mp3",O=e.p+"db5db37355927833123f.mp3",Z=e.p+"9a548da064d95ad7ec01.mp3";let F=[];const U=(n,t)=>{var e=new Audio(n);F.push({audio:e,name:t})};let q=null,G=null,H=null,J=null;const K=e.p+"89cc97a32f3bdd1a1f7c.png";let X;const Y=(n,t,e)=>{Q(X,n)},Q=(n,t)=>{n.forEach(((n,e)=>{n.forEach(((n,o)=>{W(n,e,o,t)}))}))},W=(n,t,e,o)=>{const r=64;let i=new Image;i.src=K,i.onload=function(){o.drawImage(i,n*r,0,r,r,t*r,e*r,r,r)}},V=e.p+"c488352b32cb2834c60f.png",nn=e.p+"08946cf0e87b49e7f900.png";let tn=[];const en=(n,t,e)=>{let o,i;"gunner_drone"===n&&(o=nn,i=200);let a=Math.floor(Math.random()*i);const s=rn(G,n,32,o,t,e,5,!0,1);r(s,["enemy"]),tn.push({ele:s,type:n,firing:!1,x:t,y:e,fireevery:i,timeout:a})};let on=[];const rn=(t,e,i,a,s,l,c,d,p)=>{const m=o("canvas");let h;r(m,["spritecanvas"]),f(m,["id","width","height"],[e,"64px","64px"]),"none"===a?h="none":(h=new Image,h.src=a),u(m,`\n        position:absolute;\n        pointer-events:none;\n        top: ${l}px;\n        left: ${s}px;\n    `);let g={name:e,size:i,ele:m,x:s,y:l,direction:"left",img:h,speed:c,direction_data:{none:0},draw_index:0,frame:0,show:d,frames:p,updates_per_frames:2,timer:1};if(on.push(g),d){const e=m.getContext("2d");e.imageSmoothingEnabled=!1,h.onload=function(){e.clearRect(0,0,64,64),e.drawImage(h,0,0*i,i,i,0,0,64,64)},n(t,m)}return"package_drone"===e&&(H=m),m},an=(n,t,e)=>{u(on[n].ele,`\n        position:absolute;\n        pointer-events:none;\n        top: ${e}px;\n        left: ${t}px;\n    `)},sn=e.p+"39e6521c1a1cd6dea9e1.png";let ln=[];const cn=(t,e,i,a)=>{const s=o("div");let l,c,d,p;"wind"===t&&(l=9,c=200,d=2,p=2),r(s,["effect",t]),u(s,`\n        scale: ${p};\n        top: ${i}px;\n        left: ${e}px;\n        height: 16px;\n        width: 16px;\n        background: url(${sn}) -${16*l}px 0;\n        position:absolute;\n        image-rendering: pixelated;\n        transform: rotate(${a}deg);\n    `),ln.push({type:t,x:e,y:i,speed:d,fadein:c,rot:a}),n(J,s)},dn=t=>{const e=o("div");let i;r(e,["shader"]),e.id=t,"light-shader"===t?i="\n            background-image: linear-gradient(135deg, rgba(227, 245, 66, 0.3), rgba(230, 201, 147, 0.1));\n        ":"dark-shader"===t&&(i="\n            background-image: linear-gradient(135deg, rgba(54, 88, 163, 0.3), rgba(90, 76, 115, 0.6));\n        "),u(e,`\n        height:640px;\n        width: 640px;\n        position: absolute;\n        ${i}\n    `),n(J,e)},pn=(n,t,e,i)=>{const a=o("div");return r(a,["pathblock"]),u(a,`\n        background-color: rgba(245, 66, 66, 0.3);\n        left: ${n}px;\n        top: ${t}px;\n        height: ${i}px;\n        width: ${e}px;\n        position:absolute;\n    `),a},un=n=>{const t=o("div");return r(t,["endblock"]),u(t,"\n            background-color: rgba(34, 117, 59, 0.6);\n            left: 0px;\n            top: 0px;\n            height: 640px;\n            width: 10px;\n            position:absolute;\n        "),t};let fn=0;const mn=[4,5,8,9,10],hn=["Magnet_Drone","Gunner_Drone","Lightning_Rod_Drone","Air_Strike","Machine_Gun","Drone_Control_Hack","Drone_GPS_Hack","Recall_Drones","Repair_Package_Drone"],gn=["\nAttracts metal towards it\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Cooldown: none\n","\nShoots things in a small radius\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Ammo: 10 bullets\n- Damage: low\n- Cooldown: 20 seconds\n","\nAbsorbs lightning in a small radius\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Shatters after 3 lightning strikes\n- Cooldown: 20 seconds\n","\nCall a missile to any point on the field\n\n- Ammo: 1 missile\n- Damage: high\n- Cooldown: 10 seconds\n","\nFires shots at any point on the field,\nmachine overheats after 20 shots\n\n- Ammo: 20 bullets\n- Firerate: 4 bullets per second\n- Cooldown: 20 seconds\n","\nMakes drones moveable temporarily,\ndrag onto desired drone and\ndrag affected drone to move it\n\n- Duration: 10 seconds\n- Cooldown: 30 seconds\n","\nLocks a drone's position temporarily,\ndrag onto desired drone\n\n- Duration: 10 seconds\n- Cooldown: 30 seconds\n","\nRemove all placed drones from field.\n\n- Cooldown: none\n","\nWhen near package drone, restores\n2 health per 5 seconds.\n\n- Cooldown: 30 seconds\n"];let An;const bn=(n,t,e,i,a)=>{const s=o("div");return r(s,["button",n]),s.id=n,u(s,`\n            position: absolute;\n            left:${i}px;\n            top: ${a}px;\n            width: 32px;\n            height: 32px;\n            background: url(${T}) -${32*t}px 0;\n        `),d(s,"click",e),s},vn=()=>{l(".shader").forEach((n=>{t(J,n)})),fn+=1,c(s("#level"),`Level: ${fn}`),(e=>{const i=o("div");r(i,["level","shader"]),i.id=e,u(i,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),tn=[],l(".enemy").forEach((n=>{t(G,n)})),ln=[],l(".effect").forEach((n=>{t(J,n)})),"level-1"===e?(n(i,pn(0,200,300,150)),n(i,pn(200,350,440,150)),en("gunner_drone",70,450),en("gunner_drone",100,50)):"level-2"===e?(n(i,pn(400,200,240,100)),n(i,pn(300,200,100,300)),n(i,pn(100,500,300,50)),n(i,pn(0,550,150,50))):"level-3"===e?(n(i,pn(140,550,500,50)),n(i,pn(140,320,50,230)),n(i,pn(140,270,320,50)),n(i,pn(410,220,50,50)),n(i,pn(0,170,460,50))):"level-4"===e?(n(i,pn(360,170,280,100)),n(i,pn(220,270,200,50)),n(i,pn(100,320,170,50)),n(i,pn(0,370,160,50)),cn("wind",20,100,0)):"level-5"===e?(n(i,pn(480,370,160,50)),n(i,pn(430,230,50,360)),n(i,pn(317,180,233,50)),n(i,pn(550,78,50,152)),n(i,pn(100,478,50,112)),n(i,pn(267,275,50,203)),n(i,pn(188,78,50,111)),n(i,pn(138,134,50,141)),n(i,pn(100,28,500,50)),n(i,pn(100,590,380,50)),n(i,pn(100,428,167,50)),n(i,pn(0,275,267,50)),cn("wind",20,100,90)):"level-6"===e&&(n(i,pn(373,275,267,50)),n(i,pn(373,325,50,315))),"level-10"!==e&&n(i,un(":)")),n(J,i)})(`level-${fn}`),mn.includes(fn)?dn("dark-shader"):dn("light-shader"),10===fn&&(fn=0)},xn=()=>{let n=g(q,H);if(n&&(n=>{const t=A(q,200);((n,t,e)=>{const o=on[n],r=t-o.size/2,i=e-o.size/2,a=r-o.x,s=i-o.y,l=Math.sqrt(a*a+s*s),c=a/l*o.speed,d=s/l*o.speed,p=o.x+c-o.size/2,u=o.y+d-o.size/2,f=(on[n].size,((n,t)=>{if(n>0&&t>0&&n<=640&&t<=640){const e=Math.floor(n/64),o=Math.floor(t/64);X[e][o]}})(p,u),p>640-o.size/2||p<0-o.size/2||u>640-o.size/2||u<0-o.size/2);if(l>o.speed&&!f){on[n].x=p+o.size/2,on[n].y=u+o.size/2,an(n,p,u);let t=Math.atan(-d/c);c<0&&(-d<0?t-=Math.PI:t+=Math.PI),t*=180/Math.PI;let e="left";t>=22.5&&t<=67.5?e="upright":t>=67.5&&t<=112.5?e="up":t>=112.5&&t<=157.5?e="upleft":t<=22.5&&t>=-22.5?e="right":t<=-22.5&&t>=-67.5?e="downright":t<=-67.5&&t>=-112.5?e="down":t<=-112.5&&t>=-157.5?e="downleft":t>=157.5&&t<=-157.5&&(e="left")}})(0,t.x,t.y)})(),l(".pathblock").forEach((t=>{g(t,H)&&(n=!0)})),g(s(".endblock"),H)){if(0===fn)m(H,600,420,64),on[0].x=600,on[0].y=420;else{const n=A(H,64);m(H,n.x+580,n.y,64),on[0].x=n.x+580,on[0].y=n.y}vn()}},yn=(n,t)=>{const e=Math.floor(t.x/64),o=Math.floor(t.y/64);let r=X[e][o];r++,20==r&&(r=0),((n,t,e)=>{X[n][t]=e})(e,o,r)},Cn=1e3/30;let wn=window.performance.now();const Bn=(n,t,e)=>{const a=o("canvas");r(a,["game-canvas",`layer-${e}`]),f(a,["width","height"],[`${n}px`,`${t}px`]),u(a,"\n        position:absolute;\n    ");const s=a.getContext("2d");return(n=>{d(n,"click",(t=>{n.getContext("2d");const e=function(n,t){const e=n.getBoundingClientRect();return{x:t.clientX-e.left,y:t.clientY-e.top}}(n,t);i(n,"layer-1")&&yn(0,e)}))})(a),0===e&&((n,t,e)=>{X=new Array(10).fill(0).map((()=>new Array(10).fill(10))),X[2][1]=11,X[9][9]=18,X[9][8]=18,X[8][8]=19,X[8][9]=19,console.log(X),Y(n)})(s),a};let kn=-1;const In=n=>{"slider1"===n.target.id?s(".layer-1").style.left=`${n.target.value}px`:"slider2"===n.target.id&&(s(".button-overlay").style.left=`${n.target.value}px`)},En=e.p+"89d1863fe0155e15b8ec.png";let $n=20;const Mn=t=>{let e,r;null===s(".healthbar")?(e=$n,r=t):"number"==typeof t&&(e=t,$n=e,r=s(".healthbar"),r.textContent="");for(let t=0;t<e;t++){const e=20-t,i=350,a=470,s=Math.floor(e/20*(a-i)+i),l=o("div");l.id=`heart-${e}`,u(l,`\n            height:28px;\n            width: 28px;\n            margin: 2px;\n            background-color: hsl(${s}, 70%, 62%);\n        `),n(r,l)}};let _n=[];function zn(e,i,l,g){this.name=e,this.index=g,this.img=i,this.imgsrc=l,this.currentFrame=0,this.canvele,this.imgele,this.init=()=>{const n=this.index;this.addedleft=64*_n.length,this.size;const t=this.name,e=o("canvas");r(e,["mini-canvas",`${t}`]),f(e,["width","height"],["64px","64px"]),u(e,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const i=e.getContext("2d"),a=this.img;i.imageSmoothingEnabled=!1,a.onload=function(){i.clearRect(0,0,64,64),i.drawImage(a,16*n,0,16,16,0,0,64,64)},this.canvele=e,this.ctx=i;const s=o("canvas");r(s,["canvas-icon"]),f(s,["width","height","id"],["64px","64px",t]),u(s,"\n\n        ");const l=s.getContext("2d");return l.imageSmoothingEnabled=!1,a.onload=function(){l.clearRect(0,0,64,64),l.drawImage(a,16*n,0,16,16,0,0,64,64)},s.dataset.imgsrc=this.imgsrc,s.dataset.index=n,this.imgele=s,this.initMouse(e,s),s},this.initMouse=(l,g)=>{const A=l.getContext("2d");let b;const v=G;let x,y=[],C=this.size,w=(this.currentFrame,this.index);const B=n=>{0===y.length&&y.push(setInterval((()=>{"Magnet_Drone"===e&&m(q,x.x,x.y,200)}),100))},k=n=>{n.preventDefault(),x=h(n,v),b=h(n,document.body),m(l,b.x,b.y,64)};d(g,"mousedown",(t=>{t.preventDefault(),l.style.top="-1000px",l.style.left="-1000px",n(document.body,l),d(document.body,"mousemove",k),d(v,"mouseenter",B),A.clearRect(0,0,64,64),A.drawImage(i,16*w,0,16,16,0,0,64,64),"Magnet_Drone"===e&&(()=>{const t=o("div");t.id="magnet_hitbox",u(t,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        background-color:rgba(255,255,255, 0.5);\n        z-index: 5;\n    "),q=t,n(s(".wrapper"),t)})()})),d(document.body,"mouseup",(n=>{p(document.body,"mousemove",k),p(v,"mouseenter",B),y.length,clearInterval(y[0]),y=[],null!=s(`.mini-canvas.${this.name}`)&&t(document.body,l),A.clearRect(0,0,C,C),"Magnet_Drone"===e&&null!==q&&t(G,q)})),d(g,"mouseenter",(t=>{((t,e)=>{const i=e.cloneNode(!1);i.id="infoPic",a(i,["canvas-icon"]),f(i,["width","height"],["64px","64px"]),u(i,"\n        padding-left: 5px;\n        padding-top: 10px;\n    ");const l=i.getContext("2d");l.imageSmoothingEnabled=!1;const d=new Image;d.src=i.dataset.imgsrc;const p=i.dataset.index;d.onload=function(){l.clearRect(0,0,64,64),l.drawImage(d,16*p,0,16,16,0,0,64,64)};const m=s(".infoTop");m.textContent="";const h=o("div");r(h,["infoTitle"]);let g=t.replace("_"," ");g=g.replace("_"," "),c(h,g),u(h,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n    ");const A=o("div");r(A,["infoText"]),u(A,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 15px;\n        white-space: pre;\n    "),c(A,gn[p]),n(m,h),n(m,i),n(m,A)})(t.target.id,t.target)}))}}const Sn=o("div");r(Sn,["game"]),n(document.body,Sn),u(Sn,"\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n    position:relative;\n    width:100%;\n    left: -100px;\n"),n(Sn,(()=>{u(document.body,`\n        background-color: #242424;\n        background-image: url("${D}");\n        background-size: 70px;\n        background-repeat: repeat;\n    `);const t=(()=>{const t=o("div");return r(t,["wrapper"]),u(t,"\n        position:relative;\n        border: 5px solid darkslategray;\n        width:640px;\n        height:640px;\n    "),n(document.body,t),G=t,t})(),e=Bn(640,640,0),i=Bn(640,640,1);n(t,e),n(t,i),(n=>{rn(n,"package_drone",32,V,100,300,5,!0,1)})(t),(t=>{const e=o("div");r(e,["shadwrap"]),u(e,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),n(t,e),n(e,un("start")),J=e})(t),console.log("commencing"),function(n,t,e){const o=()=>{window.requestAnimationFrame(o);const t=window.performance.now(),e=t-wn;e<Cn||(wn=t-e%Cn,n.map(((n,t)=>{const e=n.getContext("2d");0===t&&Y(e)})),xn())};o()}([e,i]);const a=(An=o("div"),r(An,["button-overlay"]),u(An,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(t=>{n(t,bn("changebg",8,vn,16,16))})(An),An);return n(t,a),t})()),n(Sn,(()=>{const t=(()=>{const t=o("div");return r(t,["mini-wrapper"]),u(t,"\n        position:relative;\n        background-color: #000000;\n        border: 5px solid darkslategray;\n        width: 640px;\n        display:flex;\n        justify-content: space-around;\n        height:64px;\n        align-items:center;\n        margin-top: 10px;\n    "),n(document.body,t),t})();return e=t,hn.map((t=>n(e,(n=>{const t=new Image;t.src=En;const e=new zn(n,t,En,_n.length),o=e.init();return _n.push(e),o})(t)))),(()=>{const t=o("div");r(t,["infoScreen"]),u(t,"\n        width: 250px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: 650px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n    "),n(t,(()=>{const n=o("div");return r(n,["infoTop"]),u(n,"\n        padding: 5px;\n    "),n})()),n(t,(()=>{const n=o("div");return r(n,["infoBottom"]),n})()),n(G,(()=>{const t=o("div");r(t,["healthbar"]),u(t,"\n        width: 32px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: -52px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n        display:flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    "),Mn(t);const e=o("div");return u(e,`\n        position:absolute;\n        width: 16px;\n        height: 16px;\n        background: url(${En}) -144px 0px;\n        scale: 300%;\n        image-rendering: pixelated;\n        left: 8px;\n        z-index: 5;\n        transform: translate(0, 3px);\n    `),n(t,e),t})()),n(G,t)})(),U(L,"click"),U(P,"close"),U(j,"coin"),U(N,"epic"),U(O,"swipe"),U(Z,"open"),t;var e})()),n(Sn,(()=>{const t=(()=>{const t=o("div");r(t,["debug-wrapper"]),u(t,"\n        position:relative;\n    ");const e=o("input");e.id="slider1",d(e,"input",In),f(e,["type","min","max","value","class"],["range","0","640","0","slidey"]),n(t,e);const i=o("input");i.id="slider2",d(i,"input",In),f(i,["type","min","max","value","class"],["range","0","640","0","slidey"]),n(t,i);const a=o("h1");a.id="score",u(a,"\n        color:white;\n        font-family: munro;\n    ");const l=o("h1");return l.id="level",u(l,"\n        color:white;\n        font-family:munro;\n    "),c(l,"Level: 0"),((n="bruh")=>{kn+=1,c("bruh"===n?s("#score"):n,`Score: ${kn}`)})(a),n(t,a),n(t,l),t})();return n(document.body,t),t})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,