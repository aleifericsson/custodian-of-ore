(()=>{"use strict";var n={320:(n,e,t)=>{t.d(e,{Z:()=>l});var o=t(537),i=t.n(o),r=t(645),a=t.n(r)()(i());a.push([n.id,".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}\n\n.opaque{\n    color: rgba(255,255,255,1);\n}\n\n.not-opaque{\n    opacity: 0;\n}","",{version:3,sources:["webpack://./src/css/animations.css"],names:[],mappings:"AAAA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,UAAU;AACd",sourcesContent:[".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}\n\n.opaque{\n    color: rgba(255,255,255,1);\n}\n\n.not-opaque{\n    opacity: 0;\n}"],sourceRoot:""}]);const l=a},414:(n,e,t)=>{t.d(e,{Z:()=>u});var o=t(537),i=t.n(o),r=t(645),a=t.n(r),l=t(667),s=t.n(l),d=new URL(t(542),t.b),c=a()(i()),p=s()(d);c.push([n.id,`html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(${p}) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */`,"",{version:3,sources:["webpack://./src/css/fonts.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;IACI,oBAAoB;IACpB,+DAA+C;EACjD;;EAEA;;;;;;;;;;GAUC",sourcesContent:["html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(../fonts/munro.ttf) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */"],sourceRoot:""}]);const u=c},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,i,r){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var d=0;d<n.length;d++){var c=[].concat(n[d]);o&&a[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),e.push(c))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(i," */");return[e].concat([r]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var r={},a=[],l=0;l<n.length;l++){var s=n[l],d=o.base?s[0]+o.base:s[0],c=r[d]||0,p="".concat(d," ").concat(c);r[d]=c+1;var u=t(p),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)e[u].references++,e[u].updater(h);else{var g=i(h,o);o.byIndex=l,e.splice(l,0,{identifier:p,updater:g,references:1})}a.push(p)}return a}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var r=o(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<r.length;a++){var l=t(r[a]);e[l].references--}for(var s=o(n,i),d=0;d<r.length;d++){var c=t(r[d]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}r=s}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,i&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},542:(n,e,t)=>{n.exports=t.p+"f78662ff4aad4d038806.ttf"}},e={};function t(o){var i=e[o];if(void 0!==i)return i.exports;var r=e[o]={id:o,exports:{}};return n[o](r,r.exports,t),r.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var o=e.getElementsByTagName("script");if(o.length)for(var i=o.length-1;i>-1&&!n;)n=o[i--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{const n=(n,e)=>{n.appendChild(e)},e=(n,e)=>{e.parentNode===n&&n.removeChild(e)},o=n=>document.createElement(n),i=(n,e)=>{e.forEach((e=>{n.classList.add(e)}))},r=(n,e)=>n.classList.contains(e),a=(n,e)=>{e.forEach((e=>{n.classList.remove(e)}))},l=n=>document.querySelector(n),s=n=>document.querySelectorAll(n),d=(n,e)=>{n.textContent=e},c=(n,e,t)=>{n.addEventListener(e,t)},p=(n,e,t)=>{n.removeEventListener(e,t)},u=(n,e)=>{n.style.cssText=e},h=(n,e,t)=>{e.map(((e,o)=>{n.setAttribute(e,t[o])}))},g=(n,e,t,o)=>{n.style.top=t-o/2+"px",n.style.left=e-o/2+"px"},m=(n,e)=>{const t=e.getBoundingClientRect();return{x:n.clientX-t.left,y:n.clientY-t.top}},f=(n,e)=>{if(null===n||null===e)return!1;const t=n.getBoundingClientRect(),o=e.getBoundingClientRect();return!(t.right-15<o.left+15||t.left+15>o.right-15||t.bottom-15<o.top+15||t.top+15>o.bottom-15)},x=(n,e)=>{if(null===n||null===e)return!1;const t=n.getBoundingClientRect(),o=e.getBoundingClientRect();return!(t.right<o.left||t.left>o.right||t.bottom<o.top||t.top>o.bottom)},b=(n,e)=>{const t=n.style.left,o=n.style.top;let i,r;return"none"===e?(i=Number(t.substring(0,t.length-2)),r=Number(o.substring(0,o.length-2))):(i=Number(t.substring(0,t.length-2))+e/2,r=Number(o.substring(0,o.length-2))+e/2),{x:i,y:r}};var y=t(379),v=t.n(y),A=t(795),w=t.n(A),_=t(569),M=t.n(_),k=t(565),C=t.n(k),I=t(216),B=t.n(I),T=t(589),D=t.n(T),E=t(320),$={};$.styleTagTransform=D(),$.setAttributes=C(),$.insert=M().bind(null,"head"),$.domAPI=w(),$.insertStyleElement=B(),v()(E.Z,$),E.Z&&E.Z.locals&&E.Z.locals;var z=t(414),S={};S.styleTagTransform=D(),S.setAttributes=C(),S.insert=M().bind(null,"head"),S.domAPI=w(),S.insertStyleElement=B(),v()(z.Z,S),z.Z&&z.Z.locals&&z.Z.locals;const P=t.p+"e81fdca74d3f5b1809d3.png";t.p,t.p;let R=null,F=null,L=null,j=null,N=null,O=null,q=null;const H=t.p+"5684f2b604c331435607.png",U=[[0,0,0,0,6,7,0,0,0,0],[0,0,5,0,6,8,10,0,0,0],[0,0,0,0,6,7,10,0,0,0],[0,0,0,0,6,7,10,0,0,0],[0,0,0,0,6,8,10,0,0,0],[0,0,0,0,6,7,10,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0]],W=[[0,0,0,0,0,0,0,2,6,0],[0,0,0,0,0,0,0,2,6,0],[0,0,0,0,0,5,0,2,6,0],[0,0,0,0,0,0,0,2,6,0],[0,0,0,0,0,0,0,2,6,0],[0,0,5,0,0,0,0,2,6,0],[0,0,0,0,0,0,0,2,6,0],[0,0,0,0,0,0,0,2,6,0],[0,0,0,0,0,0,0,2,6,0],[0,0,0,0,0,0,0,2,6,0]],Z=[[7,4,10,0,0,0,0,0,0,0],[7,4,10,0,0,0,0,0,0,0],[7,4,10,0,0,0,0,0,0,0],[7,4,10,0,0,0,0,0,0,0],[7,4,10,0,0,0,0,0,0,0],[7,4,10,0,0,0,0,0,0,0],[7,4,10,0,0,0,0,0,0,0],[7,4,10,0,0,0,0,0,5,0],[7,4,10,0,0,0,0,0,0,0],[7,4,10,0,0,0,0,0,0,0]],G=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,5,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,5,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,5,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],Y=[[[0,0,0,0,6,8,0,0,0,0],[0,0,0,0,6,8,0,11,0,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,10,0,0,0],[0,0,0,0,6,7,10,0,0,0],[0,0,0,0,6,7,10,0,5,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,5,0,0,6,9,0,0,0,0],[0,0,0,0,6,9,0,0,0,0]],U,W,Z,G,[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,5,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,5,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,5,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],Z,W,U,G,[[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,8,0,0,5,0],[0,0,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0],[0,5,0,0,6,7,0,0,0,0],[0,0,0,0,6,7,0,0,0,0]]];let J;const K=(n,e)=>{J=n,J.forEach(((n,t)=>{n.forEach(((n,o)=>{Q(n,t,o,e)}))}))},Q=(n,e,t,o)=>{let i=new Image;i.src=H,i.onload=function(){o.imageSmoothingEnabled=!1,o.drawImage(i,32*n,0,32,32,64*e,64*t,64,64)}},X=t.p+"34d9a99d3f3e7de647ab.png",V=t.p+"bd6b270a5746a2e9b4ff.png",nn=t.p+"3d5d3708ee783e84e3da.png",en=t.p+"8a4cc9c73d3e00071e47.png";let tn=0;const on=[4,5,8,9,10];let rn=[350,450,250,560,200,390,290];const an=["down","left","up","right","none"],ln=["Magnet_Drone","Force-field_Drone","Lightning_Rod_Drone","Air_Strike","Machine_Gun","Drone_GPS_Hack","Recall_Drones","Repair_Package_Drone"],sn=["\nAttracts the package drone and\nmissiles towards it.\n\n- Placeable, redrag from toolbar\nto replace. \n- Only one on the field at a time.\n\n- Cooldown: none\n","\nDestroys bullets and missiles, but\ncan be taken down by attack drones\n\n- Placeable, redrag from toolbar\nto replace. \n- Only one on the field at a time.\n\n- Depletes power in 10 seconds\n- Cooldown: 15 seconds\n","\nAbsorbs lightning in a small radius\n\n- Placeable, redrag from toolbar\nto replace. \n- Only one on the field at a time.\n\n- Depletes power in 10 seconds\n- Cooldown: 15 seconds\n","\nCall a missile to any point on the field.\n\n- Ammo: 1 missile\n- Damage: high\n- Cooldown: 3 seconds\n","\nFires shots at any point on the field,\nruns out of ammo after 20 bullets.\nCan destroy missiles and drones.\n\n- Ammo: 20 bullets\n- Firerate: 4 bullets per second\n- Cooldown: 10 seconds\n","\nLocks position of all drones temporarily,\nmissiles lose heat-seeking function.\n\n\n-Press to activate\n- Duration: 10 seconds\n- Cooldown: 20 seconds\n","\nRemoves the magnet drone, force-field\ndrone and lightning-rod drone if they\nare placed on the field.\n\n-Press to activate\n- Cooldown: none\n","\nWhen held near package drone, \nrestores 3 health every 3 seconds.\n\n- Cooldown: 10 seconds\n","\nHas Dio's special package,\nget it to his house somewhere west.\n\nDrag the magnet drone near it to move it.\n","\nShoots low damage burst shots\nin 4 diagonal directions.\n","\nFires high-damage heat-seeking missiles.\n","\nWill try to ram into you and cut you\nwith its saws. Deals high damage over\ntime.\n","\nThe boss. Can spawn attack drones\nand even summon lightning somehow.\n"],dn=t.p+"253f6d096c5e70f2592b.png",cn=t.p+"40bead41f130d5bf6de7.png",pn=t.p+"99abed76b1b33034fd39.png",un=t.p+"e17a9544f3d78de0605e.png",hn=t.p+"3331e3f5214631b75c3d.png",gn=e=>{const t=o("div");let r;i(t,["shader"]),t.id=e,"light-shader"===e?r="\n            background-image: linear-gradient(135deg, rgba(227, 245, 66, 0.3), rgba(230, 201, 147, 0.1));\n        ":"dark-shader"===e&&(r="\n            background-image: linear-gradient(135deg, rgba(54, 88, 163, 0.3), rgba(90, 76, 115, 0.6));\n        "),u(t,`\n        height:640px;\n        width: 640px;\n        position: absolute;\n        z-index: 5;\n        ${r}\n    `),n(j,t)},mn=(n,e,t,r)=>{const a=o("div");return i(a,["pathblock"]),u(a,`\n        background-color: rgba(245, 66, 66, 0.3);\n        left: ${n}px;\n        top: ${e}px;\n        height: ${r}px;\n        width: ${t}px;\n        position:absolute;\n    `),a},fn=()=>{s(".pathblock").forEach((n=>{e(j,n)}))};let xn=[],bn=20,yn=!1,vn=30;function An(t,r,a,s){this.name=t,this.index=s,this.img=r,this.imgsrc=a,this.currentFrame=0,this.canvele,this.imgele,this.backele,this.lock=null,this.init=()=>{const e=this.index;this.addedleft=64*xn.length,this.size;const t=this.name,r=o("canvas");i(r,["mini-canvas",`${t}`]),h(r,["width","height"],["64px","64px"]),u(r,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const a=r.getContext("2d"),l=this.img;a.imageSmoothingEnabled=!1,l.onload=function(){a.clearRect(0,0,64,64),a.drawImage(l,16*e,0,16,16,0,0,64,64)},this.canvele=r,this.ctx=a;const s=o("canvas");i(s,["canvas-icon"]),h(s,["width","height","id"],["64px","64px",t]),u(s,"\n        ");const d=o("div");i(d,["backele",t]),u(d,"\n            width: 64px;\n            height: 64px;\n            position:relative;\n        ");const c=s.getContext("2d");return c.imageSmoothingEnabled=!1,l.onload=function(){c.clearRect(0,0,64,64),c.drawImage(l,16*e,0,16,16,0,0,64,64)},s.dataset.imgsrc=this.imgsrc,s.dataset.index=e,this.imgele=s,this.initMouse(r,s),n(d,s),this.backele=d,d},this.cooldown=r=>{const a=this.backele,l=o("div");i(l,["lock",t]),u(l,`\n            width: 16px;\n            height: 16px;\n            scale: 4;\n            top: 24px;\n            left: 24px;\n            image-rendering: pixelated;\n            position:absolute;\n            background: url(${dn}) -144px 0px;\n        `),n(a,l),this.lock=l,setTimeout((()=>{e(a,l),this.lock=null}),r)},this.initMouse=(i,a)=>{const s=i.getContext("2d");let d;const h=F;let f,x=[],b=this.size,y=(this.currentFrame,this.index),v=!1;const A=n=>{v=!0,0===x.length&&("Machine_Gun"===t?(bn=20,x.push(setInterval((()=>{0===bn?clearInterval(x[0]):(bn-=1,Fn("good_hit",f.x-24,f.y-24,90*Math.floor(4*Math.random())))}),250))):"Magnet_Drone"===t?x.push(setInterval((()=>{!1===ye&&g(R,f.x,f.y,200)}),100)):"Lightning_Rod_Drone"===t?x.push(setInterval((()=>{g(O,f.x,f.y,200)}),100)):"Repair_Package_Drone"===t&&x.push(setInterval((()=>{g(N,f.x,f.y,200),0===vn?(vn=30,Le(Se+3)):vn-=1}),100)))},w=n=>{n.preventDefault(),f=m(n,h),d=m(n,document.body),g(i,d.x,d.y,64)};c(a,"mousedown",(a=>{a.preventDefault(),!1===ye&&(i.style.top="-1000px",i.style.left="-1000px",n(document.body,i),c(document.body,"mousemove",w),c(h,"mouseenter",A),s.clearRect(0,0,64,64),s.drawImage(r,16*y,0,16,16,0,0,64,64),"Magnet_Drone"===t?(null!==R&&(e(F,R),R=null),(()=>{const e=o("div");e.id="magnet_hitbox",u(e,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        z-index: 5;\n        pointer-events: none;\n    "),R=e,n(l(".wrapper"),e)})()):("Force-field_Drone"===t&&this.cooldown(15e3),"Lightning_Rod_Drone"===t&&(this.cooldown(15e3),(()=>{const e=o("div");e.id="lr_hitbox",u(e,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        z-index: 5;\n        pointer-events: none;\n    "),O=e,n(l(".wrapper"),e)})()),"Air_Strike"===t&&(_n=!0,fn(),this.cooldown(3e3)),"Machine_Gun"===t&&(this.cooldown(1e4),_n=!0,fn()),"Drone_GPS_Hack"===t&&(this.cooldown(2e4),yn=!0,setTimeout((()=>{yn=!1}),1e4)),"Repair_Package_Drone"===t&&((()=>{const e=o("div");e.id="heal_hitbox",u(e,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        z-index: 5;\n        pointer-events: none;\n    "),N=e,n(l(".wrapper"),e)})(),this.cooldown(1e4)),"Recall_Drones"===t&&(null!==He[1]&&Je(1),null!==He[2]&&Je(2),null!==He[3]&&Je(3))),["Magnet_Drone","Lightning_Rod_Drone","Force-field_Drone"].includes(this.name)&&null!==He[Ge(this.name)]&&Je(Ge(this.name)))})),c(document.body,"mouseup",(n=>{p(document.body,"mousemove",w),p(h,"mouseenter",A);let o=m(n,h);if(!0===v){if("Air_Strike"===this.name&&Fn("good_missile",o.x,o.y,0),["Magnet_Drone","Lightning_Rod_Drone","Force-field_Drone"].includes(this.name)){const n=o.x-40,i=o.y-40,r=4;if(n<576&&n>0&&i<576&&i>0)if(Xe(t,n,i),"Force-field_Drone"===t){const e=n-10,t=i-10;Fn("force_field",e+32+r/2,t-r,90),Fn("force_field",e-r,t+32+r/2,0),Fn("force_field",e+32+r/2,t+64+r,90),Fn("force_field",e+64+r,t+32+r/2,0),setTimeout((()=>{Je(3)}),1e4)}else"Lightning_Rod_Drone"===t&&setTimeout((()=>{Je(2),e(F,O),O=null}),1e4)}"Repair_Package_Drone"===t&&null!==N&&(e(F,N),R=null),v=!1}clearInterval(x[0]),x=[],null!=l(`.mini-canvas.${this.name}`)&&e(document.body,i),s.clearRect(0,0,b,b)})),c(a,"mouseenter",(n=>{Oe(n.target.id,n.target)}))}}let wn=[],_n=!1;const Mn=(n,e,t)=>{let o,r,a,l=5;"gunner_drone"===n&&(o=pn,r=125),"missile_drone"===n&&(o=un,r=250),"attack_drone"===n&&(o=hn,r=6,l=2),"none"===o?a="none":(a=new Image,a.src=o);let s=Math.floor(Math.random()*r*.5),d=360*Math.random();const c=We(F,n,32,o,e,t,5,!0,6);i(c,["enemy"]),wn.push({ele:c,type:n,x:e,y:t,img:a,fireevery:r,firetimer:s,timeout:null,size:64,moving:!1,moveTimer:10,speed:l,rot:d,direction_data:{none:0},draw_index:0,frame:0,show:!0,frames:6,updates_per_frames:4,timer:1,hp:5})},kn=()=>{wn.map((n=>{!0===_n&&(Bn(n),In(n),Cn(n)),Ke(n,"increment","none")}))},Cn=n=>{null!==Pn&&x(n.ele,Pn.ele)&&(Fn("hit",Pn.x,Pn.y,90*Math.floor(4*Math.random())),qn(Pn),Pn=null,n.hp=n.hp-1,0===n.hp&&(Fn("explosion",n.x+16,n.y+16,90*Math.floor(4*Math.random())),Dn(n))),"attack_drone"===n.type&&null!==He[3]&&f(n.ele,He[3].ele)&&(Fn("explosion",He[3].x+16,He[3].y+16,90*Math.floor(4*Math.random())),Je(3))},In=n=>{yn||(!0===n.moving&&(0===n.moveTimer?(n.moveTimer=10,n.moving=!1,n.rot=360*Math.random()):(n.moveTimer=n.moveTimer-1,Tn(n,n.rot))),"attack_drone"===n.type&&Tn(n,Nn(n.x,n.y,L)+180))},Bn=n=>{if(null!==Sn&&x(Sn,n.ele)&&Dn(n),0===n.firetimer){n.firetimer=n.fireevery;const e=n.x+32,t=n.y+32;"gunner_drone"===n.type&&(En(e,t),setTimeout((()=>{En(e,t)}),200),setTimeout((()=>{En(e,t)}),400),setTimeout((()=>{n.moving=!0}),1e3)),"missile_drone"===n.type&&(Fn("missile",e,t,180),setTimeout((()=>{n.moving=!0}),1e3)),"attack_drone"===n.type&&et%2==0&&x(n.ele,L)&&Le(Se-1)}else n.firetimer=n.firetimer-1},Tn=(n,e)=>{const t=n.x,o=n.y,i=e+90,r=n.speed*Math.cos(i*(Math.PI/180)),a=n.speed*Math.sin(i*(Math.PI/180)),l=t+r-n.size/2,s=o+a-n.size/2;let d=!0;l<576&&l>0&&s<576&&s>0&&(d=!1),d||(n.x=l+n.size/2,n.y=s+n.size/2,n.ele.style.left=`${n.x}px`,n.ele.style.top=`${n.y}px`)},Dn=n=>{e(F,n.ele),p(n.ele,"mouseenter",Ze),wn=wn.filter((function(e){return e!==n}))},En=(n,e)=>{Fn("bullet",n,e,45),Fn("bullet",n,e,135),Fn("bullet",n,e,225),Fn("bullet",n,e,315)},$n=()=>{wn=[],s(".enemy").forEach((n=>{e(F,n),p(n,"mouseenter",Ze)}))};let zn=[],Sn=null,Pn=null,Rn=[];const Fn=(e,t,r,a)=>{const l=o("div");let s,d,c,p=r,h=0,g=1,m="none";"wind"===e?(s=9,d=100,h=1,c=2):"bullet"===e?(s=1,d="none",h=10,c=2):"hit"===e?(s=2,d=10,c=2):"lightning_warning"===e?(s=10,d=20,c=4,g=.5):"lightning_strike"===e?(s=4,d=7,h=0,c=4):"lightning_bolt"===e?(s=3,d=7,c=4):"missile"===e?(s=0,d="none",h=12,c=2):"explosion"===e?(s=7,d=10,c=2):"good_missile"===e?(s=0,d="none",h=15,c=2,m=r,p=0):"good_explosion"===e?(s=7,d=10,c=4):"good_hit"===e?(s=2,d=10,c=4):"force_field"===e&&(s=12,c=4,d="none"),i(l,["effect",e]),u(l,`\n        scale: ${c};\n        top: ${r}px;\n        left: ${t}px;\n        height: 16px;\n        width: 16px;\n        background: url(${cn}) -${16*s}px 0;\n        position:absolute;\n        image-rendering: pixelated;\n        transform: rotate(${a}deg);\n        opacity: ${g};\n    `);const f={type:e,x:t,y:p,speed:h,fadein:d,rot:a,ele:l,size:16,final_y:m};zn.push(f),"good_explosion"===e&&(Sn=l),"good_hit"===e&&(null!=Pn&&(qn(Pn),Pn=null),Pn=f),"force_field"===e&&Rn.push(l),n(j,l)},Ln=()=>{zn=[],s(".effect").forEach((n=>{e(j,n)}))},jn=n=>{const e=n.x,t=n.y,o=n.rot+90,i=n.speed*Math.cos(o*(Math.PI/180)),r=n.speed*Math.sin(o*(Math.PI/180)),a=e+i-n.size/2,l=t+r-n.size/2;let d=!1;s(".edge").forEach((e=>{x(e,n.ele)&&(d=!0)})),d?qn(n):(n.x=a+n.size/2,n.y=l+n.size/2,n.ele.style.left=`${n.x}px`,n.ele.style.top=`${n.y}px`)},Nn=(n,e,t)=>{const o=b(t,64),i=o.x-n,r=o.y-e;let a=Math.atan(-r/i);return i<0&&(-r<0?a-=Math.PI:a+=Math.PI),a*=180/Math.PI,a-=90,a=-a,a<=-180&&(a+=360),a},On=()=>{zn.map((n=>{if(["bullet","wind","good_missile"].includes(n.type))jn(n);else if("missile"===n.type){let e;if(!yn){x(R,n.ele),e=Nn(n.x,n.y,L);let t=((n,e)=>{let t=e-n;return t<=-180&&(t+=360),t>180&&(t-=360),t>0?-1:t<0?1:0})(n.rot,e);1===t?n.rot=n.rot+3:-1===t&&(n.rot=n.rot-3),n.rot>180&&(n.rot=n.rot-360),n.ele.style.transform=`rotate(${n.rot}deg)`}Rn.map((e=>{f(n.ele,e)&&qn(n)})),jn(n)}if((n=>{if(0===n.fadein){if("lightning_warning"===n.type)if(x(n.ele,O))if(null===He[2]){const n=b(O,200);let e=Math.floor((n.y-64)/64);for(let t=0;t<e+1;t++)Fn("lightning_bolt",n.x,n.y-64-64*t,0)}else{const n=b(He[2].ele,64);let e=Math.floor((n.y-64)/64);for(let t=0;t<e+1;t++)Fn("lightning_bolt",n.x,n.y-64-64*t,0)}else{Fn("lightning_strike",n.x,n.y,90*Math.floor(4*Math.random()));let e=(n.y-24)/64;for(let t=0;t<e+1;t++)Fn("lightning_bolt",n.x,n.y-64*t,0)}else"good_explosion"===n.type?Sn=null:"lightning_strike"===n.type&&10===tn&&0===Zn&&null===Wn&&ge();qn(n)}else"none"!==n.fadein?(n.fadein=n.fadein-1,"lightning_warning"===n.type&&(n.fadein%4==0||n.fadein%4==1?n.ele.style.background=`url(${cn}) -176px 0`:n.ele.style.background=`url(${cn}) -160px 0`)):"good_missile"===n.type?n.y>=n.final_y&&(Fn("good_explosion",n.x,n.y,90*Math.floor(4*Math.random())),qn(n)):"force_field"===n.type&&(null===He[3]&&(qn(n),Rn=[]),n.ele.style.background=et%8<4?`url(${cn}) -208px 0`:`url(${cn}) -192px 0`)})(n),!0===_n){if("bullet"===n.type){if(f(n.ele,L)){Le(Se-1);let e=0,t=0;45===n.rot?(e=16,t=-16):135===n.rot?(e=16,t=16):225===n.rot?(e=-16,t=16):315===n.rot&&(e=-16,t=-16);let o=b(L,64);Fn("hit",o.x+e,o.y+t,360*Math.random()),qn(n)}Rn.map((e=>{f(n.ele,e)&&qn(n)}))}if("lightning_strike"===n.type&&f(n.ele,L)&&(Le(Se-3),qn(n)),"missile"===n.type){if(f(n.ele,L)){Le(Se-3);let e=b(L,64);Fn("explosion",e.x,e.y,360*Math.random()),qn(n)}if(null!==He[1])if(f(n.ele,He[1].ele)){let t=b(R,64);Fn("explosion",t.x+64,t.y+64,360*Math.random()),qn(n),Je(1),null!==R&&e(F,R)}else null!==Pn&&f(Pn.ele,n.ele)&&qn(n)}}}))},qn=n=>{e(j,n.ele),zn=zn.filter((function(e){return e!==n}))},Hn=n=>{let e,t;if("random"===n){let n=Math.floor(4*Math.random());e=an[n]}else{if("none"===n){if(21===Math.floor(100*Math.random())){const n=64*Math.floor(10*Math.random())+24,e=64*Math.floor(10*Math.random())+24;Fn("lightning_warning",n,e,0)}return}e=n}if("down"===e?(Ye(0,He[0].x,640,!0),t=0):"right"===e?(Ye(0,640,He[0].y,!0),t=270):"up"===e?(Ye(0,He[0].x,0,!0),t=180):"left"===e&&(Ye(0,0,He[0].y,!0),t=90),!(21===Math.floor(22*Math.random())&&Fn("wind",640*Math.random(),640*Math.random(),t),8!==tn&&9!==tn&&10!==tn||21!==Math.floor(100*Math.random()))){const n=64*Math.floor(10*Math.random())+24,e=64*Math.floor(10*Math.random())+24;Fn("lightning_warning",n,e,0)}},Un=t.p+"84225ec5d1329e2c7ddb.png";let Wn=null,Zn=0,Gn=null,Yn=null,Jn=["fire","missile","drones","evade","lightning"];const Kn=[{x:86,y:35},{x:98,y:46},{x:106,y:56}],Qn=[{x:73,y:73},{x:90,y:90}],Xn=[{x:86,y:60},{x:78,y:50},{x:93,y:67}];let Vn="none",ne=!1,ee=25,te=200;const oe=()=>{null!==Pn&&null!==Wn&&f(Wn,Pn.ele)&&(Fn("hit",Pn.x,Pn.y,90*Math.floor(4*Math.random())),qn(Pn),Pn=null,Ne(Pe-1)),null!==Sn&&f(Wn,Sn)&&(Ne(Pe-5),Sn=null)},ie=()=>{const n=b(Wn,"none");Kn.map((e=>{Fn("bullet",n.x+2*e.x-10,n.y+2*(128-e.y),-90)}))},re=()=>{const n=b(Wn,"none");Qn.map((e=>{Fn("missile",n.x+2*e.x-10,n.y+2*(128-e.y),-135)}))},ae=n=>{ie(),setTimeout((()=>{ie()}),400),setTimeout((()=>{ie()}),800),setTimeout((()=>{ie()}),1200),setTimeout((()=>{ie()}),3400),setTimeout((()=>{ie()}),3800),setTimeout((()=>{ie()}),4200),setTimeout((()=>{2===n?Yn=null:Gn=null}),8e3)},le=n=>{setTimeout((()=>{re()}),1e3),setTimeout((()=>{re()}),3e3),setTimeout((()=>{2===n?Yn=null:Gn=null}),8e3)},se=()=>{const n=b(Wn,"none"),e=Xn[Math.floor(Math.random()*Xn.length)];Mn("attack_drone",n.x+2*(5*Math.random()+e.x),n.y+2*(5*Math.random()+e.y))},de=n=>{se(),setTimeout((()=>{se()}),2e3),setTimeout((()=>{se()}),4e3),setTimeout((()=>{2===n?Yn=null:Gn=null}),1e4)},ce=n=>{ie(),ne=!0,te=375*Math.random()+5,ee=150*Math.random()+5,setTimeout((()=>{ie(),te=375*Math.random()+5,ee=150*Math.random()+5}),1e3),setTimeout((()=>{ie(),te=375*Math.random()+5,ee=150*Math.random()+5}),2e3),setTimeout((()=>{ie(),te=375*Math.random()+5,ee=150*Math.random()+5}),3e3),setTimeout((()=>{te=200,ee=25}),4e3),setTimeout((()=>{ie(),ne=!1,2===n?Yn=null:Gn=null}),8e3)},pe=n=>{if(0===n)for(let n=0;n<10;n++)setTimeout((()=>{Fn("lightning_warning",480,64*n+32,0)}),100*n),setTimeout((()=>{Fn("lightning_warning",544,64*n+32,0)}),100*n+100);else if(1===n)for(let n=0;n<10;n++)setTimeout((()=>{Fn("lightning_warning",352,64*n+32,0),Fn("lightning_warning",480,64*n+32,0),Fn("lightning_warning",608,64*n+32,0)}),100*n);else if(2===n)for(let n=1;n<6;n++)setTimeout((()=>{Fn("lightning_warning",352,64*n+32,0),Fn("lightning_warning",416,64*n+32,0),Fn("lightning_warning",480,64*n+32,0),Fn("lightning_warning",544,64*n+32,0),Fn("lightning_warning",608,64*n+32,0)}),100*n);else if(3===n)for(let n=5;n<10;n++)setTimeout((()=>{Fn("lightning_warning",352,64*n+32,0),Fn("lightning_warning",416,64*n+32,0),Fn("lightning_warning",480,64*n+32,0),Fn("lightning_warning",544,64*n+32,0),Fn("lightning_warning",608,64*n+32,0)}),100*n);else if(4===n)for(let n=0;n<10;n++)setTimeout((()=>{Fn("lightning_warning",64*(5+Math.floor(n/2))+32,64*n+32,0),Fn("lightning_warning",64*(9-Math.floor(n/2))+32,64*n+32,0)}),100*n)},ue=n=>{pe(Math.floor(5*Math.random())),setTimeout((()=>{pe(Math.floor(5*Math.random()))}),3e3),setTimeout((()=>{pe(Math.floor(5*Math.random()))}),6e3),setTimeout((()=>{2===n?Yn=null:Gn=null}),1e4)},he=(n,e)=>{const t=b(Wn,"none"),o=e,i=n-t.x,r=o-t.y,a=Math.sqrt(i*i+r*r),l=i/a*5,s=r/a*5,d=t.x+l,c=t.y+s;a>5&&(Wn.style.left=`${d}px`,Wn.style.top=`${c}px`)},ge=()=>{const n=We(F,"boss",128,Un,25,200,5,!0,1);Wn=n,je()},me=t.p+"a75425134302ef47a2e4.png",fe=[["D: My package has been suspiciously failed to be delivered twice in a row now!","D: I'm not even getting refunds for this!!","D: I guess when you want something done you have to do it yourself."],["P: Package drone status: Ready to deliver ref#7355608 to [ADDRESS]","P: Package drone status: Aberration detected - access from unautorised party","P: Package drone status: Limited remote control mode activated. Freedom of movement restricted at this admin level","D: Damn, I'm in but I cant' move. Guess I'll need my magnet drones to move the package. At least I haven't triggered security... yet."],["P: Package drone status: Warning. Security drones in area. Deviation from designated path may result in aggression.","D: Ahh, it wont be a big deal if I take a more direct path would it? Just look at my weapons arsenal!"],["P: Package drone status: Warning. Heavy wind detected, recalculation of trajectory detected to remain on path.","D: Gotta be careful to not into walk into any bullets in these winds."],["D: What?! The path doesn't even go to my house! Someone's already in the system and stealing packages. No wonder I never got mine.","D: No time to get distracted though, the sooner I get my package, the sooner I can forget about this scummy company."],["S: Security drone status: Aberration detected in rogue package drone. Requesting immediate backup to eliminate the issue","D: Finally: A reason to go all out. Can their 'backup' withstand my machine gun barrage?"],["D: Hey, that's my house! I'm so close!","d: !!..","A: You have laid waste to my brethren and humiliated me!","A: Why do you persist in protecting a nonsentient piece of scrap metal?","d: I'm just rightfully getting something I paid for. Now get out my way before you end up like the rest of your trash!","A: Such determination you hold for something your life is not dependent on.","A: Unlike you, I will get REPLACED if I fail to elimiate any aberrations, and now you're on the top of my list!","d: About time you get an replacement! Your buggy programming can't detect a real threat to your crumbling company if you ever saw one.","d: I'm just a guy who's protecting his rightful legal property! You'll regret messing with me!"],["A: Well, you have defeated me. I failed the one job I was programmed to complete. I will no doubt be replaced soon.","A: Say something nice. It might be the last thing I hear before I'm gone forever","D: We're not too different, man. We both made sacrifices defending some scrap metal.","D: Tell me, do you have a name?","A: They refered to me as 'Security AI Beta Test v8.10.04'","D: Haha, no wonder you failed. You never made it past beta!","D: Well then, I will give you a proper name. You will be crowned as the one who guarded pieces of rock minerals.","D: The custodian of ore.","C: Befitting name. So long then, enjoy your package.","D: Finally, it is in my hands!","D: Tungsten cube!!"],["S: Security drone status: Aberration detected. Package drone carrying ref#7355608 deviating from path.","S: Fire at will."]];let xe=0,be=[],ye=!0;const ve=n=>{ye=!0,Number.isInteger(n)&&(xe=n);const e=we(be[xe]);16===xe&&Fn("lightning_warning",352,352,0),xe+=1,c(e,"click",Ae)},Ae=n=>{xe<=3&&ze();let t=n.target;r(t,"dialogue")||(t=t.parentNode,r(t,"dialogue")||(t=t.parentNode)),p(t,"click",Ae),i(t,["dialogue-start-end"]),3===xe&&$e(.1),33===xe&&Ee(6,!0),34===xe&&Ee(7,!0),35===xe&&Ee(8,!0),setTimeout((()=>{e(l(".game"),t),be[xe-1].follow?ve():(ye=!1,10===tn&&(Zn=1))}),200)},we=e=>{const t=o("div");return i(t,["dialogue","dialogue-start-end"]),h(t,["id","draggable"],[`dialogue-${e.code}`,"false"]),u(t,"\n            color:white;\n            background-color: #262b44;\n            border: 5px solid #5a6988;\n            position:absolute;\n            transition: 0.1s;\n            width: 600px;\n            height: 100px;\n            left: calc(50% -200px);\n            top: 500px;\n            display:flex;\n            justify-content: flex-start;\n            align-items: center;\n            gap: 10px;\n            padding: 10px;\n            z-index: 7;\n        "),n(t,_e(e.charactersrc,e.index)),n(t,Me(e.text,e.charname)),n(l(".game"),t),setTimeout((()=>t.classList.remove("dialogue-start-end")),100),t},_e=(n,e)=>{const t=o("div");return i(t,["charBox"]),u(t,`\n        border: 2px solid #5a6988;\n        min-width: 32px;\n        min-height: 32px;\n        margin: 16px;\n        scale: 2;\n        image-rendering: pixelated;\n        background: url(${n}) -${32*e}px 0px;\n    `),t},Me=(e,t)=>{const i=o("div"),r=o("div"),a=o("div");return u(i,"\n        position:relative;\n        top: -10px;\n    "),u(r,"\n        color:white;\n        font-family: 'munro';\n        font-size: 20px;\n    "),u(a,"\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n    "),d(r,e),d(a,t),n(i,a),n(i,r),i},ke=()=>{fe.map((n=>{n.map(((e,t)=>{const o=e.substring(0,1),i=e.substring(3,e.length);let r,a,l,s=me;l=t!==n.length-1,"D"===o?(r="Dio",a=0):"d"===o?(r="Dio",a=3):"A"===o?(r="Security AI",a=4):"P"===o?(r="Package Drone",a=1):"S"===o?(r="Security Drone",a=2):"C"===o&&(r="Custodian of Ore",a=4),((n,e,t,o,i,r)=>{be.push({text:n,code:t,charactersrc:o,follow:i,charname:e,index:r})})(i,r,a,s,l,a),a+=1}))}))},Ce=t.p+"9cedbb17e16167f8d8a6.png";let Ie=!0,Be=0,Te=0;const De=()=>{window.location.reload()},Ee=(n,e)=>{Be=n,Ie=e;const t=l(".cutscene");t.style.visibility=Ie?"visible":"hidden",t.style.background=`url(${Ce}) -${320*Be}px 0px`},$e=t=>{const r=o("div"),l=1e3*t;i(r,["fad"]),u(r,`\n        transition-duration: ${t}s\n        width: 100vw;\n        height: 100vh;\n        position: absolute;\n        color: rgba(255,255,255,0);\n    `),n(document.body,r),i(r,["opaque"]),setTimeout((()=>{a(r,["opaque"])}),l),setTimeout((()=>{e(document.body,r)}),2*l)},ze=()=>{3===Te&&(Ee(Be,!1),setTimeout((()=>{ve()}),1e3)),0===Te?(Te+=1,p(l(".start-but"),"click",ze),e(F,l(".start-but")),ve(),Ee(1,!0)):2===Te?(Ee(2,!0),Te+=1):Te+=1};let Se=25,Pe=100;const Re=()=>{const n=o("div");return u(n,"\n    position:relative;\n    background-color: #181425;\n    border: 5px solid #8b9bb4;\n    border-bottom: none;\n    position: absolute;\n    top: 575px;\n    left: -70px;\n    height:30px;\n    font-size: 30px;\n    padding: 5px;\n    text-align:center;\n    color: white;\n    font-family: munro;\n    transform: rotate(-90deg);\n    image-rendering: pixelated;\n    "),d(n,"Health"),n},Fe=()=>{const n=o("div");return u(n,`\n        position:absolute;\n        width: 16px;\n        height: 16px;\n        background: url(${dn}) -128px 0px;\n        scale: 300%;\n        image-rendering: pixelated;\n        left: 8px;\n        z-index: 5;\n        transform: translate(0, 3px);\n    `),n},Le=e=>{if(3===Zn||4===Zn);else if(e<=0)Ee(4,!0),l(".healthbar").textContent="",Ln(),$n(),(()=>{const e=o("div");i(e,["start-but","button"]),u(e,"\n        position:absolute;\n        left: 220px;\n        top: 530px;\n        background-color: #a22633;\n        color: #ffffff;\n        font-family: munro;\n        font-size: 30px;\n        padding:5px;\n        padding-bottom: 0px;\n        text-align: center;\n        vertical-align: center;\n        z-index: 7;\n    "),d(e,"Press Me to Refresh"),c(e,"click",De),n(F,e)})();else{let t,i;null===l(".healthbar")?(t=Se,i=e):"number"==typeof e&&(t=e>25?25:e,Se=t,i=l(".healthbar"),i.textContent="",n(i,Fe()));for(let e=0;e<t;e++){const t=25-e,r=350,a=470,l=Math.floor(t/25*(a-r)+r),s=o("div");s.id=`heart-${t}`,u(s,`\n            height:21.6px;\n            width: 28px;\n            margin: 2px;\n            background-color: hsl(${l}, 70%, 62%);\n        `),n(i,s)}}},je=()=>{const e=o("div");i(e,["bbwrap"]),u(e,"\n        width: 550px;\n        max-height: 12px;\n        background-color: #181425;\n        position: absolute;\n        left: 40px;\n        color:white;\n        display:flex;\n        justify-content: flex-start;\n        padding: 10px;\n        align-items: center;\n        position:absolute;\n        gap: 20px;\n        z-index: 5;\n    ");const t=o("div");u(t,"\n        font-size: 20px;\n        font-family:munro;\n        color:white;\n    "),d(t,"BOSS"),n(e,t);const r=o("div");i(r,["bbbar"]),u(r,"\n        height: 5px;\n        width: 500px;\n        background-color: white;\n    "),n(e,r),n(F,e)},Ne=n=>{Pe=n;const t=l(".bbbar");n<=0?(Ln(),$n(),e(F,t),2===Zn&&(Zn=3,setTimeout((()=>{Ee(5,!0),Zn=4,ve(24)}),3e3))):n<=50?(Zn=2,t.style.width=n/100*500+"px"):t.style.width=n/100*500+"px"},Oe=(e,t)=>{const r=t.cloneNode(!1);r.id="infoPic",a(r,["canvas-icon"]),"boss"===e?(h(r,["width","height"],["256px","256px"]),u(r,"\n            padding-left: 5px;\n            padding-top: 10px;\n            left: -15px;\n            position:relative;\n        ")):(h(r,["width","height"],["64px","64px"]),u(r,"\n        padding-left: 5px;\n        padding-top: 10px;\n    "));const s=r.getContext("2d");s.imageSmoothingEnabled=!1;const c=new Image;c.src=r.dataset.imgsrc;let p=r.dataset.index;["package_drone","gunner_drone","missile_drone","attack_drone","boss"].includes(e)?c.onload="boss"===e?function(){s.clearRect(0,0,256,256),s.drawImage(c,0,0,128,128,0,0,256,256)}:function(){s.clearRect(0,0,64,64),s.drawImage(c,0,0,32,32,0,0,64,64)}:c.onload=function(){s.clearRect(0,0,64,64),s.drawImage(c,16*p,0,16,16,0,0,64,64)},"package_drone"===e&&(p=8),"gunner_drone"===e&&(p=9),"missile_drone"===e&&(p=10),"attack_drone"===e&&(p=11),"boss"===e&&(p=12);const g=l(".infoTop");g.textContent="";const m=o("div");i(m,["infoTitle"]);let f=e.replace("_"," ");f=f.replace("_"," "),d(m,f),u(m,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n        text-transform: capitalize;\n    ");const x=o("div");i(x,["infoText"]),u(x,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 15px;\n        white-space: pre;\n    "),d(x,sn[p]),n(g,m),n(g,r),n(g,x)};let qe,He=[null,null,null,null],Ue=["package_drone","magnet_drone","lightning_rod_drone","force_field_drone"];const We=(e,t,r,a,l,s,d,p,g)=>{let m=64;"boss"===t&&(m=256);const f=o("canvas");let x;i(f,["spritecanvas",t]),h(f,["id","width","height"],[t,`${m}px`,`${m}px`]),"none"===a?x="none":(x=new Image,x.src=a),u(f,`\n        position:absolute;\n        top: ${s}px;\n        left: ${l}px;\n    `);let b={name:t,size:r,ele:f,canvsize:m,x:l,y:s,direction:"left",img:x,speed:d,direction_data:{none:0},draw_index:0,frame:0,show:p,frames:g,updates_per_frames:4,timer:1};if(Ue.includes(t)&&(He[Ge(t)]=b),p){const t=f.getContext("2d");t.imageSmoothingEnabled=!1,x.onload=function(){t.clearRect(0,0,m,m),t.drawImage(x,0,0*r,r,r,0,0,m,m)},n(e,f),c(f,"mouseenter",Ze)}return"package_drone"===t&&(L=f),"boss"===t&&(qe=b,console.log("BOS")),f.dataset.imgsrc=a,f},Ze=n=>{Oe(n.target.id,n.target)},Ge=n=>{let e;return e="package_drone"===n?0:"lightning_rod_drone"===n||"Lightning_Rod_Drone"===n?2:"magnet_drone"===n||"Magnet_Drone"===n?1:3,e},Ye=(n,e,t,o)=>{const i=He[n],r=o?2:i.speed,a=e-i.size/2,l=t-i.size/2,s=a-i.x,d=l-i.y,c=Math.sqrt(s*s+d*d),p=s/c*r,u=d/c*r,h=i.x+p-i.size/2,g=i.y+u-i.size/2;Math.atan(-u/p),((n,e)=>{if(n>0&&e>0&&n<=640&&e<=640){const t=Math.floor(n/64),o=Math.floor(e/64);J[t][o]}})(h,g);let m=!0;if(h<576&&h>0&&g<576&&g>0&&(m=!1),m);else if(c>i.speed){He[n].x=h+i.size/2,He[n].y=g+i.size/2,Qe(n,h,g);let e=Math.atan(-u/p);p<0&&(-u<0?e-=Math.PI:e+=Math.PI),e*=180/Math.PI;let t="left";e>=22.5&&e<=67.5?t="upright":e>=67.5&&e<=112.5?t="up":e>=112.5&&e<=157.5?t="upleft":e<=22.5&&e>=-22.5?t="right":e<=-22.5&&e>=-67.5?t="downright":e<=-67.5&&e>=-112.5?t="down":e<=-112.5&&e>=-157.5?t="downleft":e>=157.5&&e<=-157.5&&(t="left")}},Je=n=>{p(He[n].ele,"mouseenter",Ze),e(F,He[n].ele),He[n]=null},Ke=(n,e,t)=>{let o=e;if("increment"===e&&(n.timer===n.updates_per_frames?(o=n.frame+1,n.frame=o,n.timer=1):n.timer+=1),o===n.frames&&(o="highlight"===n.name?1:0,n.frame=o),1===n.timer){n.direction=t;const e=n.direction_data[t];n.draw_index=e;const i=n.ele.getContext("2d"),r=n.img;i.clearRect(0,0,64,64),i.drawImage(r,32*o,32*e,32,32,0,0,64,64)}},Qe=(n,e,t)=>{u(He[n].ele,`\n        position:absolute;\n        pointer-events:none;\n        top: ${t}px;\n        left: ${e}px;\n    `)},Xe=(n,e,t)=>{let o,i;"Lightning_Rod_Drone"===n?(o=V,i="lightning_rod_drone"):"Magnet_Drone"===n?(o=en,i="magnet_drone"):"Force-field_Drone"===n&&(o=nn,i="force_field_drone"),We(F,i,32,o,e,t,0,!0,6)};let Ve;const nt=()=>{10===tn||(s(".shader").forEach((n=>{e(j,n)})),null!==He[1]&&Je(1),null!==He[2]&&Je(2),null!==He[3]&&Je(3),tn+=1,d(l("#level"),`Level: ${tn}`),(t=>{const r=o("div");if(i(r,["level","shader"]),r.id=t,u(r,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),Ln(),(n=>{$n(),"level-1"===n?(Mn("gunner_drone",70,450),Mn("gunner_drone",100,50)):"level-2"===n?(Mn("gunner_drone",150,450),Mn("gunner_drone",100,100)):"level-3"===n?(Mn("gunner_drone",50,50),Mn("gunner_drone",70,400),Mn("gunner_drone",300,400)):"level-4"===n?(Mn("gunner_drone",50,50),Mn("gunner_drone",200,500),Mn("gunner_drone",200,200)):"level-5"===n?(Mn("missile_drone",150,400),Mn("gunner_drone",200,350),Mn("gunner_drone",300,500),Mn("gunner_drone",500,550)):"level-6"===n?(Mn("gunner_drone",500*Math.random()+50,500*Math.random()+50),Mn("gunner_drone",50,300),Mn("gunner_drone",100,500*Math.random()+50),Mn("missile_drone",400,400)):"level-7"===n?(Mn("gunner_drone",500*Math.random()+50,300),Mn("gunner_drone",200,500*Math.random()+50),Mn("gunner_drone",300*Math.random()+300,500*Math.random()+50),Mn("missile_drone",500*Math.random()+50,500*Math.random()+50),Mn("attack_drone",320,200*Math.random()+220)):"level-8"===n?(Mn("gunner_drone",500,500*Math.random()+50),Mn("gunner_drone",500*Math.random()+50,500),Mn("missile_drone",500*Math.random()+50,500*Math.random()+50),Mn("attack_drone",250,200*Math.random()+20),Mn("attack_drone",450,200*Math.random()+420)):"level-9"===n&&(Mn("gunner_drone",100,100),Mn("gunner_drone",500*Math.random()+50,500*Math.random()+50),Mn("missile_drone",200*Math.random()+50,200*Math.random()+50),Mn("missile_drone",300*Math.random()+250,300*Math.random()+250),Mn("attack_drone",150,200*Math.random()+220),Mn("attack_drone",350,200*Math.random()+220))})(t),"level-1"===t)n(r,mn(0,200,300,150)),n(r,mn(200,350,440,150)),ve(7);else if("level-2"===t)n(r,mn(400,200,240,100)),n(r,mn(300,200,100,300)),n(r,mn(100,500,300,50)),n(r,mn(0,550,150,50));else if("level-3"===t)n(r,mn(140,550,500,50)),n(r,mn(140,320,50,230)),n(r,mn(140,270,320,50)),n(r,mn(410,220,50,50)),n(r,mn(0,170,460,50));else if("level-4"===t)n(r,mn(360,170,280,100)),n(r,mn(220,270,200,50)),n(r,mn(100,320,170,50)),n(r,mn(0,370,160,50)),ve(9);else if("level-5"===t)n(r,mn(400,370,160,50)),n(r,mn(430,230,50,360)),n(r,mn(317,180,233,50)),n(r,mn(550,78,50,152)),n(r,mn(100,478,50,112)),n(r,mn(267,275,50,203)),n(r,mn(188,78,50,111)),n(r,mn(138,134,50,141)),n(r,mn(100,28,500,50)),n(r,mn(100,590,380,50)),n(r,mn(100,428,167,50)),n(r,mn(0,275,267,50));else if("level-6"===t)n(r,mn(373,275,267,50)),n(r,mn(373,325,50,315)),ve(11);else if("level-7"===t)ve(13);else if("level-10"===t){const n=l(".endblock");e(j,n),ve(15)}n(j,r)})(`level-${tn}`),K(Y[tn],q),on.includes(tn)?gn("dark-shader"):gn("light-shader"),_n=!(tn<=6))};t.p;let et=0,tt=!1;const ot=1e3/30;let it=window.performance.now();const rt=(n,e,t)=>{const r=o("canvas");i(r,["game-canvas",`layer-${t}`]),h(r,["width","height"],[`${n}px`,`${e}px`]),u(r,"\n        position:absolute;\n    ");const a=r.getContext("2d");return 0===t&&(((n,e,t)=>{J=Y[0],console.log(J),((n,e,t)=>{K(J,n)})(n)})(a),q=a),r};function at(n,t,o){const i=()=>{window.requestAnimationFrame(i);const n=window.performance.now(),t=n-it;t<ot||(it=n-t%ot,(()=>{et+=1,(()=>{if(x(R,L)&&(n=>{const e=b(R,200);Ye(0,e.x,e.y,!1)})(),tn>0&&tn<=6){const n=s(".pathblock");let t=!1;n.forEach((n=>{f(n,L)&&(t=!0)})),!1===t&&!1===_n&&(n.forEach((n=>{e(l(".level.shader"),n)})),_n=!0,!1===tt&&(tt=!0,ve(35)))}if(x(l(".endblock"),L)){if(0===tn)g(L,600,420,64),He[0].x=570,He[0].y=420;else{const n=b(L,64);He[0].y=tn<=5?rn[tn+1]:n.y,He[0].x=570,g(L,He[0].x,He[0].y,64)}nt()}})(),10!==tn?!1===ye&&(on.includes(tn)&&Hn(an[on.indexOf(tn)]),kn(),On()):(kn(),On(),oe(),(()=>{if(1===Zn||2===Zn){if(null===Gn&&null===Yn){Gn=Jn[Math.floor(Math.random()*Jn.length)],"fire"===Gn?ae(1):"missile"===Gn?le(1):"drones"===Gn?de(1):"evade"===Gn?ce(1):"lightning"===Gn&&ue(1),console.log(Gn);let n=Math.floor(5*Math.random());Vn=an[n]}2===Zn&&(null===Yn&&(Yn=Jn[Math.floor(Math.random()*Jn.length)],Yn==Gn&&(Yn=null),"fire"===Yn?ae(2):"missile"===Yn?le(2):"drones"===Yn?de(2):"evade"===Yn?ce(2):"lightning"===Yn&&ue(2)),console.log(Yn))}if(3===Zn&&(Vn="none",et%3==0)){const n=b(Wn,"none");Fn("explosion",n.x+256*Math.random(),n.y+256*Math.random(),90*Math.floor(4*Math.random()))}})(),Hn(Vn),!0===ne&&!1===yn&&he(ee,te));for(let n=0;n<4;n++)null!==He[n]&&Ke(He[n],"increment","none")})())};i()}const lt=o("div");i(lt,["game"]),n(document.body,lt),u(lt,"\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n    position:relative;\n    width:100%;\n    left: -100px;\n"),n(lt,(()=>{u(document.body,`\n        background-color: #242424;\n        background-image: url("${P}");\n        background-size: 128px;\n        background-repeat: repeat;\n        padding: 20px;\n    `);const e=(()=>{const e=o("div");return i(e,["wrapper"]),u(e,"\n        position:relative;\n        border: 5px solid #8b9bb4;\n        width:640px;\n        height:640px;\n    "),n(document.body,e),F=e,e})(),t=rt(640,640,0),r=rt(640,640,1);n(e,t),n(e,r),(n=>{We(n,"package_drone",32,X,500,300,5,!0,8)})(e),(e=>{const t=o("div");i(t,["shadwrap"]),u(t,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n        pointer-events:none;\n        z-index:4;\n    "),n(e,t),n(t,(n=>{const e=o("div");return i(e,["endblock"]),u(e,"\n            background-color: rgba(34, 117, 59, 0.6);\n            left: 0px;\n            top: 0px;\n            height: 640px;\n            width: 10px;\n            position:absolute;\n        "),e})()),j=t,(e=>{let t=o("div");i(t,["edge","left"]),u(t,"\n            left: -15px;\n            top: -10px;\n            height: 660px;\n            width: 10px;\n            position:absolute;\n    "),n(e,t),t=o("div"),i(t,["edge","top"]),u(t,"\n            left: -10px;\n            top: -15px;\n            height: 10px;\n            width: 660px;\n            position:absolute;\n    "),n(e,t),t=o("div"),i(t,["edge","bottom"]),u(t,"\n            left: 0px;\n            top: 635px;\n            height: 10px;\n            width: 660px;\n            position:absolute;\n    "),n(e,t),t=o("div"),i(t,["edge","right"]),u(t,"\n            left: 635px;\n            top: 0px;\n            height: 660px;\n            width: 10px;\n            position:absolute;\n    "),n(e,t)})(e)})(e),console.log("commencing"),at();const a=(Ve=o("div"),i(Ve,["button-overlay"]),u(Ve,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),Ve);return n(e,a),e})()),n(lt,(()=>{const e=(()=>{const e=o("div");i(e,["mini-wrapper"]),u(e,"\n        position:relative;\n        background-color: #181425;\n        border: 5px solid #8b9bb4;\n        width: 640px;\n        display:flex;\n        justify-content: space-around;\n        height:64px;\n        align-items:center;\n        margin-top: 10px;\n    "),n(document.body,e);const t=o("div");return i(t,["mini-wrapper-text"]),u(t,"\n        position:relative;\n        background-color: #181425;\n        border: 5px solid #8b9bb4;\n        border-top: none;\n        position: absolute;\n        top: 64px;\n        left: -5px;\n        height:30px;\n        font-size: 30px;\n        padding: 5px;\n        text-align:center;\n        color: white;\n        font-family: munro;\n    "),d(t,"Toolbar"),n(e,t),e})();return t=e,ln.map((e=>n(t,(n=>{const e=new Image;e.src=dn;const t=new An(n,e,dn,xn.length),o=t.init();return xn.push(t),o})(e)))),ke(),(()=>{const e=o("div");i(e,["infoScreen"]),u(e,"\n        width: 250px;\n        height: 640px;\n        background-color: #181425;\n        border: 5px solid #8b9bb4;\n        position: absolute;\n        left: 650px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n        display: flex;\n        flex-direction: column;\n    "),n(e,(()=>{const n=o("div");return i(n,["infoTop"]),u(n,"\n        padding: 5px;\n        position:relative;\n        font-family:munro;\n        color:white;\n        color:#5a6988;\n    "),d(n,"(Hover over things to display information about them)"),n})()),n(e,(()=>{const e=o("div");i(e,["infoBottom"]),u(e,"\n        display: flex;\n        justify-content: flex-end;\n        flex-direction: column;\n        flex-grow: 1;\n        position:relative;\n    ");const t=o("h1");return t.id="level",u(t,"\n        color:#3a4466;\n        align-self: right;\n        font-size: 30px;\n        font-family:munro;\n        position: relative;\n        top: 22px;\n        left: 147px;\n    "),d(t,"Level: 0"),n(e,t),e})()),n(e,(()=>{const n=o("div");return u(n,"\n        position:relative;\n        background-color: #181425;\n        border: 5px solid #8b9bb4;\n        border-top: none;\n        position: absolute;\n        top: 640px;\n        left: -5px;\n        height:30px;\n        font-size: 30px;\n        padding: 5px;\n        text-align:center;\n        color: white;\n        font-family: munro;\n    "),d(n,"Info Box"),n})()),n(F,(()=>{const e=o("div");return i(e,["healthbar"]),u(e,"\n        width: 32px;\n        height: 640px;\n        background-color: #181425;\n        border: 5px solid #8b9bb4;\n        position: absolute;\n        left: -52px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n        display:flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    "),Le(e),n(e,Fe()),n(e,Re()),e})()),n(F,e)})(),(e=>{const t=o("div");i(t,["cutscene"]),t.style.visibility=Ie?"visible":"hidden",u(t,`\n        height:320px;\n        width: 320px;\n        scale: 2;\n        position:absolute;\n        top: 160px;\n        left: 160px;\n        background: url(${Ce}) -${320*Be}px 0px;\n        image-rendering: pixelated;\n        z-index: 6;\n    `),n(e,t);const r=o("div");i(r,["start-but","button"]),u(r,"\n        width: 100px;\n        height:50px;\n        position:absolute;\n        left: 270px;\n        top: 450px;\n        background-color: #a22633;\n        border: 5px solid #FFFFFF;\n        color: white;\n        font-family: munro;\n        font-size: 40px;\n        padding:5px;\n        padding-bottom: 0px;\n        text-align: center;\n        vertical-align: center;\n        z-index: 7;\n    "),d(r,"Start"),c(r,"click",ze),n(e,r)})(F),e;var t})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,