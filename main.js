(()=>{"use strict";var n={320:(n,t,e)=>{e.d(t,{Z:()=>s});var o=e(537),r=e.n(o),a=e(645),i=e.n(a)()(r());i.push([n.id,".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}","",{version:3,sources:["webpack://./src/css/animations.css"],names:[],mappings:"AAAA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B",sourcesContent:[".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}"],sourceRoot:""}]);const s=i},414:(n,t,e)=>{e.d(t,{Z:()=>u});var o=e(537),r=e.n(o),a=e(645),i=e.n(a),s=e(667),c=e.n(s),l=new URL(e(542),e.b),d=i()(r()),p=c()(l);d.push([n.id,`html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(${p}) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */`,"",{version:3,sources:["webpack://./src/css/fonts.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;IACI,oBAAoB;IACpB,+DAA+C;EACjD;;EAEA;;;;;;;;;;GAUC",sourcesContent:["html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(../fonts/munro.ttf) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */"],sourceRoot:""}]);const u=d},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",o=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),o&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),o&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},667:n=>{n.exports=function(n,t){return t||(t={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]|(%20)/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,o=0;o<t.length;o++)if(t[o].identifier===n){e=o;break}return e}function o(n,o){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],l=o.base?c[0]+o.base:c[0],d=a[l]||0,p="".concat(l," ").concat(d);a[l]=d+1;var u=e(p),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var f=r(m,o);o.byIndex=s,t.splice(s,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function r(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=e(a[i]);t[s].references--}for(var c=o(n,r),l=0;l<a.length;l++){var d=e(a[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=c}}},569:n=>{var t={};n.exports=function(n,e){var o=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,r&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},542:(n,t,e)=>{n.exports=e.p+"f78662ff4aad4d038806.ttf"}},t={};function e(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return n[o](a,a.exports,e),a.exports}e.m=n,e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var o=t.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!n;)n=o[r--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{const n=(n,t)=>{n.appendChild(t)},t=(n,t)=>{n.removeChild(t)},o=n=>document.createElement(n),r=(n,t)=>{t.forEach((t=>{n.classList.add(t)}))},a=(n,t)=>n.classList.contains(t),i=(n,t)=>{t.forEach((t=>{n.classList.remove(t)}))},s=n=>document.querySelector(n),c=(n,t)=>{n.textContent=t},l=(n,t,e)=>{n.addEventListener(t,e)},d=(n,t,e)=>{n.removeEventListener(t,e)},p=(n,t)=>{n.style.cssText=t},u=(n,t,e)=>{t.map(((t,o)=>{n.setAttribute(t,e[o])}))};var m=e(379),f=e.n(m),g=e(795),h=e.n(g),b=e(569),A=e.n(b),v=e(565),x=e.n(v),y=e(216),w=e.n(y),C=e(589),B=e.n(C),k=e(320),I={};I.styleTagTransform=B(),I.setAttributes=x(),I.insert=A().bind(null,"head"),I.domAPI=h(),I.insertStyleElement=w(),f()(k.Z,I),k.Z&&k.Z.locals&&k.Z.locals;var E=e(414),$={};$.styleTagTransform=B(),$.setAttributes=x(),$.insert=A().bind(null,"head"),$.domAPI=h(),$.insertStyleElement=w(),f()(E.Z,$),E.Z&&E.Z.locals&&E.Z.locals;const M=e.p+"2303bf42784ad28af8cb.gif";let _=-1;const R=(n="bruh")=>{_+=1,c("bruh"===n?s("#score"):n,`Score: ${_}`)},S=n=>{"slider1"===n.target.id?s(".layer-1").style.left=`${n.target.value}px`:"slider2"===n.target.id&&(s(".button-overlay").style.left=`${n.target.value}px`)},T=e.p+"9478dc13a48c1e0eaf79.png",z=e.p+"46f9a3232743a28fe55c.mp3",D=e.p+"f6a9d30b202864f403ab.mp3",P=e.p+"4b0a7fa0436041018c59.mp3",j=e.p+"2313cadcd41e0912116a.mp3",L=e.p+"db5db37355927833123f.mp3",O=e.p+"9a548da064d95ad7ec01.mp3";let Z=[];const F=(n,t)=>{var e=new Audio(n);Z.push({audio:e,name:t})},N=n=>{Z.find((t=>t.name===n)).audio.play()};let U=0;const q=n=>{let e=0,o="",i="Alert";"string"==typeof n||n instanceof String?("win"===n&&(e=2,o="you won!",i="gg"),"tutorial"===n&&(e=3,o="welcome! how to play: find out!")):(a(n.target,"closeprompt")&&N("close"),"promptbut-1"===n.target.id||"closeprompt-1"===n.target.id?(e=1,o="you have been prompted"):"closeprompt-2"===n.target.id?e=2:"closeprompt-3"===n.target.id&&(e=3));const c=s(`#prompt-${e}`);null!=c?(r(c,["end-state"]),setTimeout((()=>t(s(".wrapper"),c)),200)):X(o,e,i)},X=(t,e,a)=>{s(".button-overlay");const i=o("div");r(i,["prompt","start-state"]),u(i,["id","draggable"],[`prompt-${e}`,"false"]),p(i,"\n            color:white;\n            background-color: slategray;\n            border: 5px solid darkslategray;\n            position:absolute;\n            transition: 0.1s;\n            width: 200px;\n            height: 100px;\n            left: 200px;\n            top: 250px;\n        ");const c=G(e,a);n(i,c),n(i,Y(t)),n(s(".wrapper"),i),setTimeout((()=>i.classList.remove("start-state")),100)},Y=n=>{const t=o("div");return p(t,"\n            color:white;\n            position:relative;\n            text-align:center;\n            margin:15px 5px;\n            font-family: 'munro';\n            font-size: 15px;\n        "),c(t,n),t},G=(t,e)=>{const a=o("div");r(a,["bar"]),u(a,["id","draggable"],[`bar-${t}`,"false"]),p(a,"\n        display:flex;\n        justify-content: space-between;\n        padding: 5px;\n        background-color: darkslategray;\n        height: 20px;\n        align-items: centre;\n    ");const i=o("div");i.textContent=e,p(i,"\n        color:white;\n        font-family: 'munro';\n        font-size: 20px;\n        pointer-events: none;\n    ");const s=o("div");return r(s,["button","closeprompt"]),s.id=`closeprompt-${t}`,p(s,`\n        width: 16px;\n        height: 16px;\n        background: url(${T});\n    `),n(a,i),n(a,s),l(a,"mousedown",H),l(a,"mouseup",K),l(s,"click",q),a},H=n=>{const t=n.target.id.split("-")[1];U=t,n.preventDefault(),l(document.body,"mousemove",J),r(s(`#prompt-${t}`),["notransition"])},J=n=>{n.preventDefault();const t=s(`#prompt-${U}`),e=s(".wrapper").getBoundingClientRect(),o=n.clientX-e.left,r=n.clientY-e.top;null!==t&&(t.style.top=r-10+"px",t.style.left=o-100+"px")},K=n=>{d(document.body,"mousemove",J),i(s(`#prompt-${U}`),["notransition"]),U=0},Q=e.p+"e112e84ea9b89a736591.png",W=e.p+"89cc97a32f3bdd1a1f7c.png";let V;const nn=[11,14,15,16,19],tn=(n,t,e)=>{en(V,n)},en=(n,t)=>{n.forEach(((n,e)=>{n.forEach(((n,o)=>{on(n,e,o,t)}))}))},on=(n,t,e,o)=>{const r=64;let a=new Image;a.src=W,a.onload=function(){o.drawImage(a,n*r,0,r,r,t*r,e*r,r,r)}},rn=e.p+"eed3668d18647392456b.png",an=e.p+"d6da9f23976e4998ab40.png",sn=e.p+"c488352b32cb2834c60f.png";let cn=[],ln=[];const dn=(t,e,a,i,s,c,l,d,m)=>{const f=o("canvas");r(f,["spritecanvas"]),u(f,["id","width","height"],[e,"64px","64px"]);const g=new Image;g.src=i,p(f,`\n        position:absolute;\n        pointer-events:none;\n        top: ${c}px;\n        left: ${s}px;\n    `);let h={name:e,size:a,ele:f,x:s,y:c,direction:"left",img:g,speed:l,direction_data:{none:0},draw_index:0,frame:0,show:d,frames:m,updates_per_frames:2,timer:1};if("car"===e&&(h.direction_data={left:0,downleft:1,down:2,upright:3,downright:4,upleft:5,up:6,right:7}),cn.push(h),"coin"===e&&ln.push(h),d){const e=f.getContext("2d");e.imageSmoothingEnabled=!1,g.onload=function(){e.clearRect(0,0,64,64),e.drawImage(g,0,0*a,a,a,0,0,64,64)},n(t,f)}return f},pn=(e,o)=>{const r=s(".wrapper");cn[e].show=o,o?(null===s(`#${cn[e].name}`)&&n(r,cn[e].ele),1===e&&un(1,1,"none")):null!==s(`#${cn[e].name}`)&&t(r,cn[e].ele)},un=(n,t,e)=>{let o=t;if("increment"===t&&(cn[n].timer===cn[n].updates_per_frames?(o=cn[n].frame+1,cn[n].frame=o,cn[n].timer=1):cn[n].timer+=1),o===cn[n].frames&&(o="highlight"===cn[n].name?1:0,cn[n].frame=o),1===cn[n].timer){cn[n].direction=e;const t=cn[n].direction_data[e];cn[n].draw_index=t;const r=cn[n].ele.getContext("2d"),a=cn[n].size,i=cn[n].img;r.clearRect(0,0,a,a),r.drawImage(i,a*o,a*t,a,a,0,0,a,a)}},mn=(n,t,e)=>{p(cn[n].ele,`\n        position:absolute;\n        pointer-events:none;\n        top: ${e}px;\n        left: ${t}px;\n    `)},fn=n=>{const e=cn.indexOf(n);if(e>-1){if("coin"===cn[e].name){const t=ln.indexOf(n);t>-1&&ln.splice(t,1)}t(s(".wrapper"),cn[e].ele),cn.splice(e,1)}},gn=n=>{switch(n){case"start":break;case"win":q("win"),p(document.body,"\n                background-image: none;\n                background-color: #476336;\n            ")}},hn=(n,t)=>{const e=Math.floor(t.x/64),o=Math.floor(t.y/64);let r=V[e][o];r++,20==r&&(r=0),((n,t,e)=>{V[n][t]=e})(e,o,r)},bn=1e3/30;let An=window.performance.now();const vn=(n,t,e)=>{const i=o("canvas");r(i,["game-canvas",`layer-${e}`]),u(i,["width","height"],[`${n}px`,`${t}px`]),p(i,"\n        position:absolute;\n    ");const s=i.getContext("2d");return(n=>{l(n,"click",(t=>{n.getContext("2d");const e=function(n,t){const e=n.getBoundingClientRect();return{x:t.clientX-e.left,y:t.clientY-e.top}}(n,t);a(n,"layer-1")&&hn(0,e)}))})(i),0===e&&((n,t,e)=>{V=new Array(10).fill(0).map((()=>new Array(10).fill(10))),V[2][1]=11,V[9][9]=18,V[9][8]=18,V[8][8]=19,V[8][9]=19,console.log(V),tn(n)})(s),i};e.p;const xn=["Magnet_Drone","Gunner_Drone","Lightning_Rod_Drone","Mirror_Drone","Air_Strike","Machine_Gun","Drone_Control_Hack","Drone_GPS_Hack","Recall_Drones","Repair_Package_Drone"],yn=["\nAttracts metal towards it\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Cooldown: none\n","\nShoots things in a small radius\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Ammo: 10 bullets\n- Damage: low\n- Cooldown: 20 seconds\n","\nAbsorbs lightning in a small radius\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Shatters after 3 lightning strikes\n- Cooldown: 20 seconds\n","\nDeflects lasers that hit it,\nclick to change deflection direction\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Shatters after 3 laser deflections\n- Cooldown: 20 seconds\n","\nCall a missile to any point on the field\n\n- Ammo: 1 missile\n- Damage: high\n- Cooldown: 10 seconds\n","\nFires shots at any point on the field,\nmachine overheats after 20 shots\n\n- Ammo: 20 bullets\n- Firerate: 4 bullets per second\n- Cooldown: 20 seconds\n","\nMakes drones moveable temporarily,\ndrag onto desired drone and\ndrag affected drone to move it\n\n- Duration: 10 seconds\n- Cooldown: 30 seconds\n","\nLocks a drone's position temporarily,\ndrag onto desired drone\n\n- Duration: 10 seconds\n- Cooldown: 30 seconds\n","\nRemove all placed drones from field.\n\n- Cooldown: none\n","\nWhen near package drone, restores\n2 health per 5 seconds.\n\n- Cooldown: 30 seconds\n"];let wn=20;const Cn=t=>{let e,r;null===s(".healthbar")?(e=wn,r=t):"number"==typeof t&&(e=t,wn=e,r=s(".healthbar"),r.textContent="");for(let t=0;t<e;t++){const e=20-t,a=350,i=470,s=Math.floor(e/20*(i-a)+a),c=o("div");c.id=`heart-${e}`,p(c,`\n            height:28px;\n            width: 28px;\n            margin: 2px;\n            background-color: hsl(${s}, 70%, 62%);\n        `),n(r,c)}},Bn=e.p+"2ecc510bd9084ba1205a.png";let kn=[];function In(e,a,m,f){this.name=e,this.index=f,this.img=a,this.imgsrc=m,this.currentFrame=0,this.canvele,this.imgele,this.init=()=>{const n=this.index;this.addedleft=64*kn.length,this.size;const t=this.name,e=o("canvas");r(e,["mini-canvas",`${t}`]),u(e,["width","height"],["64px","64px"]),p(e,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const a=e.getContext("2d"),i=this.img;a.imageSmoothingEnabled=!1,i.onload=function(){a.clearRect(0,0,64,64),a.drawImage(i,16*n,0,16,16,0,0,64,64)},this.canvele=e,this.ctx=a;const s=o("canvas");r(s,["canvas-icon"]),u(s,["width","height","id"],["64px","64px",t]),p(s,"\n\n        ");const c=s.getContext("2d");return c.imageSmoothingEnabled=!1,i.onload=function(){c.clearRect(0,0,64,64),c.drawImage(i,16*n,0,16,16,0,0,64,64)},s.dataset.imgsrc=this.imgsrc,s.dataset.index=n,this.imgele=s,this.initMouse(e,s),s},this.initMouse=(m,f)=>{const g=m.getContext("2d");let h;const b=s(".wrapper");let A,v=[],x=this.size,y=(this.currentFrame,this.index);const w=n=>{0===v.length&&v.push(setInterval((()=>{}),250))},C=n=>{n.preventDefault();const t=document.body.getBoundingClientRect(),e=b.getBoundingClientRect();A={x:n.clientX-e.left,y:n.clientY-e.top},h={x:n.clientX-t.left,y:n.clientY-t.top},m.style.top=h.y-32+"px",m.style.left=h.x-32+"px"};l(f,"mousedown",(t=>{t.preventDefault(),m.style.top="-1000px",m.style.left="-1000px",n(document.body,m),l(document.body,"mousemove",C),l(b,"mouseenter",w),g.clearRect(0,0,64,64),g.drawImage(a,16*y,0,16,16,0,0,64,64)})),l(document.body,"mouseup",(n=>{d(document.body,"mousemove",C),d(b,"mouseenter",w),0!==v.length&&"coin"===e&&dn(s(".wrapper"),"coin",64,an,A.x-32,A.y-32,0,!0,12),clearInterval(v[0]),v=[],null!=s(`.mini-canvas.${this.name}`)&&t(document.body,m),g.clearRect(0,0,x,x)})),l(f,"mouseenter",(t=>{((t,e)=>{const a=e.cloneNode(!1);a.id="infoPic",i(a,["canvas-icon"]),u(a,["width","height"],["64px","64px"]),p(a,"\n        padding-left: 5px;\n        padding-top: 10px;\n    ");const l=a.getContext("2d");l.imageSmoothingEnabled=!1;const d=new Image;d.src=a.dataset.imgsrc;const m=a.dataset.index;d.onload=function(){l.clearRect(0,0,64,64),l.drawImage(d,16*m,0,16,16,0,0,64,64)};const f=s(".infoTop");f.textContent="";const g=o("div");r(g,["infoTitle"]);let h=t.replace("_"," ");h=h.replace("_"," "),c(g,h),p(g,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n    ");const b=o("div");r(b,["infoText"]),p(b,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 15px;\n        white-space: pre;\n    "),c(b,yn[m]),n(f,g),n(f,a),n(f,b)})(t.target.id,t.target)}))}}const En=e.p+"82e9ac88b221b8bd6b76.png",$n=t=>{const e=o("div");let a;r(e,["shader"]),e.id=t,"light-shader"===t?a="\n            background-image: linear-gradient(135deg, rgba(227, 245, 66, 0.3), rgba(230, 201, 147, 0.1));\n        ":"dark-shader"===t&&(a="\n            background-image: linear-gradient(135deg, rgba(54, 88, 163, 0.3), rgba(90, 76, 115, 0.6));\n        "),p(e,`\n        height:640px;\n        width: 640px;\n        position: absolute;\n        ${a}\n    `),n(s(".shadwrap"),e)},Mn=t=>{const e=o("div");r(e,["level","shader"]),e.id=t,p(e,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),"level-1"===t?n(e,Rn(0,256,640,64)):"level-2"===t&&n(e,Rn(0,128,640,64)),n(s(".shadwrap"),e)},_n=()=>{const n=(".shader",document.querySelectorAll(".shader"));const e=s(".shadwrap");n.forEach((n=>{t(e,n)}))},Rn=(n,t,e,a)=>{const i=o("div");return r(i,["pathblock"]),p(i,`\n        background-color: rgba(245, 66, 66, 0.5);\n        left: ${n}px;\n        top: ${t}px;\n        height: ${a}px;\n        width: ${e}px;\n        position:absolute;\n    `),i};let Sn,Tn=!1,zn=[],Dn=-1;const Pn=(n,t,e,a,i)=>{const s=o("div");return r(s,["button",n]),s.id=n,p(s,`\n            position: absolute;\n            left:${a}px;\n            top: ${i}px;\n            width: 32px;\n            height: 32px;\n            background: url(${En}) -${32*t}px 0;\n        `),l(s,"click",e),s},jn=n=>{const t=s("#promptbut-1");let e;for(a(t,"vibrate")&&i(t,["vibrate"]),setTimeout((()=>r(t,["vibrate"])),100),e=ln.length-1;e>=0;e-=1)fn(ln[e])},Ln=n=>{Dn+=1,2===Dn&&(Dn=-1,_n()),0===Dn?($n("light-shader"),Mn("level-1")):1===Dn&&(_n(),Mn("level-2"),$n("dark-shader"))},On=n=>{const t=s("#pointer"),e=s(".layer-0").getBoundingClientRect();let o={x:0,y:0};const a=n=>{o={x:n.clientX-e.left,y:n.clientY-e.top}};a(n),Tn?(Tn=!1,i(t,["selected"]),clearInterval(zn[0]),zn=[],d(document,"mousemove",a),pn(1,!1)):(Tn=!0,r(t,["selected"]),l(document.body,"mousemove",a),zn.push(setInterval((()=>{((n,t,e)=>{const o=cn[n],r=t-o.x,a=e-o.y,i=Math.sqrt(r*r+a*a),s=r/i*o.speed,c=a/i*o.speed,l=o.x+s,d=o.y+c,p=cn[n].size,u=((n,t)=>{const e=Math.floor(n/64),o=Math.floor(t/64);return V[e][o]})(l,d);if(i>o.speed&&!nn.includes(u)){cn[n].x=l,cn[n].y=d,mn(n,l-p/2,d-p/2);let t=Math.atan(-c/s);s<0&&(-c<0?t-=Math.PI:t+=Math.PI),t*=180/Math.PI;let e="left";t>=22.5&&t<=67.5?e="upright":t>=67.5&&t<=112.5?e="up":t>=112.5&&t<=157.5?e="upleft":t<=22.5&&t>=-22.5?e="right":t<=-22.5&&t>=-67.5?e="downright":t<=-67.5&&t>=-112.5?e="down":t<=-112.5&&t>=-157.5?e="downleft":t>=157.5&&t<=-157.5&&(e="left"),un(0,"increment",e)}})(0,o.x,o.y),un(1,"increment","none"),mn(1,64*Math.floor(o.x/64),64*Math.floor(o.y/64))}),50)),pn(1,!0))},Zn=o("div");r(Zn,["game"]),n(document.body,Zn),p(Zn,"\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n    position:relative;\n    width:100%;\n    left: -100px;\n"),n(Zn,(()=>{p(document.body,`\n        background-color: #242424;\n        background-image: url("${M}");\n        background-size: 70px;\n        background-repeat: repeat;\n    `);const t=(()=>{const t=o("div");return r(t,["wrapper"]),p(t,"\n        position:relative;\n        border: 5px solid darkslategray;\n        width:640px;\n        height:640px;\n    "),n(document.body,t),t})(),e=vn(640,640,0),a=vn(640,640,1);var i;n(t,e),n(t,a),dn(i=t,"car",64,Q,300,200,5,!0,3),dn(i,"highlight",64,rn,0,0,0,!1,8),dn(i,"coin",64,an,400,500,0,!0,12),dn(i,"package_drone",32,sn,100,300,5,!0,1),(t=>{const e=o("div");r(e,["shadwrap"]),p(e,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),n(t,e)})(t),console.log("commencing"),function(n,t,e){const o=()=>{window.requestAnimationFrame(o);const t=window.performance.now(),e=t-An;e<bn||(An=t-e%bn,n.map(((n,t)=>{const e=n.getContext("2d");0===t&&tn(e)})),ln.forEach((n=>{((n,t,e)=>{let o=t;if("increment"===t&&(n.timer===n.updates_per_frames?(o=n.frame+1,n.frame=o,n.timer=1):n.timer+=1),o===n.frames&&(o="highlight"===n.name?1:0,n.frame=o),1===n.timer){n.direction=e;const t=n.direction_data[e];n.draw_index=t;const r=n.ele.getContext("2d"),a=n.size,i=n.img;r.clearRect(0,0,a,a),r.drawImage(i,a*o,a*t,a,a,0,0,a,a)}})(n,"increment","none"),((n,t)=>{const e=n.ele.getBoundingClientRect(),o=t.getBoundingClientRect();return!(e.right<o.left||e.left>o.right||e.bottom<o.top||e.top>o.bottom)})(n,s("#car"))&&(fn(n),R(),N("coin"),10===_&&gn("win"))})))};o()}([e,a]);const c=(Sn=o("div"),r(Sn,["button-overlay"]),p(Sn,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(t=>{n(t,Pn("promptbut-1",2,q,16,16)),n(t,Pn("shaker",3,jn,16,80)),n(t,Pn("pointer",7,On,16,144)),n(t,Pn("changebg",8,Ln,16,208))})(Sn),Sn);return n(t,c),t})()),n(Zn,(()=>{const t=(()=>{const t=o("div");return r(t,["mini-wrapper"]),p(t,"\n        position:relative;\n        background-color: #000000;\n        border: 5px solid darkslategray;\n        width: 640px;\n        display:flex;\n        justify-content: flex-start; \n        height:64px;\n        align-items:center;\n        margin-top: 10px;\n    "),n(document.body,t),t})();return e=t,xn.map((t=>n(e,(n=>{const t=new Image;t.src=Bn;const e=new In(n,t,Bn,kn.length),o=e.init();return kn.push(e),o})(t)))),(()=>{const t=o("div");r(t,["infoScreen"]),p(t,"\n        width: 250px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: 650px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n    "),n(t,(()=>{const n=o("div");return r(n,["infoTop"]),p(n,"\n        padding: 5px;\n    "),n})()),n(t,(()=>{const n=o("div");return r(n,["infoBottom"]),n})()),n(s(".wrapper"),(()=>{const n=o("div");return r(n,["healthbar"]),p(n,"\n        width: 32px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: -52px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n        display:flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    "),Cn(n),n})()),n(s(".wrapper"),t)})(),F(D,"click"),F(z,"close"),F(P,"coin"),F(j,"epic"),F(L,"swipe"),F(O,"open"),t;var e})()),n(Zn,(()=>{const t=(()=>{const t=o("div");r(t,["debug-wrapper"]),p(t,"\n        position:relative;\n    ");const e=o("input");e.id="slider1",l(e,"input",S),u(e,["type","min","max","value","class"],["range","0","640","0","slidey"]),n(t,e);const a=o("input");a.id="slider2",l(a,"input",S),u(a,["type","min","max","value","class"],["range","0","640","0","slidey"]),n(t,a);const i=o("h1");return i.id="score",p(i,"\n        color:white;\n        font-family: munro;\n    "),R(i),n(t,i),t})();return n(document.body,t),t})()),gn("start")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bmltYXRpb25zLmNzcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL2Nzcy9mb250cy5jc3MiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvLi9zcmMvc2NyaXB0cy9Rb0wuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL3NyYy9jc3MvYW5pbWF0aW9ucy5jc3M/MzVlNSIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL2Nzcy9mb250cy5jc3M/ZTNlMCIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL2NvbXBvbmVudHMvZGVidWdUb29scy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL3NjcmlwdHMvc291bmRzLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvLi9zcmMvY29tcG9uZW50cy9wcm9tcHRzLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvLi9zcmMvc2NyaXB0cy9jYW52YXNGdW5jcy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL2NvbXBvbmVudHMvc3ByaXRlY2FudmFzLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvLi9zcmMvc2NyaXB0cy90cmlnZ2Vycy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL3NjcmlwdHMvY2Fudk1vdXNlRnVuY3MuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZXN0My8uL3NyYy9jb21wb25lbnRzL2NhbnZhcy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL2NvbXBvbmVudHMvd3JhcHBlci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL3NjcmlwdHMvZGF0YS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL2NvbXBvbmVudHMvaW5mb1NjcmVlbi5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL2NvbXBvbmVudHMvbWluaUNhbnZhcy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL2NvbXBvbmVudHMvc2hhZGVycy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL2NvbXBvbmVudHMvYnV0dG9uT3ZlcmxheS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3dlYnBhY2stdGVzdDMvLi9zcmMvc2NyaXB0cy9zdGFydC5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlc3QzLy4vc3JjL3NjcmlwdHMvU0NGdW5jcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLnN0YXJ0LXN0YXRle1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIC0yMDAwcHgpO1xufVxuXG4uZW5kLXN0YXRle1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XG59XG5cbi5kaWFsb2d1ZS1zdGFydC1lbmR7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgMTAwMHB4KTtcbn1cblxuLnZpYnJhdGUge1xuICAgIGFuaW1hdGlvbjogdGlsdC1zaGFraW5nIDAuMjVzIDU7XG59ICBcblxuQGtleWZyYW1lcyB0aWx0LXNoYWtpbmcge1xuICAgIDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cbiAgICAyNSUgeyB0cmFuc2Zvcm06IHJvdGF0ZSg1ZGVnKTsgfVxuICAgIDUwJSB7IHRyYW5zZm9ybTogcm90YXRlKDBlZyk7IH1cbiAgICA3NSUgeyB0cmFuc2Zvcm06IHJvdGF0ZSgtNWRlZyk7IH1cbiAgICAxMDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cbn1cblxuLmJ1dHRvbiAuY2FudmFzLWljb257XG4gICAgLXdlYmtpdC1maWx0ZXI6IGJyaWdodG5lc3MoMTAwJSk7XG5cdC1tb3otZmlsdGVyOiBicmlnaHRuZXNzKDEwMCUpO1xuXHQtby1maWx0ZXI6IGJyaWdodG5lc3MoMTAwJSk7XG5cdC1tcy1maWx0ZXI6IGJyaWdodG5lc3MoMTAwJSk7XG5cdGZpbHRlcjogYnJpZ2h0bmVzcygxMDAlKTtcbn1cblxuLmJ1dHRvbjpob3ZlciwgLmNhbnZhcy1pY29uOmhvdmVyLCAuZGlhbG9ndWU6aG92ZXIsIC5iYXI6aG92ZXIsIC5zZWxlY3RlZHtcbiAgICAtd2Via2l0LWZpbHRlcjogYnJpZ2h0bmVzcyg4MCUpO1xuXHQtbW96LWZpbHRlcjogYnJpZ2h0bmVzcyg4MCUpO1xuXHQtby1maWx0ZXI6IGJyaWdodG5lc3MoODAlKTtcblx0LW1zLWZpbHRlcjogYnJpZ2h0bmVzcyg4MCUpO1xuXHRmaWx0ZXI6IGJyaWdodG5lc3MoODAlKTtcbn1cblxuLmJ1dHRvbjphY3RpdmUsIC5jYW52YXMtaWNvbjphY3RpdmV7XG4gICAgLXdlYmtpdC1maWx0ZXI6IGJyaWdodG5lc3MoNjAlKTtcblx0LW1vei1maWx0ZXI6IGJyaWdodG5lc3MoNjAlKTtcblx0LW8tZmlsdGVyOiBicmlnaHRuZXNzKDYwJSk7XG5cdC1tcy1maWx0ZXI6IGJyaWdodG5lc3MoNjAlKTtcblx0ZmlsdGVyOiBicmlnaHRuZXNzKDYwJSk7XG59XG5cbi5ub3RyYW5zaXRpb24ge1xuICAgIC13ZWJraXQtdHJhbnNpdGlvbjogbm9uZSAhaW1wb3J0YW50O1xuICAgIC1tb3otdHJhbnNpdGlvbjogbm9uZSAhaW1wb3J0YW50O1xuICAgIC1vLXRyYW5zaXRpb246IG5vbmUgIWltcG9ydGFudDtcbiAgICAtbXMtdHJhbnNpdGlvbjogbm9uZSAhaW1wb3J0YW50O1xuICAgIHRyYW5zaXRpb246IG5vbmUgIWltcG9ydGFudDtcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvYW5pbWF0aW9ucy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxnQ0FBZ0M7QUFDcEM7O0FBRUE7SUFDSSxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSwrQkFBK0I7QUFDbkM7O0FBRUE7SUFDSSwrQkFBK0I7QUFDbkM7O0FBRUE7SUFDSSxLQUFLLHVCQUF1QixFQUFFO0lBQzlCLE1BQU0sdUJBQXVCLEVBQUU7SUFDL0IsTUFBTSxzQkFBc0IsRUFBRTtJQUM5QixNQUFNLHdCQUF3QixFQUFFO0lBQ2hDLE9BQU8sdUJBQXVCLEVBQUU7QUFDcEM7O0FBRUE7SUFDSSxnQ0FBZ0M7Q0FDbkMsNkJBQTZCO0NBQzdCLDJCQUEyQjtDQUMzQiw0QkFBNEI7Q0FDNUIsd0JBQXdCO0FBQ3pCOztBQUVBO0lBQ0ksK0JBQStCO0NBQ2xDLDRCQUE0QjtDQUM1QiwwQkFBMEI7Q0FDMUIsMkJBQTJCO0NBQzNCLHVCQUF1QjtBQUN4Qjs7QUFFQTtJQUNJLCtCQUErQjtDQUNsQyw0QkFBNEI7Q0FDNUIsMEJBQTBCO0NBQzFCLDJCQUEyQjtDQUMzQix1QkFBdUI7QUFDeEI7O0FBRUE7SUFDSSxtQ0FBbUM7SUFDbkMsZ0NBQWdDO0lBQ2hDLDhCQUE4QjtJQUM5QiwrQkFBK0I7SUFDL0IsMkJBQTJCO0FBQy9CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5zdGFydC1zdGF0ZXtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTIwMDBweCk7XFxufVxcblxcbi5lbmQtc3RhdGV7XFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XFxufVxcblxcbi5kaWFsb2d1ZS1zdGFydC1lbmR7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIDEwMDBweCk7XFxufVxcblxcbi52aWJyYXRlIHtcXG4gICAgYW5pbWF0aW9uOiB0aWx0LXNoYWtpbmcgMC4yNXMgNTtcXG59ICBcXG5cXG5Aa2V5ZnJhbWVzIHRpbHQtc2hha2luZyB7XFxuICAgIDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cXG4gICAgMjUlIHsgdHJhbnNmb3JtOiByb3RhdGUoNWRlZyk7IH1cXG4gICAgNTAlIHsgdHJhbnNmb3JtOiByb3RhdGUoMGVnKTsgfVxcbiAgICA3NSUgeyB0cmFuc2Zvcm06IHJvdGF0ZSgtNWRlZyk7IH1cXG4gICAgMTAwJSB7IHRyYW5zZm9ybTogcm90YXRlKDBkZWcpOyB9XFxufVxcblxcbi5idXR0b24gLmNhbnZhcy1pY29ue1xcbiAgICAtd2Via2l0LWZpbHRlcjogYnJpZ2h0bmVzcygxMDAlKTtcXG5cXHQtbW96LWZpbHRlcjogYnJpZ2h0bmVzcygxMDAlKTtcXG5cXHQtby1maWx0ZXI6IGJyaWdodG5lc3MoMTAwJSk7XFxuXFx0LW1zLWZpbHRlcjogYnJpZ2h0bmVzcygxMDAlKTtcXG5cXHRmaWx0ZXI6IGJyaWdodG5lc3MoMTAwJSk7XFxufVxcblxcbi5idXR0b246aG92ZXIsIC5jYW52YXMtaWNvbjpob3ZlciwgLmRpYWxvZ3VlOmhvdmVyLCAuYmFyOmhvdmVyLCAuc2VsZWN0ZWR7XFxuICAgIC13ZWJraXQtZmlsdGVyOiBicmlnaHRuZXNzKDgwJSk7XFxuXFx0LW1vei1maWx0ZXI6IGJyaWdodG5lc3MoODAlKTtcXG5cXHQtby1maWx0ZXI6IGJyaWdodG5lc3MoODAlKTtcXG5cXHQtbXMtZmlsdGVyOiBicmlnaHRuZXNzKDgwJSk7XFxuXFx0ZmlsdGVyOiBicmlnaHRuZXNzKDgwJSk7XFxufVxcblxcbi5idXR0b246YWN0aXZlLCAuY2FudmFzLWljb246YWN0aXZle1xcbiAgICAtd2Via2l0LWZpbHRlcjogYnJpZ2h0bmVzcyg2MCUpO1xcblxcdC1tb3otZmlsdGVyOiBicmlnaHRuZXNzKDYwJSk7XFxuXFx0LW8tZmlsdGVyOiBicmlnaHRuZXNzKDYwJSk7XFxuXFx0LW1zLWZpbHRlcjogYnJpZ2h0bmVzcyg2MCUpO1xcblxcdGZpbHRlcjogYnJpZ2h0bmVzcyg2MCUpO1xcbn1cXG5cXG4ubm90cmFuc2l0aW9uIHtcXG4gICAgLXdlYmtpdC10cmFuc2l0aW9uOiBub25lICFpbXBvcnRhbnQ7XFxuICAgIC1tb3otdHJhbnNpdGlvbjogbm9uZSAhaW1wb3J0YW50O1xcbiAgICAtby10cmFuc2l0aW9uOiBub25lICFpbXBvcnRhbnQ7XFxuICAgIC1tcy10cmFuc2l0aW9uOiBub25lICFpbXBvcnRhbnQ7XFxuICAgIHRyYW5zaXRpb246IG5vbmUgIWltcG9ydGFudDtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuLi9mb250cy9tdW5yby50dGZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYGh0bWwge1xuICBvdmVyZmxvdy15OiBzY3JvbGw7XG59XG5cbkBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiAnbXVucm8nO1xuICAgIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fX30pIGZvcm1hdCgndHJ1ZXR5cGUnKTtcbiAgfVxuXG4gIC8qXG4gIEBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiAnbXVucm8tbmFycm93JztcbiAgICBzcmM6IHVybCguLi9mb250cy9tdW5yby1uYXJyb3cudHRmKSBmb3JtYXQoJ3RydWV0eXBlJyk7XG4gIH1cbiAgXG4gIEBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiAnbXVucm8tc21hbGwnO1xuICAgIHNyYzogdXJsKC4uL2ZvbnRzL211bnJvLXNtYWxsLnR0ZikgZm9ybWF0KCd0cnVldHlwZScpO1xuICB9XG4gICovYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2ZvbnRzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtJQUNJLG9CQUFvQjtJQUNwQiwrREFBK0M7RUFDakQ7O0VBRUE7Ozs7Ozs7Ozs7R0FVQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCJodG1sIHtcXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcXG59XFxuXFxuQGZvbnQtZmFjZSB7XFxuICAgIGZvbnQtZmFtaWx5OiAnbXVucm8nO1xcbiAgICBzcmM6IHVybCguLi9mb250cy9tdW5yby50dGYpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcXG4gIH1cXG5cXG4gIC8qXFxuICBAZm9udC1mYWNlIHtcXG4gICAgZm9udC1mYW1pbHk6ICdtdW5yby1uYXJyb3cnO1xcbiAgICBzcmM6IHVybCguLi9mb250cy9tdW5yby1uYXJyb3cudHRmKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxuICB9XFxuICBcXG4gIEBmb250LWZhY2Uge1xcbiAgICBmb250LWZhbWlseTogJ211bnJvLXNtYWxsJztcXG4gICAgc3JjOiB1cmwoLi4vZm9udHMvbXVucm8tc21hbGwudHRmKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxuICB9XFxuICAqL1wiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7XG5cbiAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH1cblxuICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgIXNjcmlwdFVybCkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiY29uc3QgcmVuZGVyID0gKHBhcmVudCwgY2hpbGQpID0+IHtcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5jb25zdCByZW1vdmUgPSAocGFyZW50LCBjaGlsZCkgPT57XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKGNoaWxkKTtcbn1cblxuY29uc3QgY3JlYXRlID0gKGVsZW1lbnQpID0+IHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbGVtZW50KTtcbn1cblxuY29uc3QgYWRkQ2xhc3MgPSAoZWxlbWVudCwgY2xhc3NsaXN0KSA9PntcbiAgICBjbGFzc2xpc3QuZm9yRWFjaChjbGFzID0+IHtlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhcyl9KTtcbn1cblxuY29uc3QgaGFzQ2xhc3MgPSAoZWxlbWVudCwgY2xhcykgPT4ge1xuICAgIHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzKTtcbn1cblxuY29uc3QgcmVtQ2xhc3MgPSAoZWxlbWVudCwgY2xhc3NsaXN0KSA9PntcbiAgICBjbGFzc2xpc3QuZm9yRWFjaChjbGFzID0+IHtlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhcyl9KTtcbn1cblxuY29uc3QgZmluZCA9IChzZWxlY3RvcikgPT4ge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbn1cblxuY29uc3QgZmluZEFsbCA9IChzZWxlY3RvcikgPT4ge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbn1cbmNvbnN0IHdyaXRlID0gKGVsZW1lbnQsIHRleHQpID0+IHtcbiAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuY29uc3QgZGV0ZWN0ID0gKGVsZW1lbnQsIGV2ZW50LCBmdW5jKSA9PntcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGZ1bmMpO1xufVxuXG5jb25zdCB1bmRldGVjdCA9IChlbGVtZW50LCBldmVudCwgZnVuYykgPT57XG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBmdW5jKTtcbn1cblxuY29uc3Qgc3R5bGUgPSAoZWxlbWVudCwgc3R5bGV0ZXh0KSA9PiB7XG4gICAgZWxlbWVudC5zdHlsZS5jc3NUZXh0ID0gc3R5bGV0ZXh0O1xufVxuXG5jb25zdCBhdHRyaWJzID0gKGVsZW1lbnQsIGF0dHJpYkxpc3QsIHZhbHVlcykgPT4ge1xuICAgIGF0dHJpYkxpc3QubWFwKChhdHRyaWIsaW5kZXgpID0+IHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0cmliLCB2YWx1ZXNbaW5kZXhdKTtcbiAgICB9KVxufVxuXG5jb25zdCBpc0VsZW1lbnQgPSBmdW5jdGlvbigkb2JqKXtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gKCRvYmouY29uc3RydWN0b3IuX19wcm90b19fLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lKT90cnVlOmZhbHNlO1xuICAgIH1jYXRjaChlKXtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IHtyZW5kZXIsIHJlbW92ZSwgY3JlYXRlLCBhZGRDbGFzcywgaGFzQ2xhc3MsIHJlbUNsYXNzLCBmaW5kLCBmaW5kQWxsLCB3cml0ZSwgZGV0ZWN0LCB1bmRldGVjdCwgc3R5bGUsIGF0dHJpYnMsIGlzRWxlbWVudH0iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYW5pbWF0aW9ucy5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2FuaW1hdGlvbnMuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2ZvbnRzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZm9udHMuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHtyZW5kZXIsIGNyZWF0ZSwgYWRkQ2xhc3MsIHJlbUNsYXNzLCBmaW5kLCB3cml0ZSwgZGV0ZWN0LHN0eWxlLGF0dHJpYnN9IGZyb20gXCIuLi9zY3JpcHRzL1FvTFwiXG5cbmxldCBzY29yZSA9IC0xO1xuXG5jb25zdCBpbmNyZW1lbnRTY29yZSA9IChzY29yZWVsZSA9IFwiYnJ1aFwiKSA9PiB7XG4gICAgc2NvcmUrPSAxO1xuICAgIGlmIChzY29yZWVsZSA9PT0gXCJicnVoXCIpe1xuICAgICAgICB3cml0ZShmaW5kKFwiI3Njb3JlXCIpLCBgU2NvcmU6ICR7c2NvcmV9YClcbiAgICB9XG4gICAgZWxzZXtcbiAgICAgICAgd3JpdGUoc2NvcmVlbGUsIGBTY29yZTogJHtzY29yZX1gKVxuICAgIH1cblxufVxuXG5jb25zdCBkZWJ1Z1Rvb2xzID0gKCkgPT57XG4gICAgY29uc3QgZGVidWdXcmFwID0gY3JlYXRlKFwiZGl2XCIpO1xuICAgIGFkZENsYXNzKGRlYnVnV3JhcCwgW1wiZGVidWctd3JhcHBlclwiXSk7XG4gICAgc3R5bGUoZGVidWdXcmFwLGBcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgYClcblxuICAgIGNvbnN0IHNsaWRlciA9IGNyZWF0ZShcImlucHV0XCIpO1xuICAgIHNsaWRlci5pZCA9IFwic2xpZGVyMVwiO1xuICAgIGRldGVjdChzbGlkZXIsIFwiaW5wdXRcIiwgc2xpZGVGdW5jKTtcbiAgICBhdHRyaWJzKHNsaWRlcixbXCJ0eXBlXCIsIFwibWluXCIsIFwibWF4XCIsIFwidmFsdWVcIiwgXCJjbGFzc1wiXSwgW1wicmFuZ2VcIiwgXCIwXCIsIFwiNjQwXCIsXCIwXCIsXCJzbGlkZXlcIl0pXG4gICAgcmVuZGVyKGRlYnVnV3JhcCwgc2xpZGVyKTtcblxuXG4gICAgY29uc3Qgc2xpZGVyMiA9IGNyZWF0ZShcImlucHV0XCIpO1xuICAgIHNsaWRlcjIuaWQgPSBcInNsaWRlcjJcIjtcbiAgICBkZXRlY3Qoc2xpZGVyMiwgXCJpbnB1dFwiLCBzbGlkZUZ1bmMpO1xuICAgIGF0dHJpYnMoc2xpZGVyMixbXCJ0eXBlXCIsIFwibWluXCIsIFwibWF4XCIsIFwidmFsdWVcIiwgXCJjbGFzc1wiXSwgW1wicmFuZ2VcIiwgXCIwXCIsIFwiNjQwXCIsXCIwXCIsXCJzbGlkZXlcIl0pXG4gICAgcmVuZGVyKGRlYnVnV3JhcCwgc2xpZGVyMik7XG5cbiAgICBjb25zdCBzY29yZWVsZSA9IGNyZWF0ZShcImgxXCIpXG4gICAgc2NvcmVlbGUuaWQgPSBcInNjb3JlXCI7XG4gICAgc3R5bGUoc2NvcmVlbGUsIGBcbiAgICAgICAgY29sb3I6d2hpdGU7XG4gICAgICAgIGZvbnQtZmFtaWx5OiBtdW5ybztcbiAgICBgKVxuICAgIGluY3JlbWVudFNjb3JlKHNjb3JlZWxlKTtcbiAgICByZW5kZXIoZGVidWdXcmFwLCBzY29yZWVsZSk7XG5cbiAgICByZXR1cm4gZGVidWdXcmFwO1xufVxuXG5jb25zdCBzbGlkZUZ1bmMgPSAoZSkgPT4ge1xuICAgIGlmIChlLnRhcmdldC5pZCA9PT0gXCJzbGlkZXIxXCIpe1xuICAgICAgICBjb25zdCBjYW52ID0gZmluZChcIi5sYXllci0xXCIpO1xuICAgICAgICBjYW52LnN0eWxlLmxlZnQgPSBgJHtlLnRhcmdldC52YWx1ZX1weGBcbiAgICB9XG4gICAgZWxzZSBpZiAoZS50YXJnZXQuaWQgPT09IFwic2xpZGVyMlwiKXtcbiAgICAgICAgY29uc3QgYnV0T3YgPSBmaW5kKFwiLmJ1dHRvbi1vdmVybGF5XCIpO1xuICAgICAgICBidXRPdi5zdHlsZS5sZWZ0ID0gYCR7ZS50YXJnZXQudmFsdWV9cHhgXG4gICAgfVxufVxuXG5leHBvcnR7ZGVidWdUb29scywgaW5jcmVtZW50U2NvcmUsIHNjb3JlfTsiLCJpbXBvcnQgY2xpY2sgZnJvbSBcIi4uL3NvdW5kcy9jbGljay5tcDNcIlxuaW1wb3J0IGNsb3NlIGZyb20gXCIuLi9zb3VuZHMvY2xvc2UubXAzXCJcbmltcG9ydCBjb2luIGZyb20gXCIuLi9zb3VuZHMvY29pbi5tcDNcIlxuaW1wb3J0IGVwaWMgZnJvbSBcIi4uL3NvdW5kcy9lcGljX2JhdHRsZV9vZl9mYW50YXNpZXMubXAzXCJcbmltcG9ydCBzd2lwZSBmcm9tIFwiLi4vc291bmRzL3N3aXBlLm1wM1wiXG5pbXBvcnQgb3BlbiBmcm9tIFwiLi4vc291bmRzL29wZW4ubXAzXCJcblxubGV0IGF1ZGlvcyA9IFtdO1xuXG5jb25zdCBtYWtlQXVkaW8gPSAoc3JjLG5hbWUpID0+IHtcbiAgICB2YXIgYXVkaW8gPSBuZXcgQXVkaW8oc3JjKTtcbiAgICBhdWRpb3MucHVzaCh7XG4gICAgICAgIGF1ZGlvLFxuICAgICAgICBuYW1lXG4gICAgfSk7XG59XG5cbmNvbnN0IGluaXRBdWRpb3MgPSAoKSA9PntcbiAgICBtYWtlQXVkaW8oY2xpY2ssIFwiY2xpY2tcIik7XG4gICAgbWFrZUF1ZGlvKGNsb3NlLCBcImNsb3NlXCIpO1xuICAgIG1ha2VBdWRpbyhjb2luLCBcImNvaW5cIik7XG4gICAgbWFrZUF1ZGlvKGVwaWMsIFwiZXBpY1wiKTtcbiAgICBtYWtlQXVkaW8oc3dpcGUsIFwic3dpcGVcIik7XG4gICAgbWFrZUF1ZGlvKG9wZW4sIFwib3BlblwiKTtcbn1cblxuY29uc3QgcGxheUF1ZGlvID0gKG5hbWUpID0+e1xuICAgIHZhciBvYmogPSBhdWRpb3MuZmluZChvYmogPT4ge1xuICAgICAgICByZXR1cm4gb2JqLm5hbWUgPT09IG5hbWVcbiAgICAgIH0pXG4gICAgICBvYmouYXVkaW8ucGxheSgpO1xufVxuXG5leHBvcnQge2luaXRBdWRpb3MsIHBsYXlBdWRpb30iLCJpbXBvcnQge3JlbmRlciwgcmVtb3ZlLCBjcmVhdGUsIGFkZENsYXNzLCByZW1DbGFzcywgaGFzQ2xhc3MsIGF0dHJpYnMsIGZpbmQsIHdyaXRlLCBkZXRlY3QsIHVuZGV0ZWN0LCBzdHlsZX0gZnJvbSBcIi4uL3NjcmlwdHMvUW9MXCJcbmltcG9ydCBjbG9zZSBmcm9tIFwiLi4vaW1hZ2VzL2Nsb3NlLnBuZ1wiXG5pbXBvcnQgY2xvc2Vzb3VuZCBmcm9tIFwiLi4vc291bmRzL2Nsb3NlLm1wM1wiXG5pbXBvcnQgeyBwbGF5QXVkaW8gfSBmcm9tIFwiLi4vc2NyaXB0cy9zb3VuZHNcIjtcblxubGV0IGJ1dE92O1xubGV0IGN1cnJlbnRDb2RlID0gMDtcbi8qXG4gICAgUHJvbXB0IGNvZGU6XG4gICAgMTogdGVzdF9wcm9tcHRcbiAgICAyOiB3aW4gc2NyZWVuXG4gICAgMzogdHV0b3JpYWxcblxuKi9cblxuY29uc3QgdG9nZ2xlUHJvbXB0ID0gKGUpID0+IHtcbiAgICBsZXQgY29kZSA9IDA7XG4gICAgbGV0IHByb21wdCA9IFwiXCI7XG4gICAgbGV0IHRpdGxlID0gXCJBbGVydFwiO1xuICAgIGlmICh0eXBlb2YgZSA9PT0gJ3N0cmluZycgfHwgZSBpbnN0YW5jZW9mIFN0cmluZyl7XG4gICAgICAgIGlmIChlID09PSBcIndpblwiKXtcbiAgICAgICAgICAgIGNvZGUgPSAyO1xuICAgICAgICAgICAgcHJvbXB0ID0gXCJ5b3Ugd29uIVwiO1xuICAgICAgICAgICAgdGl0bGUgPSBcImdnXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUgPT09IFwidHV0b3JpYWxcIil7XG4gICAgICAgICAgICBjb2RlID0gMztcbiAgICAgICAgICAgIHByb21wdCA9IFwid2VsY29tZSEgaG93IHRvIHBsYXk6IGZpbmQgb3V0IVwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICAgIGlmIChoYXNDbGFzcyhlLnRhcmdldCwgXCJjbG9zZXByb21wdFwiKSl7XG4gICAgICAgICAgICBwbGF5QXVkaW8oXCJjbG9zZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZS50YXJnZXQuaWQgPT09IFwicHJvbXB0YnV0LTFcIiB8fCBlLnRhcmdldC5pZCA9PT0gXCJjbG9zZXByb21wdC0xXCIpe1xuICAgICAgICAgICAgY29kZSA9IDE7XG4gICAgICAgICAgICBwcm9tcHQgPSBcInlvdSBoYXZlIGJlZW4gcHJvbXB0ZWRcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlLnRhcmdldC5pZCA9PT0gXCJjbG9zZXByb21wdC0yXCIpe1xuICAgICAgICAgICAgY29kZSA9IDI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZS50YXJnZXQuaWQgPT09IFwiY2xvc2Vwcm9tcHQtM1wiKXtcbiAgICAgICAgICAgIGNvZGUgPSAzO1xuICAgICAgICB9XG4gICAgfSAgIFxuICAgIFxuXG4gICAgY29uc3QgZXhpc3RzID0gZmluZChgI3Byb21wdC0ke2NvZGV9YCk7XG4gICAgaWYgKGV4aXN0cyAhPSBudWxsKSB7IFxuICAgICAgICBhZGRDbGFzcyhleGlzdHMsIFtcImVuZC1zdGF0ZVwiXSk7XG4gICAgICAgIHNldFRpbWVvdXQoKCk9PiByZW1vdmUoZmluZChcIi53cmFwcGVyXCIpLCBleGlzdHMpLCAyMDApO1xuICAgIH0gXG4gICAgZWxzZXtcbiAgICAgICAgY3JlYXRlUHJvbXB0KHByb21wdCxjb2RlLCB0aXRsZSk7XG4gICAgfVxufVxuXG5jb25zdCBjcmVhdGVQcm9tcHQgPSAobXl0ZXh0LCBjb2RlLCB0aXRsZSkgPT4ge1xuICAgIGNvbnN0IGJ1dE92ID0gZmluZChcIi5idXR0b24tb3ZlcmxheVwiKTtcbiAgICBjb25zdCBwcm9tcHQgPSBjcmVhdGUoXCJkaXZcIik7XG4gICAgICAgIGFkZENsYXNzKHByb21wdCwgW1wicHJvbXB0XCIsIFwic3RhcnQtc3RhdGVcIl0pO1xuICAgICAgICBhdHRyaWJzKHByb21wdCwgW1wiaWRcIiwgXCJkcmFnZ2FibGVcIl0sIFtgcHJvbXB0LSR7Y29kZX1gLCBcImZhbHNlXCJdKVxuXG4gICAgICAgIC8vbWFrZSBwcm9tcHQgaW5kZXggc3lzdGVtIHBsc1xuICAgICAgICBzdHlsZShwcm9tcHQsIGBcbiAgICAgICAgICAgIGNvbG9yOndoaXRlO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogc2xhdGVncmF5O1xuICAgICAgICAgICAgYm9yZGVyOiA1cHggc29saWQgZGFya3NsYXRlZ3JheTtcbiAgICAgICAgICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogMC4xcztcbiAgICAgICAgICAgIHdpZHRoOiAyMDBweDtcbiAgICAgICAgICAgIGhlaWdodDogMTAwcHg7XG4gICAgICAgICAgICBsZWZ0OiAyMDBweDtcbiAgICAgICAgICAgIHRvcDogMjUwcHg7XG4gICAgICAgIGApO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZHJhZyA9IGRyYWdCYXIoY29kZSwgdGl0bGUpO1xuICAgICAgICByZW5kZXIocHJvbXB0LCBkcmFnKTtcblxuICAgICAgICByZW5kZXIocHJvbXB0LCBjcmVhdGVUZXh0KG15dGV4dCkpO1xuICAgICAgICByZW5kZXIoZmluZChcIi53cmFwcGVyXCIpLCBwcm9tcHQpO1xuXG4gICAgICAgIHNldFRpbWVvdXQoKCk9PiBwcm9tcHQuY2xhc3NMaXN0LnJlbW92ZShcInN0YXJ0LXN0YXRlXCIpLCAxMDApO1xufVxuXG5jb25zdCBjcmVhdGVUZXh0ID0gKG15dGV4dCkgPT57XG4gICAgY29uc3QgdGV4dCA9IGNyZWF0ZShcImRpdlwiKTtcbiAgICAgICAgc3R5bGUodGV4dCwgYFxuICAgICAgICAgICAgY29sb3I6d2hpdGU7XG4gICAgICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAgICAgICAgICAgIHRleHQtYWxpZ246Y2VudGVyO1xuICAgICAgICAgICAgbWFyZ2luOjE1cHggNXB4O1xuICAgICAgICAgICAgZm9udC1mYW1pbHk6ICdtdW5ybyc7XG4gICAgICAgICAgICBmb250LXNpemU6IDE1cHg7XG4gICAgICAgIGApO1xuICAgIHdyaXRlKHRleHQsIG15dGV4dCk7XG5cbiAgICByZXR1cm4gdGV4dDtcbn1cblxuXG5jb25zdCBkcmFnQmFyID0gKGNvZGUsdGl0bGUpID0+IHtcbiAgICBjb25zdCBiYXIgPSBjcmVhdGUoXCJkaXZcIik7XG4gICAgYWRkQ2xhc3MoYmFyLCBbXCJiYXJcIl0pO1xuICAgIGF0dHJpYnMoYmFyLCBbXCJpZFwiLCBcImRyYWdnYWJsZVwiXSwgW2BiYXItJHtjb2RlfWAsIFwiZmFsc2VcIl0pXG4gICAgc3R5bGUoYmFyLCBgXG4gICAgICAgIGRpc3BsYXk6ZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICBwYWRkaW5nOiA1cHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtzbGF0ZWdyYXk7XG4gICAgICAgIGhlaWdodDogMjBweDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRyZTtcbiAgICBgKVxuICAgIFxuICAgIGNvbnN0IHRpdCA9IGNyZWF0ZShcImRpdlwiKVxuICAgIHRpdC50ZXh0Q29udGVudCA9IHRpdGxlO1xuICAgIHN0eWxlKHRpdCwgYFxuICAgICAgICBjb2xvcjp3aGl0ZTtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdtdW5ybyc7XG4gICAgICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgYClcblxuICAgIGNvbnN0IGNsb3NlUHJvbXB0ID0gY3JlYXRlKFwiZGl2XCIpO1xuICAgIGFkZENsYXNzKGNsb3NlUHJvbXB0LCBbXCJidXR0b25cIiwgXCJjbG9zZXByb21wdFwiXSk7XG4gICAgY2xvc2VQcm9tcHQuaWQgPSAgIGBjbG9zZXByb21wdC0ke2NvZGV9YDtcbiAgICBzdHlsZShjbG9zZVByb21wdCwgYFxuICAgICAgICB3aWR0aDogMTZweDtcbiAgICAgICAgaGVpZ2h0OiAxNnB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoJHtjbG9zZX0pO1xuICAgIGApO1xuXG4gICAgcmVuZGVyIChiYXIsIHRpdCk7XG4gICAgcmVuZGVyKGJhciwgY2xvc2VQcm9tcHQpO1xuICAgIGRldGVjdChiYXIsIFwibW91c2Vkb3duXCIsIG1vdXNlRG93bik7XG4gICAgZGV0ZWN0KGJhciwgXCJtb3VzZXVwXCIsIG1vdXNlVXApO1xuICAgIC8vZml4IHRoZSBpc3N1ZSB5b3Uga25vdyB3aGF0IGl0IGlzXG5cbiAgICBkZXRlY3QoY2xvc2VQcm9tcHQsIFwiY2xpY2tcIiwgdG9nZ2xlUHJvbXB0KTtcblxuICAgIHJldHVybiBiYXI7XG59XG5cbmNvbnN0IG1vdXNlRG93biA9IChlKSA9PntcbiAgICBjb25zdCBjb2RlID0gZS50YXJnZXQuaWQuc3BsaXQoJy0nKVsxXTtcbiAgICBjdXJyZW50Q29kZSA9IGNvZGU7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGRldGVjdChkb2N1bWVudC5ib2R5LCBcIm1vdXNlbW92ZVwiLCBtb3VzZU1vdmUpO1xuICAgIGFkZENsYXNzKGZpbmQoYCNwcm9tcHQtJHtjb2RlfWApLCBbXCJub3RyYW5zaXRpb25cIl0pO1xufVxuXG5jb25zdCBtb3VzZU1vdmUgPSAoZXZ0KSA9PiB7XG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgcHJvbXB0ID0gZmluZChgI3Byb21wdC0ke2N1cnJlbnRDb2RlfWApO1xuICAgIGNvbnN0IHJlY3QgPSBmaW5kKFwiLndyYXBwZXJcIikuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgbW91c2VQb3MgPSB7XG4gICAgICAgIHg6IGV2dC5jbGllbnRYIC0gcmVjdC5sZWZ0LFxuICAgICAgICB5OiBldnQuY2xpZW50WSAtIHJlY3QudG9wXG4gICAgfTtcbiAgICBcbiAgICBpZiAocHJvbXB0ICE9PSBudWxsKVxuICAgIHtcbiAgICAgICAgcHJvbXB0LnN0eWxlLnRvcCA9IG1vdXNlUG9zLnkgLTEwICtcInB4XCI7XG4gICAgICAgIHByb21wdC5zdHlsZS5sZWZ0ID0gbW91c2VQb3MueCAtMTAwICsgXCJweFwiO1xuICAgIH1cbn1cblxuY29uc3QgbW91c2VVcCA9IChlKSA9PntcbiAgICB1bmRldGVjdChkb2N1bWVudC5ib2R5LFwibW91c2Vtb3ZlXCIsIG1vdXNlTW92ZSk7XG4gICAgcmVtQ2xhc3MoZmluZChgI3Byb21wdC0ke2N1cnJlbnRDb2RlfWApLCBbXCJub3RyYW5zaXRpb25cIl0pO1xuICAgIGN1cnJlbnRDb2RlID0gMDtcbn1cblxuY29uc3QgcHJvbXB0T2JqID0gKCkgPT4ge1xuXG59XG5leHBvcnQge3RvZ2dsZVByb21wdH07IiwiaW1wb3J0IGZsb29yX3RpbGVzIGZyb20gXCIuLi9pbWFnZXMvZmxvb3JfdGlsZXMucG5nXCI7XG5cbmxldCB0aWxlcztcbmNvbnN0IGNvbGxpc2lvbl90aWxlcyA9IFsxMSwxNCwxNSwxNiwxOV1cblxuY29uc3QgdXBkYXRlQmFja2dyb3VuZCA9IChjdHgsIHdpZHRoLCBoZWlnaHQpID0+IHtcbiAgICByZW5kZXJUaWxlcyh0aWxlcyxjdHgpO1xufVxuXG5jb25zdCBpbml0QmFja2dyb3VuZCA9IChjdHgsIHdpZHRoLCBoZWlnaHQpID0+e1xuICAgIHRpbGVzID0gZ2VuZXJhdGVUaWxlcygpO1xuICAgIHRpbGVzWzJdWzFdID0gMTE7XG4gICAgdGlsZXNbOV1bOV0gPSAxODtcbiAgICB0aWxlc1s5XVs4XSA9IDE4O1xuICAgIHRpbGVzWzhdWzhdID0gMTk7XG4gICAgdGlsZXNbOF1bOV0gPSAxOTtcbiAgICBjb25zb2xlLmxvZyh0aWxlcyk7XG4gICAgdXBkYXRlQmFja2dyb3VuZChjdHgsIHdpZHRoLCBoZWlnaHQpO1xufVxuXG5jb25zdCByZW5kZXJUaWxlcyA9ICh0aWxlcyxjdHgpID0+e1xuICAgIHRpbGVzLmZvckVhY2goKHJvdyxpbmRleCkgPT4ge1xuICAgICAgICByb3cuZm9yRWFjaCgodGlsZSxpbmRleDIpID0+e1xuICAgICAgICAgICAgZHJhd1RpbGUodGlsZSwgaW5kZXgsIGluZGV4MiwgY3R4KTtcbiAgICAgICAgfSlcbiAgICB9KVxufVxuXG5jb25zdCBkcmF3VGlsZT0odGlsZSx4LHksIGN0eCkgPT57XG4gICAgY29uc3Qgc2l6ZSA9IDY0O1xuICAgIGxldCB0aWxlc2V0ID0gbmV3IEltYWdlKCk7XG4gICAgdGlsZXNldC5zcmMgPSBmbG9vcl90aWxlcztcbiAgICB0aWxlc2V0Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvL2RyYXdJbWFnZShpbWFnZSwgc3gsIHN5LCBzV2lkdGgsIHNIZWlnaHQsIGR4LCBkeSwgZFdpZHRoLCBkSGVpZ2h0KVxuICAgICAgICAvL3doZXJlIHMgPSBzcHJpdGUsIGQgPSBkcmF3XG4gICAgICAgIC8vY3R4LnJvdGF0ZSgoOTAgKiBNYXRoLlBJKSAvIDE4MCk7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UodGlsZXNldCwgdGlsZSpzaXplLCAwLCBzaXplLCBzaXplLCB4KnNpemUsIHkqc2l6ZSwgc2l6ZSxzaXplKTtcbiAgICB9ICBcbn1cblxuY29uc3QgbW9kaWZ5VGlsZSA9ICh4LHksIHRpbGUpID0+IHtcbiAgICB0aWxlc1t4XVt5XSA9IHRpbGU7XG59XG5cbmNvbnN0IGdldFRpbGVzID0gKCkgPT4ge1xuICAgIHJldHVybih0aWxlcyk7XG59XG5cbmNvbnN0IGdlbmVyYXRlVGlsZXMgPSAoKSA9PiB7XG4gICAgY29uc3QgYXJyID0gbmV3IEFycmF5KDEwKS5maWxsKDApLm1hcCgoKT0+bmV3IEFycmF5KDEwKS5maWxsKDEwKSk7XG4gICAgcmV0dXJuIGFycjtcbn1cblxuY29uc3QgY2xlYXIgPSAoY3R4LCB3aWR0aCwgaGVpZ2h0KSA9PntcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xufVxuXG5jb25zdCBkZXRlY3RUaWxlID0gKHgsIHkpID0+IHtcbiAgICBjb25zdCBpID0gTWF0aC5mbG9vcih4LzY0KVxuICAgIGNvbnN0IGogPSBNYXRoLmZsb29yKHkvNjQpXG4gICAgcmV0dXJuIHRpbGVzW2ldW2pdXG59XG5cbmV4cG9ydCB7aW5pdEJhY2tncm91bmQsIHVwZGF0ZUJhY2tncm91bmQsIGNsZWFyLCBtb2RpZnlUaWxlLCBnZXRUaWxlcywgY29sbGlzaW9uX3RpbGVzLCBkZXRlY3RUaWxlfSIsImltcG9ydCB7cmVuZGVyLCByZW1vdmUsIGNyZWF0ZSwgYWRkQ2xhc3MsIGhhc0NsYXNzLCByZW1DbGFzcywgZmluZCwgd3JpdGUsIGRldGVjdCwgdW5kZXRlY3QsIHN0eWxlLCBhdHRyaWJzfSBmcm9tIFwiLi4vc2NyaXB0cy9Rb0xcIlxuaW1wb3J0IGNhcnNyYyBmcm9tIFwiLi4vaW1hZ2VzL0Nhcl91cGRhdGVkLnBuZ1wiXG5pbXBvcnQgeyBkZXRlY3RUaWxlLCBnZXRUaWxlcyB9IGZyb20gXCIuLi9zY3JpcHRzL2NhbnZhc0Z1bmNzXCJcbmltcG9ydCBobHNyYyBmcm9tIFwiLi4vaW1hZ2VzL2RlY29yLnBuZ1wiXG5pbXBvcnQgeyBjb2xsaXNpb25fdGlsZXMgfSBmcm9tIFwiLi4vc2NyaXB0cy9jYW52YXNGdW5jc1wiXG5pbXBvcnQgY29pbnNyYyBmcm9tIFwiLi4vaW1hZ2VzL2NvaW4ucG5nXCJcbmltcG9ydCBwZHNyYyBmcm9tIFwiLi4vaW1hZ2VzL3BhY2thZ2VfZHJvbmUucG5nXCI7XG5cbmxldCBzY19saXN0ID0gW107XG5sZXQgY29pbl9saXN0ID0gW107XG5cbmNvbnN0IHNwcml0ZUNhbnZhcyA9ICh3cmFwcGVyLCBuYW1lLCBzaXplLCBpbWdzcmMsIHgsIHksIHNwZWVkLCBzaG93LCBmcmFtZXMpID0+e1xuXG4gICAgY29uc3QgY2FudiA9IGNyZWF0ZShcImNhbnZhc1wiKTtcbiAgICBhZGRDbGFzcyhjYW52LCBbXCJzcHJpdGVjYW52YXNcIl0pO1xuICAgIGF0dHJpYnMoY2FudiwgW1wiaWRcIiwgXCJ3aWR0aFwiLCBcImhlaWdodFwiXSwgW25hbWUsIGAkezY0fXB4YCwgYCR7NjR9cHhgXSk7XG5cbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWcuc3JjID0gaW1nc3JjO1xuXG4gICAgc3R5bGUoY2FudiwgYFxuICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6bm9uZTtcbiAgICAgICAgdG9wOiAke3l9cHg7XG4gICAgICAgIGxlZnQ6ICR7eH1weDtcbiAgICBgKTsgICAgXG5cbiAgICBsZXQgb2JqID0geyBcbiAgICAgICAgbmFtZSxcbiAgICAgICAgc2l6ZSxcbiAgICAgICAgZWxlOiBjYW52LCBcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgZGlyZWN0aW9uOiBcImxlZnRcIixcbiAgICAgICAgaW1nLFxuICAgICAgICBzcGVlZCxcbiAgICAgICAgZGlyZWN0aW9uX2RhdGE6IHtcIm5vbmVcIjowfSxcbiAgICAgICAgZHJhd19pbmRleDogMCxcbiAgICAgICAgZnJhbWU6MCxcbiAgICAgICAgc2hvdyxcbiAgICAgICAgZnJhbWVzLFxuICAgICAgICB1cGRhdGVzX3Blcl9mcmFtZXM6IDIsXG4gICAgICAgIHRpbWVyOiAxLFxuICAgIH07XG5cbiAgICBpZiAobmFtZSA9PT0gXCJjYXJcIil7XG4gICAgICAgIG9iai5kaXJlY3Rpb25fZGF0YSA9IHtcImxlZnRcIjowLFwiZG93bmxlZnRcIjoxLFwiZG93blwiOjIsXCJ1cHJpZ2h0XCI6MyxcImRvd25yaWdodFwiOjQsXCJ1cGxlZnRcIjo1LFwidXBcIjo2LFwicmlnaHRcIjo3fVxuICAgIH1cblxuICAgIHNjX2xpc3QucHVzaChvYmopO1xuXG4gICAgaWYgKG5hbWUgPT09IFwiY29pblwiKXtcbiAgICAgICAgY29pbl9saXN0LnB1c2gob2JqKTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdyl7XG4gICAgICAgIGNvbnN0IGN0eCA9IGNhbnYuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICBjdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoMCwwLDY0LDY0KTtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAwLCBzaXplKjAsIHNpemUsIHNpemUsIDAsIDAsIDY0LDY0KTtcbiAgICAgICAgfVxuICAgICAgICByZW5kZXIod3JhcHBlciwgY2Fudik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbnY7XG59XG5cbmNvbnN0IG1vdmVUb3dhcmRzID0gKGluZGV4LCB4LCB5KSA9PiB7XG4gICAgY29uc3Qgb2JqID0gc2NfbGlzdFtpbmRleF1cbiAgICBjb25zdCBkeCA9IHgtb2JqLng7XG4gICAgY29uc3QgZHkgPSB5LW9iai55O1xuICAgIGNvbnN0IG1hZyA9IE1hdGguc3FydChkeCpkeCArIGR5KmR5KTtcbiAgICBjb25zdCB1eCA9IChkeC9tYWcpKm9iai5zcGVlZDtcbiAgICBjb25zdCB1eSA9IChkeS9tYWcpKm9iai5zcGVlZDtcbiAgICBjb25zdCBueCA9IG9iai54K3V4O1xuICAgIGNvbnN0IG55ID0gb2JqLnkrdXk7XG4gICAgY29uc3Qgc2l6ZSA9IHNjX2xpc3RbaW5kZXhdLnNpemVcbiAgICBjb25zdCBpbmNvbWluZ190aWxlID0gZGV0ZWN0VGlsZShueCxueSk7XG4gICAgaWYgKG1hZz5vYmouc3BlZWQgJiYgIWNvbGxpc2lvbl90aWxlcy5pbmNsdWRlcyhpbmNvbWluZ190aWxlKSl7XG4gICAgICAgIHNjX2xpc3RbaW5kZXhdLnggPSBueDtcbiAgICAgICAgc2NfbGlzdFtpbmRleF0ueSA9IG55O1xuICAgICAgICB0ZWxlcG9ydChpbmRleCwgbngtc2l6ZS8yLCBueS1zaXplLzIpXG4gICAgICAgIGxldCBhbmdsZSA9IE1hdGguYXRhbigtdXkvdXgpO1xuICAgICAgICBpZih1eCA8IDApe1xuICAgICAgICAgICAgaWYgKC11eSA8IDApe1xuICAgICAgICAgICAgICAgIGFuZ2xlID0gYW5nbGUgLSBNYXRoLlBJO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBhbmdsZSA9IGFuZ2xlKyBNYXRoLlBJO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFuZ2xlID0gYW5nbGUqKDE4MC9NYXRoLlBJKVxuICAgICAgICBsZXQgZGlyZWN0aW9uID0gXCJsZWZ0XCI7XG4gICAgICAgIGlmIChhbmdsZSA+PSAyMi41ICYmIGFuZ2xlIDw9IDY3LjUpIGRpcmVjdGlvbiA9IFwidXByaWdodFwiXG4gICAgICAgIGVsc2UgaWYgKGFuZ2xlID49IDY3LjUgJiYgYW5nbGUgPD0gMTEyLjUpIGRpcmVjdGlvbiA9IFwidXBcIlxuICAgICAgICBlbHNlIGlmIChhbmdsZSA+PSAxMTIuNSAmJiBhbmdsZSA8PSAxNTcuNSkgZGlyZWN0aW9uID0gXCJ1cGxlZnRcIlxuICAgICAgICBlbHNlIGlmIChhbmdsZSA8PSAyMi41ICYmIGFuZ2xlID49IC0yMi41KSBkaXJlY3Rpb24gPSBcInJpZ2h0XCJcbiAgICAgICAgZWxzZSBpZiAoYW5nbGUgPD0gLTIyLjUgJiYgYW5nbGUgPj0gLTY3LjUpIGRpcmVjdGlvbiA9IFwiZG93bnJpZ2h0XCJcbiAgICAgICAgZWxzZSBpZiAoYW5nbGUgPD0gLTY3LjUgJiYgYW5nbGUgPj0gLTExMi41KSBkaXJlY3Rpb24gPSBcImRvd25cIlxuICAgICAgICBlbHNlIGlmIChhbmdsZSA8PSAtMTEyLjUgJiYgYW5nbGUgPj0gLTE1Ny41KSBkaXJlY3Rpb24gPSBcImRvd25sZWZ0XCJcbiAgICAgICAgZWxzZSBpZiAoYW5nbGUgPj0gMTU3LjUgJiYgYW5nbGUgPD0gLTE1Ny41KSBkaXJlY3Rpb24gPSBcImxlZnRcIlxuXG4gICAgICAgIGRyYXdTQygwLCBcImluY3JlbWVudFwiLCBkaXJlY3Rpb24pO1xuICAgIH1cbn1cblxuY29uc3Qgc2V0U2hvdyA9IChpbmRleCwgc2hvdykgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBmaW5kKFwiLndyYXBwZXJcIik7XG4gICAgc2NfbGlzdFtpbmRleF0uc2hvdyA9IHNob3c7XG4gICAgaWYoc2hvdykge1xuICAgICAgICBpZiAoZmluZChgIyR7c2NfbGlzdFtpbmRleF0ubmFtZX1gKSA9PT0gbnVsbCkgcmVuZGVyKHdyYXBwZXIsIHNjX2xpc3RbaW5kZXhdLmVsZSk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMSkgZHJhd1NDKDEsMSxcIm5vbmVcIilcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChmaW5kKGAjJHtzY19saXN0W2luZGV4XS5uYW1lfWApICE9PSBudWxsKSByZW1vdmUod3JhcHBlciwgc2NfbGlzdFtpbmRleF0uZWxlKTtcbiAgICB9XG59XG5cbmNvbnN0IGRyYXdTQyA9IChpbmRleCwgZnJhbWUsIGRpcmVjdGlvbikgPT4ge1xuICAgIGxldCBmcmFtID0gZnJhbWU7XG4gICAgaWYgKGZyYW1lID09PSBcImluY3JlbWVudFwiKXtcbiAgICAgICAgaWYgKHNjX2xpc3RbaW5kZXhdLnRpbWVyID09PSBzY19saXN0W2luZGV4XS51cGRhdGVzX3Blcl9mcmFtZXMpe1xuICAgICAgICAgICAgZnJhbSA9IHNjX2xpc3RbaW5kZXhdLmZyYW1lICsgMTtcbiAgICAgICAgICAgIHNjX2xpc3RbaW5kZXhdLmZyYW1lID0gZnJhbTtcbiAgICAgICAgICAgIHNjX2xpc3RbaW5kZXhdLnRpbWVyID0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNjX2xpc3RbaW5kZXhdLnRpbWVyICs9IDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZyYW0gPT09IHNjX2xpc3RbaW5kZXhdLmZyYW1lcyl7XG4gICAgICAgIGlmIChzY19saXN0W2luZGV4XS5uYW1lID09PSBcImhpZ2hsaWdodFwiKSBmcmFtID0gMTtcbiAgICAgICAgZWxzZSBmcmFtID0gMFxuICAgICAgICBzY19saXN0W2luZGV4XS5mcmFtZSA9IGZyYW07XG4gICAgfVxuICAgIGlmIChzY19saXN0W2luZGV4XS50aW1lciA9PT0gMSl7XG4gICAgc2NfbGlzdFtpbmRleF0uZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgIGNvbnN0IGRyYWluZCA9IHNjX2xpc3RbaW5kZXhdLmRpcmVjdGlvbl9kYXRhW2RpcmVjdGlvbl07XG4gICAgc2NfbGlzdFtpbmRleF0uZHJhd19pbmRleCA9IGRyYWluZDtcbiAgICBjb25zdCBjdHggPSBzY19saXN0W2luZGV4XS5lbGUuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIGNvbnN0IHNpemUgPSBzY19saXN0W2luZGV4XS5zaXplO1xuICAgIGNvbnN0IGltZyA9IHNjX2xpc3RbaW5kZXhdLmltZztcbiAgICBjdHguY2xlYXJSZWN0KDAsMCxzaXplLHNpemUpO1xuICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCBzaXplKmZyYW0sIHNpemUqZHJhaW5kLCBzaXplLCBzaXplLCAwLCAwLCBzaXplLHNpemUpO1xuICAgIH1cbn1cblxuY29uc3QgdGVsZXBvcnQgPSAoaW5kZXgsIHgsIHkpID0+e1xuICAgIHN0eWxlKHNjX2xpc3RbaW5kZXhdLmVsZSwgYFxuICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6bm9uZTtcbiAgICAgICAgdG9wOiAke3l9cHg7XG4gICAgICAgIGxlZnQ6ICR7eH1weDtcbiAgICBgKTtcbn1cblxuY29uc3QgZGVzdHJveVNDID0gKG9iaikgPT4ge1xuICAgIGNvbnN0IGluZGV4ID0gc2NfbGlzdC5pbmRleE9mKG9iaik7XG4gICAgaWYgKGluZGV4ID4gLTEpIHsgLy8gb25seSBzcGxpY2UgYXJyYXkgd2hlbiBpdGVtIGlzIGZvdW5kXG4gICAgICAgIGlmIChzY19saXN0W2luZGV4XS5uYW1lID09PSBcImNvaW5cIil7XG4gICAgICAgICAgICBjb25zdCBpbmRleDIgPSBjb2luX2xpc3QuaW5kZXhPZihvYmopO1xuICAgICAgICAgICAgaWYoaW5kZXgyID4gLTEpe1xuICAgICAgICAgICAgICAgIGNvaW5fbGlzdC5zcGxpY2UoaW5kZXgyLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZW1vdmUoZmluZChcIi53cmFwcGVyXCIpLCBzY19saXN0W2luZGV4XS5lbGUpO1xuICAgICAgICBzY19saXN0LnNwbGljZShpbmRleCwgMSk7IC8vIDJuZCBwYXJhbWV0ZXIgbWVhbnMgcmVtb3ZlIG9uZSBpdGVtIG9ubHlcbiAgICB9XG59XG5cbmNvbnN0IGluaXRTQyA9ICh3cmFwcGVyKSA9PntcbiAgICBjb25zdCBjYXIgPSBzcHJpdGVDYW52YXMod3JhcHBlciwgXCJjYXJcIiwgNjQsIGNhcnNyYywgMzAwLCAyMDAsIDUsIHRydWUsMyk7XG4gICAgY29uc3QgaGlnaGxpZ2h0ID0gc3ByaXRlQ2FudmFzKHdyYXBwZXIsIFwiaGlnaGxpZ2h0XCIsIDY0LCBobHNyYywgMCwwLCAwLCBmYWxzZSw4KVxuICAgIGNvbnN0IGNvaW4gPSBzcHJpdGVDYW52YXMod3JhcHBlciwgXCJjb2luXCIsIDY0LCBjb2luc3JjLCA0MDAsIDUwMCwgMCwgdHJ1ZSwgMTIpXG4gICAgY29uc3QgcGFja2FnZV9kcm9uZSA9IHNwcml0ZUNhbnZhcyh3cmFwcGVyLCBcInBhY2thZ2VfZHJvbmVcIiwgMzIsIHBkc3JjLCAxMDAsIDMwMCwgNSwgdHJ1ZSwgMSlcbn1cblxuZXhwb3J0e2luaXRTQywgbW92ZVRvd2FyZHMgLHNldFNob3csIGRyYXdTQywgdGVsZXBvcnQsIGNvaW5fbGlzdCwgZGVzdHJveVNDLCBzcHJpdGVDYW52YXN9IiwiaW1wb3J0IHsgbmV4dERpYWxvZ3VlIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvZGlhbG9ndWVcIjtcbmltcG9ydCB7IHRvZ2dsZVByb21wdCB9IGZyb20gXCIuLi9jb21wb25lbnRzL3Byb21wdHNcIjtcbmltcG9ydCB7IHN0eWxlIH0gZnJvbSBcIi4vUW9MXCI7XG5pbXBvcnQgZXBpYyBmcm9tIFwiLi4vc291bmRzL2VwaWNfYmF0dGxlX29mX2ZhbnRhc2llcy5tcDNcIlxuXG5jb25zdCB0cmlnZ2VyID0gKGNvZGUpID0+IHtcbiAgICBzd2l0Y2ggKGNvZGUpe1xuICAgICAgICBjYXNlIFwic3RhcnRcIjpcbiAgICAgICAgICAgIC8vdG9nZ2xlUHJvbXB0KFwidHV0b3JpYWxcIik7XG4gICAgICAgICAgICAvL25leHREaWFsb2d1ZSgwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwid2luXCI6XG4gICAgICAgICAgICB0b2dnbGVQcm9tcHQoXCJ3aW5cIik7XG4gICAgICAgICAgICBzdHlsZShkb2N1bWVudC5ib2R5LCBgXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDc2MzM2O1xuICAgICAgICAgICAgYClcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cblxuZXhwb3J0IHt0cmlnZ2VyfTsiLCJpbXBvcnQge3JlbmRlciwgY3JlYXRlLCBhZGRDbGFzcywgaGFzQ2xhc3MsIHJlbUNsYXNzLCBmaW5kLCB3cml0ZSwgZGV0ZWN0LCBzdHlsZSwgYXR0cmlic30gZnJvbSBcIi4vUW9MXCJcbmltcG9ydCB7IGdldFRpbGVzLCBtb2RpZnlUaWxlIH0gZnJvbSBcIi4vY2FudmFzRnVuY3NcIjtcblxuY29uc3QgaW5pdE1vdXNlID0gKGNhbnYpID0+IHtcbiAgICBkZXRlY3QoY2FudiwgXCJjbGlja1wiLCAoZXZ0KSA9PiB7XG4gICAgICAgIGNvbnN0IGN0eCA9IGNhbnYuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICBjb25zdCBtb3VzZVBvcyA9IGdldE1vdXNlUG9zKGNhbnYsIGV2dCk7XG4gICAgICAgIGlmIChoYXNDbGFzcyhjYW52LCBcImxheWVyLTFcIikpe1xuICAgICAgICAgICAgYmFja2dyb3VuZENoYW5nZShjdHgsIG1vdXNlUG9zKVxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldE1vdXNlUG9zKGNhbnZhcywgZXZ0KSB7XG4gICAgY29uc3QgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBldnQuY2xpZW50WCAtIHJlY3QubGVmdCxcbiAgICAgICAgeTogZXZ0LmNsaWVudFkgLSByZWN0LnRvcFxuICAgIH07XG59XG5cbmNvbnN0IGJhY2tncm91bmRDaGFuZ2UgPSAoY3R4LCBtb3VzZSkgPT4ge1xuICAgIGNvbnN0IHRpbGV4ID0gTWF0aC5mbG9vcihtb3VzZS54LzY0KVxuICAgIGNvbnN0IHRpbGV5ID0gTWF0aC5mbG9vcihtb3VzZS55LzY0KVxuXG4gICAgbGV0IHRpbGVzID0gZ2V0VGlsZXMoKTtcbiAgICBsZXQgdGlsZSA9IHRpbGVzW3RpbGV4XVt0aWxleV07XG4gICAgdGlsZSsrO1xuICAgIGlmICh0aWxlPT0yMCl7XG4gICAgICAgIHRpbGUgPSAwO1xuICAgIH1cbiAgICBtb2RpZnlUaWxlKHRpbGV4LHRpbGV5LHRpbGUpO1xufVxuXG5leHBvcnQge2luaXRNb3VzZSwgZ2V0TW91c2VQb3MsIGJhY2tncm91bmRDaGFuZ2V9OyIsImltcG9ydCB7cmVuZGVyLCBjcmVhdGUsIGFkZENsYXNzLCByZW1DbGFzcywgZmluZCwgd3JpdGUsIGRldGVjdCwgc3R5bGUsIGF0dHJpYnN9IGZyb20gXCIuLi9zY3JpcHRzL1FvTFwiXG5pbXBvcnQgeyBhbmltYXRlU0NzIH0gZnJvbSBcIi4uL3NjcmlwdHMvU0NGdW5jc1wiO1xuaW1wb3J0IHsgaW5pdE1vdXNlIH0gZnJvbSBcIi4uL3NjcmlwdHMvY2Fudk1vdXNlRnVuY3NcIjtcbmltcG9ydCB7aW5pdEJhY2tncm91bmQsIHVwZGF0ZUJhY2tncm91bmQsIGNsZWFyfSBmcm9tIFwiLi4vc2NyaXB0cy9jYW52YXNGdW5jc1wiO1xuXG5sZXQgc3RvcCA9IGZhbHNlO1xubGV0IGZyYW1lcyA9IDA7XG5jb25zdCBmcHMgPSAzMFxuY29uc3QgbXNQZXJGcmFtZSA9IDEwMDAgLyBmcHNcbmxldCBtc1ByZXYgPSB3aW5kb3cucGVyZm9ybWFuY2Uubm93KClcblxuY29uc3QgY2FudmFzID0gKHdpZHRoLCBoZWlnaHQsIGxheWVyKSA9PiB7XG4gICAgY29uc3QgY2FudiA9IGNyZWF0ZShcImNhbnZhc1wiKTtcbiAgICBhZGRDbGFzcyhjYW52LCBbXCJnYW1lLWNhbnZhc1wiLCBgbGF5ZXItJHtsYXllcn1gXSk7XG4gICAgYXR0cmlicyhjYW52LCBbXCJ3aWR0aFwiLCBcImhlaWdodFwiXSwgW2Ake3dpZHRofXB4YCxgJHtoZWlnaHR9cHhgXSk7XG5cbiAgICBzdHlsZShjYW52LCBgXG4gICAgICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICAgIGApO1xuICAgIGNvbnN0IGN0eCA9IGNhbnYuZ2V0Q29udGV4dChcIjJkXCIpO1xuXG4gICAgaW5pdE1vdXNlKGNhbnYpO1xuICAgIFxuICAgIGlmIChsYXllcj09PTApXG4gICAge1xuICAgICAgICBpbml0QmFja2dyb3VuZChjdHgsIHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cblxuICAgIHJldHVybiBjYW52O1xufVxuXG5mdW5jdGlvbiBydW5FdmVyeXRoaW5nKGNhbnZhc0xpc3QsIHdpZHRoLCBoZWlnaHQpe1xuICAgIGNvbnN0IGFuaW1hdGVFdmVyeXRoaW5nID0gKCkgPT4ge1xuXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZUV2ZXJ5dGhpbmcpO1xuXG4gICAgICAgIGNvbnN0IG1zTm93ID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICBjb25zdCBtc1Bhc3NlZCA9IG1zTm93IC0gbXNQcmV2O1xuXG4gICAgICAgIGlmIChtc1Bhc3NlZCA8IG1zUGVyRnJhbWUpIHJldHVyblxuXG4gICAgICAgIGNvbnN0IGV4Y2Vzc1RpbWUgPSBtc1Bhc3NlZCAlIG1zUGVyRnJhbWVcbiAgICAgICAgbXNQcmV2ID0gbXNOb3cgLSBleGNlc3NUaW1lXG5cbiAgICAgICAgLy8gUHV0IHlvdXIgZHJhd2luZyBjb2RlIGhlcmVcbiAgICAgICAgY2FudmFzTGlzdC5tYXAoKGNhbnZhcyxpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgICAgIC8vY2xlYXIoY3R4LCB3aWR0aCwgaGVpZ2h0KVxuICAgICAgICAgICAgZnJhbWVzKys7XG4gICAgICAgICAgICBpZiAoaW5kZXg9PT0wKXtcbiAgICAgICAgICAgICAgICB1cGRhdGVCYWNrZ3JvdW5kKGN0eCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgLy9pbXBsZW1lbnQgc29tZXdheSBzbyB0aGF0IGl0IHdvbnQgdXBkYXRlIHVubGVzcyB0aGVyZSBpcyBhIGNoYW5nZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBhbmltYXRlU0NzKCk7XG4gICAgXG4gICAgfVxuXG4gICAgYW5pbWF0ZUV2ZXJ5dGhpbmcoKTtcbn1cblxuXG5cbmV4cG9ydCB7Y2FudmFzLCBydW5FdmVyeXRoaW5nfSIsImltcG9ydCB7cmVuZGVyLCBjcmVhdGUsIGFkZENsYXNzLCByZW1DbGFzcywgZmluZCwgd3JpdGUsIGRldGVjdCxzdHlsZX0gZnJvbSBcIi4uL3NjcmlwdHMvUW9MXCJcblxuY29uc3Qgd3JhcHBlciA9ICgpID0+eyAgIFxuICAgIGNvbnN0IHJhcHBlciA9IGNyZWF0ZShcImRpdlwiKTtcbiAgICBhZGRDbGFzcyhyYXBwZXIsIFtcIndyYXBwZXJcIl0pO1xuICAgIHN0eWxlKHJhcHBlcixgXG4gICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICAgICAgICBib3JkZXI6IDVweCBzb2xpZCBkYXJrc2xhdGVncmF5O1xuICAgICAgICB3aWR0aDo2NDBweDtcbiAgICAgICAgaGVpZ2h0OjY0MHB4O1xuICAgIGApXG4gICAgcmVuZGVyKGRvY3VtZW50LmJvZHksIHJhcHBlcik7XG4gICAgcmV0dXJuIHJhcHBlcjtcbn1cblxuY29uc3QgbWluaVdyYXBwZXIgPSAoKSA9PntcbiAgICBjb25zdCByYXBwZXIgPSBjcmVhdGUoXCJkaXZcIik7XG4gICAgYWRkQ2xhc3MocmFwcGVyLCBbXCJtaW5pLXdyYXBwZXJcIl0pO1xuICAgIHN0eWxlKHJhcHBlcixgXG4gICAgICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwMDAwO1xuICAgICAgICBib3JkZXI6IDVweCBzb2xpZCBkYXJrc2xhdGVncmF5O1xuICAgICAgICB3aWR0aDogNjQwcHg7XG4gICAgICAgIGRpc3BsYXk6ZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0OyBcbiAgICAgICAgaGVpZ2h0OjY0cHg7XG4gICAgICAgIGFsaWduLWl0ZW1zOmNlbnRlcjtcbiAgICAgICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICBgKVxuICAgIHJlbmRlcihkb2N1bWVudC5ib2R5LCByYXBwZXIpO1xuICAgIHJldHVybiByYXBwZXI7XG59XG5cbmV4cG9ydCB7d3JhcHBlciwgbWluaVdyYXBwZXJ9OyIsIlxuY29uc3QgdG9vbHMgPSBbXCJNYWduZXRfRHJvbmVcIiwgXCJHdW5uZXJfRHJvbmVcIiwgXCJMaWdodG5pbmdfUm9kX0Ryb25lXCIsIFwiTWlycm9yX0Ryb25lXCIsIFwiQWlyX1N0cmlrZVwiLCBcIk1hY2hpbmVfR3VuXCIsXG4gXCJEcm9uZV9Db250cm9sX0hhY2tcIiwgXCJEcm9uZV9HUFNfSGFja1wiLCBcIlJlY2FsbF9Ecm9uZXNcIiwgXCJSZXBhaXJfUGFja2FnZV9Ecm9uZVwiXVxuXG5jb25zdCBkZXNjcmlwdGlvbnMgPSBbYFxuQXR0cmFjdHMgbWV0YWwgdG93YXJkcyBpdFxuXG4tIFBsYWNlYWJsZSAmIGRyYWdnYWJsZVxuLSBPbmx5IG9uZSBvbiB0aGUgZmllbGQgYXQgYSB0aW1lXG5cbi0gQ29vbGRvd246IG5vbmVcbmAsYFxuU2hvb3RzIHRoaW5ncyBpbiBhIHNtYWxsIHJhZGl1c1xuXG4tIFBsYWNlYWJsZSAmIGRyYWdnYWJsZVxuLSBPbmx5IG9uZSBvbiB0aGUgZmllbGQgYXQgYSB0aW1lXG5cbi0gQW1tbzogMTAgYnVsbGV0c1xuLSBEYW1hZ2U6IGxvd1xuLSBDb29sZG93bjogMjAgc2Vjb25kc1xuYCxgXG5BYnNvcmJzIGxpZ2h0bmluZyBpbiBhIHNtYWxsIHJhZGl1c1xuXG4tIFBsYWNlYWJsZSAmIGRyYWdnYWJsZVxuLSBPbmx5IG9uZSBvbiB0aGUgZmllbGQgYXQgYSB0aW1lXG5cbi0gU2hhdHRlcnMgYWZ0ZXIgMyBsaWdodG5pbmcgc3RyaWtlc1xuLSBDb29sZG93bjogMjAgc2Vjb25kc1xuYCxgXG5EZWZsZWN0cyBsYXNlcnMgdGhhdCBoaXQgaXQsXG5jbGljayB0byBjaGFuZ2UgZGVmbGVjdGlvbiBkaXJlY3Rpb25cblxuLSBQbGFjZWFibGUgJiBkcmFnZ2FibGVcbi0gT25seSBvbmUgb24gdGhlIGZpZWxkIGF0IGEgdGltZVxuXG4tIFNoYXR0ZXJzIGFmdGVyIDMgbGFzZXIgZGVmbGVjdGlvbnNcbi0gQ29vbGRvd246IDIwIHNlY29uZHNcbmAsYFxuQ2FsbCBhIG1pc3NpbGUgdG8gYW55IHBvaW50IG9uIHRoZSBmaWVsZFxuXG4tIEFtbW86IDEgbWlzc2lsZVxuLSBEYW1hZ2U6IGhpZ2hcbi0gQ29vbGRvd246IDEwIHNlY29uZHNcbmAsYFxuRmlyZXMgc2hvdHMgYXQgYW55IHBvaW50IG9uIHRoZSBmaWVsZCxcbm1hY2hpbmUgb3ZlcmhlYXRzIGFmdGVyIDIwIHNob3RzXG5cbi0gQW1tbzogMjAgYnVsbGV0c1xuLSBGaXJlcmF0ZTogNCBidWxsZXRzIHBlciBzZWNvbmRcbi0gQ29vbGRvd246IDIwIHNlY29uZHNcbmAsYFxuTWFrZXMgZHJvbmVzIG1vdmVhYmxlIHRlbXBvcmFyaWx5LFxuZHJhZyBvbnRvIGRlc2lyZWQgZHJvbmUgYW5kXG5kcmFnIGFmZmVjdGVkIGRyb25lIHRvIG1vdmUgaXRcblxuLSBEdXJhdGlvbjogMTAgc2Vjb25kc1xuLSBDb29sZG93bjogMzAgc2Vjb25kc1xuYCxgXG5Mb2NrcyBhIGRyb25lJ3MgcG9zaXRpb24gdGVtcG9yYXJpbHksXG5kcmFnIG9udG8gZGVzaXJlZCBkcm9uZVxuXG4tIER1cmF0aW9uOiAxMCBzZWNvbmRzXG4tIENvb2xkb3duOiAzMCBzZWNvbmRzXG5gLGBcblJlbW92ZSBhbGwgcGxhY2VkIGRyb25lcyBmcm9tIGZpZWxkLlxuXG4tIENvb2xkb3duOiBub25lXG5gLGBcbldoZW4gbmVhciBwYWNrYWdlIGRyb25lLCByZXN0b3Jlc1xuMiBoZWFsdGggcGVyIDUgc2Vjb25kcy5cblxuLSBDb29sZG93bjogMzAgc2Vjb25kc1xuYF1cblxuZXhwb3J0IHt0b29scywgZGVzY3JpcHRpb25zfSIsImltcG9ydCB7cmVuZGVyLCByZW1vdmUsIGNyZWF0ZSwgYWRkQ2xhc3MsIGhhc0NsYXNzLCByZW1DbGFzcywgZmluZCwgd3JpdGUsIGRldGVjdCwgdW5kZXRlY3QsIHN0eWxlLCBhdHRyaWJzLCBpc0VsZW1lbnR9IGZyb20gXCIuLi9zY3JpcHRzL1FvTFwiXG5pbXBvcnQgeyBkZXNjcmlwdGlvbnMgfSBmcm9tIFwiLi4vc2NyaXB0cy9kYXRhXCI7XG5cbmxldCBocCA9IDIwO1xuXG5jb25zdCBpbml0SW5mb1NjcmVlbiA9ICgpID0+e1xuICAgIGNvbnN0IGluZm8gPSBjcmVhdGUoXCJkaXZcIik7XG4gICAgYWRkQ2xhc3MoaW5mbywgW1wiaW5mb1NjcmVlblwiXSk7XG4gICAgc3R5bGUoaW5mbywgYFxuICAgICAgICB3aWR0aDogMjUwcHg7XG4gICAgICAgIGhlaWdodDogNjQwcHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMyNDI0MjQ7XG4gICAgICAgIGJvcmRlcjogNXB4IHNvbGlkIGRhcmtzbGF0ZWdyYXk7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgbGVmdDogNjUwcHg7XG4gICAgICAgIHRvcDotNXB4O1xuICAgICAgICBjb2xvcjp3aGl0ZTtcbiAgICAgICAgZm9udC1mYW1pbHk6bXVucm87XG4gICAgYClcblxuICAgIHJlbmRlcihpbmZvLCBpbmZvVG9wKCkpO1xuICAgIHJlbmRlcihpbmZvLCBpbmZvQm90dG9tKCkpO1xuICAgIHJlbmRlcihmaW5kKFwiLndyYXBwZXJcIiksIGhlYWx0aEJhcigpKTtcbiAgICByZW5kZXIoZmluZChcIi53cmFwcGVyXCIpLCBpbmZvKTtcbn1cblxuY29uc3QgaW5mb1RvcCA9ICgpID0+e1xuICAgIGNvbnN0IGluZm8gPSBjcmVhdGUoXCJkaXZcIik7XG4gICAgYWRkQ2xhc3MoaW5mbywgW1wiaW5mb1RvcFwiXSk7XG4gICAgc3R5bGUoaW5mbywgYFxuICAgICAgICBwYWRkaW5nOiA1cHg7XG4gICAgYClcblxuICAgIHJldHVybihpbmZvKTtcbn1cblxuY29uc3QgaW5mb0JvdHRvbSA9ICgpID0+e1xuICAgIGNvbnN0IGluZm8gPSBjcmVhdGUoXCJkaXZcIik7XG4gICAgYWRkQ2xhc3MoaW5mbywgW1wiaW5mb0JvdHRvbVwiXSk7XG5cbiAgICByZXR1cm4oaW5mbyk7XG59XG5cbmNvbnN0IGhlYWx0aEJhciA9ICgpID0+IHtcbiAgICBjb25zdCBoZWFsdGggPSBjcmVhdGUoXCJkaXZcIik7XG4gICAgY29uc3Qgd2lkdGggPSAzMjtcbiAgICBhZGRDbGFzcyhoZWFsdGgsIFtcImhlYWx0aGJhclwiXSk7XG4gICAgc3R5bGUoaGVhbHRoLCBgXG4gICAgICAgIHdpZHRoOiAke3dpZHRofXB4O1xuICAgICAgICBoZWlnaHQ6IDY0MHB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjQyNDI0O1xuICAgICAgICBib3JkZXI6IDVweCBzb2xpZCBkYXJrc2xhdGVncmF5O1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGxlZnQ6IC0ke3dpZHRoKzIwfXB4O1xuICAgICAgICB0b3A6LTVweDtcbiAgICAgICAgY29sb3I6d2hpdGU7XG4gICAgICAgIGZvbnQtZmFtaWx5Om11bnJvO1xuICAgICAgICBkaXNwbGF5OmZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgYClcblxuICAgIHNldEhlYWx0aChoZWFsdGgpO1xuXG4gICAgcmV0dXJuIGhlYWx0aDtcbn1cblxuY29uc3Qgc2V0SGVhbHRoID0gKGhlYWx0aCkgPT57XG4gICAgbGV0IG15aHA7XG4gICAgbGV0IGhlYWx0aGJhcjtcbiAgICBpZihmaW5kKFwiLmhlYWx0aGJhclwiKSA9PT0gbnVsbCkge215aHAgPSBocDsgaGVhbHRoYmFyID0gaGVhbHRofVxuICAgIGVsc2UgaWYgKHR5cGVvZiBoZWFsdGggPT09ICdudW1iZXInKSB7XG4gICAgICAgIG15aHAgPSBoZWFsdGg7IFxuICAgICAgICBocCA9IG15aHA7XG4gICAgICAgIGhlYWx0aGJhciA9IGZpbmQoXCIuaGVhbHRoYmFyXCIpOyBcbiAgICAgICAgaGVhbHRoYmFyLnRleHRDb250ZW50ID0gJyc7XG4gICAgfVxuICAgIFxuICAgIGZvcihsZXQgaSA9MDsgaTxteWhwOyBpKyspe1xuICAgICAgICBjb25zdCBudW0gPSAyMC1pO1xuICAgICAgICBjb25zdCBzdGFydGh1ZSA9IDM1MDtcbiAgICAgICAgY29uc3QgZW5kaHVlID0gMTEwICsgMzYwXG4gICAgICAgIGNvbnN0IGh1ZSA9IE1hdGguZmxvb3IoKGVuZGh1ZSAtIHN0YXJ0aHVlKSoobnVtLzIwKStzdGFydGh1ZSlcbiAgICAgICAgY29uc3QgaGVhcnQgPSBjcmVhdGUoXCJkaXZcIik7XG4gICAgICAgIGhlYXJ0LmlkID0gYGhlYXJ0LSR7bnVtfWA7XG4gICAgICAgIHN0eWxlKGhlYXJ0LCBgXG4gICAgICAgICAgICBoZWlnaHQ6MjhweDtcbiAgICAgICAgICAgIHdpZHRoOiAyOHB4O1xuICAgICAgICAgICAgbWFyZ2luOiAycHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woJHtodWV9LCA3MCUsIDYyJSk7XG4gICAgICAgIGApXG4gICAgICAgIHJlbmRlcihoZWFsdGhiYXIsIGhlYXJ0KVxuICAgIH1cbn1cblxuY29uc3QgZGlzcGxheUluZm8gPSAoY29kZSwgcmF3aWNvbikgPT4ge1xuICAgIGNvbnN0IGNsb25lZCA9IHJhd2ljb24uY2xvbmVOb2RlKGZhbHNlKTtcbiAgICBjbG9uZWQuaWQgPSBcImluZm9QaWNcIlxuICAgIHJlbUNsYXNzKGNsb25lZCwgW1wiY2FudmFzLWljb25cIl0pXG4gICAgYXR0cmlicyhjbG9uZWQsIFtcIndpZHRoXCIsIFwiaGVpZ2h0XCJdLCBbYCR7NjR9cHhgLGAkezY0fXB4YF0pO1xuICAgIHN0eWxlKGNsb25lZCwgYFxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDVweDtcbiAgICAgICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgYClcblxuICAgIGNvbnN0IGN0eDIgPSBjbG9uZWQuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIGN0eDIuaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgaW1nLnNyYyA9IGNsb25lZC5kYXRhc2V0LmltZ3NyYztcbiAgICBjb25zdCBpbmRleCA9IGNsb25lZC5kYXRhc2V0LmluZGV4O1xuXG4gICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjdHgyLmNsZWFyUmVjdCgwLDAsNjQsNjQpO1xuICAgICAgICBjdHgyLmRyYXdJbWFnZShpbWcsIDE2KmluZGV4LCAwLCAxNiwgMTYsIDAsIDAsIDY0LDY0KTtcbiAgICB9XG4gICAgY29uc3QgaW5mbyA9IGZpbmQoXCIuaW5mb1RvcFwiKTtcbiAgICBpbmZvLnRleHRDb250ZW50ID0gJyc7XG5cbiAgICBjb25zdCB0aXRsZSA9IGNyZWF0ZShcImRpdlwiKTtcbiAgICBhZGRDbGFzcyh0aXRsZSwgW1wiaW5mb1RpdGxlXCJdKTtcbiAgICBsZXQgdGl0ID0gY29kZS5yZXBsYWNlKFwiX1wiLCBcIiBcIik7XG4gICAgdGl0ID0gdGl0LnJlcGxhY2UoXCJfXCIsIFwiIFwiKVxuICAgIHdyaXRlKHRpdGxlLCB0aXQpO1xuICAgIHN0eWxlKHRpdGxlLCBgXG4gICAgICAgIHBhZGRpbmctbGVmdDogNXB4O1xuICAgICAgICBjb2xvcjp3aGl0ZTtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdtdW5ybyc7XG4gICAgICAgIGZvbnQtc2l6ZTogMzBweDtcbiAgICBgKVxuXG4gICAgY29uc3QgdGV4dCA9IGNyZWF0ZShcImRpdlwiKTtcbiAgICBhZGRDbGFzcyh0ZXh0LCBbXCJpbmZvVGV4dFwiXSk7XG4gICAgc3R5bGUodGV4dCwgYFxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDVweDtcbiAgICAgICAgY29sb3I6d2hpdGU7XG4gICAgICAgIGZvbnQtZmFtaWx5OiAnbXVucm8nO1xuICAgICAgICBmb250LXNpemU6IDE1cHg7XG4gICAgICAgIHdoaXRlLXNwYWNlOiBwcmU7XG4gICAgYClcblxuICAgIHdyaXRlKHRleHQsIGRlc2NyaXB0aW9uc1tpbmRleF0pXG5cbiAgICByZW5kZXIoaW5mbywgdGl0bGUpO1xuICAgIHJlbmRlcihpbmZvLCBjbG9uZWQpO1xuICAgIHJlbmRlcihpbmZvLCB0ZXh0KTtcbn1cblxuZXhwb3J0IHtpbml0SW5mb1NjcmVlbiwgZGlzcGxheUluZm8sIHNldEhlYWx0aH07IiwiaW1wb3J0IHtyZW5kZXIsIHJlbW92ZSwgY3JlYXRlLCBhZGRDbGFzcywgcmVtQ2xhc3MsIGZpbmQsIHdyaXRlLCBkZXRlY3QsIHVuZGV0ZWN0LCBzdHlsZSwgYXR0cmlic30gZnJvbSBcIi4uL3NjcmlwdHMvUW9MXCJcbmltcG9ydCBDYW4gZnJvbSBcIi4uL2ltYWdlcy9jYW4ucG5nXCJcbmltcG9ydCBDb2luIGZyb20gXCIuLi9pbWFnZXMvY29pbi5wbmdcIlxuaW1wb3J0IGRlY29yIGZyb20gXCIuLi9pbWFnZXMvZGVjb3IucG5nXCJcbmltcG9ydCB7IGJhY2tncm91bmRDaGFuZ2UgfSBmcm9tIFwiLi4vc2NyaXB0cy9jYW52TW91c2VGdW5jc1wiO1xuaW1wb3J0IHsgc3ByaXRlQ2FudmFzIH0gZnJvbSBcIi4vc3ByaXRlY2FudmFzXCI7XG5pbXBvcnQgeyBkaXNwbGF5SW5mbyB9IGZyb20gXCIuL2luZm9TY3JlZW5cIjtcbmltcG9ydCBpY29ucyBmcm9tIFwiLi4vaW1hZ2VzL2ljb25zLnBuZ1wiXG5pbXBvcnQgeyB0b29scyB9IGZyb20gXCIuLi9zY3JpcHRzL2RhdGFcIjtcblxubGV0IG1pbmlMaXN0ID0gW107XG5cbmZ1bmN0aW9uIG1pbmlDYW52YXMobmFtZSwgaW1nLCBpbWdzcmMsIGluZGV4KXtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICB0aGlzLmltZyA9IGltZztcbiAgICB0aGlzLmltZ3NyYyA9IGltZ3NyYztcbiAgICB0aGlzLmN1cnJlbnRGcmFtZSA9IDA7XG4gICAgdGhpcy5jYW52ZWxlO1xuICAgIHRoaXMuaW1nZWxlO1xuXG4gICAgdGhpcy5pbml0ID0gKCkgPT57XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgdGhpcy5hZGRlZGxlZnQgPSBtaW5pTGlzdC5sZW5ndGgqNjQ7XG5cbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgY29uc3QgY2FudiA9IGNyZWF0ZShcImNhbnZhc1wiKTtcbiAgICAgICAgYWRkQ2xhc3MoY2FudiwgW1wibWluaS1jYW52YXNcIiwgYCR7bmFtZX1gXSk7XG4gICAgICAgIGF0dHJpYnMoY2FudiwgW1wid2lkdGhcIiwgXCJoZWlnaHRcIl0sIFtgJHs2NH1weGAsYCR7NjR9cHhgXSk7XG5cbiAgICAgICAgc3R5bGUoY2FudiwgYFxuICAgICAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgICAgICBtYXJnaW46IDUgYXV0bztcbiAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOm5vbmU7XG4gICAgICAgIGApO1xuICAgICAgICBjb25zdCBjdHggPSBjYW52LmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgY29uc3QgaW1nID0gdGhpcy5pbWc7XG5cbiAgICAgICAgY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjdHguY2xlYXJSZWN0KDAsMCw2NCw2NCk7XG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgMTYqaW5kZXgsIDAsIDE2LCAxNiwgMCwgMCwgNjQsNjQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYW52ZWxlID0gY2FudjtcbiAgICAgICAgdGhpcy5jdHggPSBjdHg7XG5cbiAgICAgICAgY29uc3QgaW1nZWxlID0gY3JlYXRlKFwiY2FudmFzXCIpO1xuICAgICAgICBhZGRDbGFzcyhpbWdlbGUsIFtcImNhbnZhcy1pY29uXCJdKVxuICAgICAgICBhdHRyaWJzKGltZ2VsZSwgW1wid2lkdGhcIiwgXCJoZWlnaHRcIiwgXCJpZFwiXSwgW2AkezY0fXB4YCxgJHs2NH1weGAsIG5hbWVdKTtcbiAgICAgICAgc3R5bGUoaW1nZWxlLCBgXG5cbiAgICAgICAgYClcblxuICAgICAgICBjb25zdCBjdHgyID0gaW1nZWxlLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgY3R4Mi5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBmYWxzZTtcblxuICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjdHgyLmNsZWFyUmVjdCgwLDAsNjQsNjQpO1xuICAgICAgICAgICAgY3R4Mi5kcmF3SW1hZ2UoaW1nLCAxNippbmRleCwgMCwgMTYsIDE2LCAwLCAwLCA2NCw2NCk7XG4gICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICBpbWdlbGUuZGF0YXNldC5pbWdzcmMgPSB0aGlzLmltZ3NyYztcbiAgICAgICAgaW1nZWxlLmRhdGFzZXQuaW5kZXggPSBpbmRleDtcblxuICAgICAgICB0aGlzLmltZ2VsZSA9IGltZ2VsZTtcblxuICAgICAgICB0aGlzLmluaXRNb3VzZShjYW52LCBpbWdlbGUpO1xuXG4gICAgICAgIHJldHVybiBpbWdlbGU7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0TW91c2UgPSAoY2FudiwgaW1nZWxlKSA9PiB7XG4gICAgICAgIGNvbnN0IGN0eCA9IGNhbnYuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICBsZXQgbW91c2VQb3M7XG4gICAgICAgIGNvbnN0IGJhY2tjYW52ID0gZmluZChcIi53cmFwcGVyXCIpO1xuICAgICAgICBsZXQgaW50ZXJ2YWxfbGlzdCA9IFtdO1xuICAgICAgICBsZXQgbW91c2VQb3MyO1xuICAgICAgICBsZXQgc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICAgICAgbGV0IGN1ckZyYSA9IHRoaXMuY3VycmVudEZyYW1lO1xuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmluZGV4O1xuXG4gICAgICAgIGNvbnN0IGhvdmVyRnVuYyA9IChldnQpID0+IHtcbiAgICAgICAgICAgIGlmIChpbnRlcnZhbF9saXN0Lmxlbmd0aCA9PT0gMCl7XG4gICAgICAgICAgICAgICAgaW50ZXJ2YWxfbGlzdC5wdXNoKHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICB9LCAyNTApKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVwZGF0ZURyYWcgPSAoZXZ0KSA9PntcbiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBjb25zdCByZWN0ID0gZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlY3QyID0gYmFja2NhbnYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBtb3VzZVBvczIgPSB7XG4gICAgICAgICAgICAgICAgeDogZXZ0LmNsaWVudFggLSByZWN0Mi5sZWZ0LFxuICAgICAgICAgICAgICAgIHk6IGV2dC5jbGllbnRZIC0gcmVjdDIudG9wXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbW91c2VQb3MgPSB7XG4gICAgICAgICAgICAgICAgeDogZXZ0LmNsaWVudFggLSByZWN0LmxlZnQsXG4gICAgICAgICAgICAgICAgeTogZXZ0LmNsaWVudFkgLSByZWN0LnRvcFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjYW52LnN0eWxlLnRvcCA9IG1vdXNlUG9zLnkgLTMyICtcInB4XCI7XG4gICAgICAgICAgICBjYW52LnN0eWxlLmxlZnQgPSBtb3VzZVBvcy54IC0zMiArIFwicHhcIjtcblxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbW91c2VEb3duRnVuYyA9IChldnQpID0+IHtcbiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOyAgXG4gICAgICAgICAgICBjYW52LnN0eWxlLnRvcCA9XCItMTAwMHB4XCI7XG4gICAgICAgICAgICBjYW52LnN0eWxlLmxlZnQgPSBcIi0xMDAwcHhcIjtcbiAgICAgICAgICAgIHJlbmRlcihkb2N1bWVudC5ib2R5LGNhbnYpO1xuICAgICAgICAgICAgZGV0ZWN0KGRvY3VtZW50LmJvZHksIFwibW91c2Vtb3ZlXCIsIHVwZGF0ZURyYWcpXG4gICAgICAgICAgICBkZXRlY3QoYmFja2NhbnYsIFwibW91c2VlbnRlclwiLCBob3ZlckZ1bmMpXG4gICAgICAgICAgICBjdHguY2xlYXJSZWN0KDAsMCw2NCw2NCk7XG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgaW5kZXgqMTYsIDAsIDE2LCAxNiwgMCwgMCwgNjQsNjQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbW91c2VVcEZ1bmMgPSAoZXZ0KSA9PiB7XG4gICAgICAgICAgICB1bmRldGVjdChkb2N1bWVudC5ib2R5LCBcIm1vdXNlbW92ZVwiLCB1cGRhdGVEcmFnKVxuICAgICAgICAgICAgdW5kZXRlY3QoYmFja2NhbnYsIFwibW91c2VlbnRlclwiLCBob3ZlckZ1bmMpXG4gICAgICAgICAgICBpZiAoaW50ZXJ2YWxfbGlzdC5sZW5ndGghPT0wKXtcbiAgICAgICAgICAgICAgICBpZihuYW1lID09PSBcImNvaW5cIil7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvaW4gPSBzcHJpdGVDYW52YXMoZmluZChcIi53cmFwcGVyXCIpLCBcImNvaW5cIiwgNjQsIENvaW4sIG1vdXNlUG9zMi54LTMyLCBtb3VzZVBvczIueS0zMiwgMCwgdHJ1ZSwgMTIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbF9saXN0WzBdKTtcbiAgICAgICAgICAgIGludGVydmFsX2xpc3QgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGhhc0NoaWxkID0gZmluZChgLm1pbmktY2FudmFzLiR7dGhpcy5uYW1lfWApICE9IG51bGw7XG4gICAgICAgICAgICBpZiAoaGFzQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICByZW1vdmUoZG9jdW1lbnQuYm9keSwgY2Fudik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHguY2xlYXJSZWN0KDAsMCxzaXplLHNpemUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdXBkYXRlSW5mbyA9IChldnQpID0+e1xuICAgICAgICAgICAgZGlzcGxheUluZm8oZXZ0LnRhcmdldC5pZCwgZXZ0LnRhcmdldCk7XG4gICAgICAgIH1cblxuICAgICAgICBkZXRlY3QoaW1nZWxlLCBcIm1vdXNlZG93blwiLCBtb3VzZURvd25GdW5jKTtcbiAgICAgICAgZGV0ZWN0KGRvY3VtZW50LmJvZHksIFwibW91c2V1cFwiLCBtb3VzZVVwRnVuYyk7XG4gICAgICAgIGRldGVjdChpbWdlbGUsIFwibW91c2VlbnRlclwiLCB1cGRhdGVJbmZvKVxuICAgIH0gICAgICAgXG59XG5cbmNvbnN0IGluaXRNaW5pID0gKG5hbWUpID0+IHtcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKVxuICAgIGltZy5zcmMgPSBpY29ucztcbiAgICBjb25zdCBtaW5pID0gbmV3IG1pbmlDYW52YXMobmFtZSwgaW1nLCBpY29ucywgbWluaUxpc3QubGVuZ3RoKVxuICAgIGNvbnN0IG1pbmllbGUgPSBtaW5pLmluaXQoKTtcbiAgICBtaW5pTGlzdC5wdXNoKG1pbmkpO1xuICAgIHJldHVybiBtaW5pZWxlO1xufVxuXG5jb25zdCBpbml0TWluaXMgPSAobWluaVdyYXBwZXIpID0+IHtcbiAgICBcbiAgICB0b29scy5tYXAodG9vbCA9PiByZW5kZXIobWluaVdyYXBwZXIsIGluaXRNaW5pKHRvb2wpKSlcbiAgICBcbn1cblxuZXhwb3J0IHtpbml0TWluaXN9IiwiaW1wb3J0IHtyZW5kZXIsIHJlbW92ZSwgY3JlYXRlLCBhZGRDbGFzcywgaGFzQ2xhc3MsIHJlbUNsYXNzLCBmaW5kLCBmaW5kQWxsLCB3cml0ZSwgZGV0ZWN0LCB1bmRldGVjdCwgc3R5bGUsIGF0dHJpYnN9IGZyb20gXCIuLi9zY3JpcHRzL1FvTFwiXG5cbmNvbnN0IHJlbmRlclNoYWRlciA9IChuYW1lKSA9PiB7XG4gICAgY29uc3Qgc2hhZCA9IGNyZWF0ZShcImRpdlwiKTtcbiAgICBhZGRDbGFzcyhzaGFkLCBbXCJzaGFkZXJcIl0pO1xuICAgIHNoYWQuaWQgPSBuYW1lO1xuICAgIGxldCBleHRyYV9zdHlsZTtcbiAgICBpZiAobmFtZSA9PT0gXCJsaWdodC1zaGFkZXJcIil7XG4gICAgICAgIGV4dHJhX3N0eWxlID0gYFxuICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KDEzNWRlZywgcmdiYSgyMjcsIDI0NSwgNjYsIDAuMyksIHJnYmEoMjMwLCAyMDEsIDE0NywgMC4xKSk7XG4gICAgICAgIGBcbiAgICB9XG4gICAgZWxzZSBpZihuYW1lID09PSBcImRhcmstc2hhZGVyXCIpe1xuICAgICAgICBleHRyYV9zdHlsZSA9IGBcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsIHJnYmEoNTQsIDg4LCAxNjMsIDAuMyksIHJnYmEoOTAsIDc2LCAxMTUsIDAuNikpO1xuICAgICAgICBgXG4gICAgfVxuXG4gICAgc3R5bGUoc2hhZCwgYFxuICAgICAgICBoZWlnaHQ6NjQwcHg7XG4gICAgICAgIHdpZHRoOiA2NDBweDtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAke2V4dHJhX3N0eWxlfVxuICAgIGApO1xuXG4gICAgcmVuZGVyKGZpbmQoXCIuc2hhZHdyYXBcIiksIHNoYWQpO1xufVxuXG5jb25zdCByZW5kZXJMZXZlbCA9IChuYW1lKSA9PntcbiAgICBjb25zdCBzaGFkID0gY3JlYXRlKFwiZGl2XCIpO1xuICAgIGFkZENsYXNzKHNoYWQsIFtcImxldmVsXCIsIFwic2hhZGVyXCJdKTtcbiAgICBzaGFkLmlkID0gbmFtZTtcbiAgICBcbiAgICBzdHlsZShzaGFkLCBgXG4gICAgICAgIGhlaWdodDo2NDBweDtcbiAgICAgICAgd2lkdGg6IDY0MHB4O1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYCk7XG5cbiAgICBpZiAobmFtZSA9PT0gXCJsZXZlbC0xXCIpe1xuICAgICAgICByZW5kZXIoc2hhZCwgcGF0aEJsb2NrKDAsIDI1NiwgNjQwLCA2NCkpO1xuICAgIH1cbiAgICBlbHNlIGlmKG5hbWUgPT09IFwibGV2ZWwtMlwiKXtcbiAgICAgICAgcmVuZGVyKHNoYWQsIHBhdGhCbG9jaygwLCAxMjgsIDY0MCwgNjQpKTtcbiAgICB9XG5cbiAgICByZW5kZXIoZmluZChcIi5zaGFkd3JhcFwiKSwgc2hhZCk7XG59XG5cbmNvbnN0IHJlbW92ZVNoYWRlcnMgPSAoKSA9PntcbiAgICBjb25zdCBzaGFkbGlzdCA9IGZpbmRBbGwoXCIuc2hhZGVyXCIpO1xuICAgIGNvbnN0IHNoYWR3cmFwID0gZmluZChcIi5zaGFkd3JhcFwiKTtcblxuICAgIHNoYWRsaXN0LmZvckVhY2goc2hhZCA9PiB7cmVtb3ZlKHNoYWR3cmFwLHNoYWQpfSk7ICAgIFxufVxuXG5jb25zdCBwYXRoQmxvY2sgPSAoeCx5LHdpZHRoLGhlaWdodCkgPT4ge1xuICAgIGNvbnN0IHBhdGggPSBjcmVhdGUoXCJkaXZcIik7XG4gICAgYWRkQ2xhc3MocGF0aCwgW1wicGF0aGJsb2NrXCJdKTtcbiAgICBzdHlsZShwYXRoLCBgXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjQ1LCA2NiwgNjYsIDAuNSk7XG4gICAgICAgIGxlZnQ6ICR7eH1weDtcbiAgICAgICAgdG9wOiAke3l9cHg7XG4gICAgICAgIGhlaWdodDogJHtoZWlnaHR9cHg7XG4gICAgICAgIHdpZHRoOiAke3dpZHRofXB4O1xuICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgICBgKVxuXG4gICAgcmV0dXJuIHBhdGg7XG59XG5cbmNvbnN0IGluaXRTaGFkZXJzID0gKHdyYXBwZXIpID0+IHtcbiAgICBjb25zdCBzaGFkd3JhcCA9IGNyZWF0ZShcImRpdlwiKTtcbiAgICBhZGRDbGFzcyhzaGFkd3JhcCwgW1wic2hhZHdyYXBcIl0pO1xuICAgIHN0eWxlKHNoYWR3cmFwLCBgXG4gICAgICAgIGhlaWdodDo2NDBweDtcbiAgICAgICAgd2lkdGg6IDY0MHB4O1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYCk7XG5cbiAgICByZW5kZXIod3JhcHBlciwgc2hhZHdyYXApO1xufVxuXG5leHBvcnQge2luaXRTaGFkZXJzLCByZW5kZXJTaGFkZXIsIHJlbmRlckxldmVsLCByZW1vdmVTaGFkZXJzfSIsImltcG9ydCB7cmVuZGVyLCByZW1vdmUsIGNyZWF0ZSwgYWRkQ2xhc3MsIHJlbUNsYXNzLCBmaW5kLCB3cml0ZSwgZGV0ZWN0LCB1bmRldGVjdCwgc3R5bGUsIGhhc0NsYXNzfSBmcm9tIFwiLi4vc2NyaXB0cy9Rb0xcIlxuaW1wb3J0IGJ1dHRvbnMgZnJvbSBcIi4uL2ltYWdlcy9CdXR0b25zX3VwZGF0ZWQucG5nXCJcbmltcG9ydCB7IHRvZ2dsZVByb21wdCB9IGZyb20gXCIuL3Byb21wdHNcIjtcbmltcG9ydCB7IGNvaW5fbGlzdCwgZGVzdHJveVNDLCBkcmF3U0MsIG1vdmVUb3dhcmRzLCBzZXRTaG93LCB0ZWxlcG9ydCB9IGZyb20gXCIuL3Nwcml0ZWNhbnZhc1wiO1xuaW1wb3J0IHsgcmVuZGVyU2hhZGVyLCByZW1vdmVTaGFkZXJzLCByZW5kZXJMZXZlbCB9IGZyb20gXCIuL3NoYWRlcnNcIjtcblxuY29uc3QgYnV0U2l6ZSA9IDMyO1xubGV0IGJ1dE92O1xubGV0IHBvaW50ZXIgPSBmYWxzZTtcbmxldCBwb2ludFRpbWUgPSBbXTtcbmxldCBiZyA9IC0xO1xuXG5jb25zdCBidXR0b25PdmVybGF5ID0gKHdpZHRoLCBoZWlnaHQpID0+e1xuICAgIGJ1dE92ID0gY3JlYXRlKFwiZGl2XCIpO1xuICAgIGFkZENsYXNzKGJ1dE92LCBbJ2J1dHRvbi1vdmVybGF5J10pO1xuICAgIHN0eWxlKGJ1dE92LCBgXG4gICAgICAgIG1pbi1oZWlnaHQ6ICR7aGVpZ2h0fTtcbiAgICAgICAgbWluLXdpZHRoOiAke3dpZHRofTtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGApXG5cbiAgICBnZW5lcmF0ZUJ1dHRvbnMoYnV0T3YpO1xuXG4gICAgcmV0dXJuIGJ1dE92O1xufVxuXG5jb25zdCBnZW5lcmF0ZUJ1dHRvbnMgPSAoYnV0T3YpID0+IHtcbiAgICByZW5kZXIoYnV0T3YsIEJ1dHRvbihcInByb21wdGJ1dC0xXCIsIDIsIHRvZ2dsZVByb21wdCwgMTYsIDE2KSlcbiAgICByZW5kZXIoYnV0T3YsIEJ1dHRvbihcInNoYWtlclwiLCAzLCB0b2dnbGVTaGFrZSwgMTYsIDgwKSlcbiAgICByZW5kZXIoYnV0T3YsIEJ1dHRvbihcInBvaW50ZXJcIiwgNywgdG9nZ2xlUG9pbnRlciwgMTYsIDE0NCkpXG4gICAgcmVuZGVyKGJ1dE92LCBCdXR0b24oXCJjaGFuZ2ViZ1wiLCA4LCBjaGFuZ2VCYWNrZ3JvdW5kLCAxNiwgMjA4KSlcbn1cblxuY29uc3QgQnV0dG9uID0gKG5hbWUsIHNwcml0ZW51bSwgZnVuYywgeCwgeSkgPT57XG4gICAgY29uc3QgYnV0dG9uID0gY3JlYXRlKFwiZGl2XCIpO1xuICAgIGFkZENsYXNzKGJ1dHRvbiwgW1wiYnV0dG9uXCIsIG5hbWVdKTtcbiAgICBidXR0b24uaWQgPSBuYW1lO1xuICAgICAgICBzdHlsZShidXR0b24sIGBcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgIGxlZnQ6JHt4fXB4O1xuICAgICAgICAgICAgdG9wOiAke3l9cHg7XG4gICAgICAgICAgICB3aWR0aDogJHtidXRTaXplfXB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAke2J1dFNpemV9cHg7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoJHtidXR0b25zfSkgLSR7c3ByaXRlbnVtKmJ1dFNpemV9cHggMDtcbiAgICAgICAgYCk7XG5cbiAgICBkZXRlY3QoYnV0dG9uLCBcImNsaWNrXCIsIGZ1bmMpO1xuICAgIFxuICAgIHJldHVybiBidXR0b247XG59XG5cbmNvbnN0IHRvZ2dsZVNoYWtlID0gKGUpID0+IHtcbiAgICBjb25zdCBwcm9tcHRidXQgPSBmaW5kKFwiI3Byb21wdGJ1dC0xXCIpO1xuICAgIGlmIChoYXNDbGFzcyhwcm9tcHRidXQsIFwidmlicmF0ZVwiKSl7XG4gICAgICAgIHJlbUNsYXNzKHByb21wdGJ1dCwgW1widmlicmF0ZVwiXSk7XG4gICAgfVxuICAgIHNldFRpbWVvdXQoKCkgPT4gYWRkQ2xhc3MocHJvbXB0YnV0LCBbXCJ2aWJyYXRlXCJdKSwgMTAwKTtcblxuICAgIGxldCBpO1xuICAgIGZvciAoaSA9IGNvaW5fbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBkZXN0cm95U0MoY29pbl9saXN0W2ldKTtcbiAgICB9XG59XG5cbmNvbnN0IGNoYW5nZUJhY2tncm91bmQgPSAoZSkgPT4ge1xuICAgIGJnICs9IDE7XG4gICAgaWYgKGJnID09PSAyKSB7XG4gICAgICAgIGJnID0gLTE7XG4gICAgICAgIHJlbW92ZVNoYWRlcnMoKTtcbiAgICB9XG4gICAgLypcbiAgICBjb25zdCBjYW52ID0gZmluZChcIi5sYXllci0xXCIpO1xuICAgIGNvbnN0IGN0eCA9IGNhbnYuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIGNvbnN0IHNpemUgPSAxNjA7XG4gICAgaWYgKGJnICE9PSAtMSl7XG4gICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpbWcuc3JjID0gYmFja2dyb3VuZDtcbiAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShpbWcsIDE2MCpiZywgMCwgc2l6ZSwgc2l6ZSwgMCwgMCwgNjQwLDY0MCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBjdHguY2xlYXJSZWN0KDAsMCw2NDAsNjQwKTtcbiAgICAqL1xuICAgIGlmIChiZyA9PT0gMCkge1xuICAgICAgICByZW5kZXJTaGFkZXIoXCJsaWdodC1zaGFkZXJcIik7XG4gICAgICAgIHJlbmRlckxldmVsKFwibGV2ZWwtMVwiKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYmcgPT09IDEpIHtcbiAgICAgICAgcmVtb3ZlU2hhZGVycygpO1xuICAgICAgICByZW5kZXJMZXZlbChcImxldmVsLTJcIik7XG4gICAgICAgIHJlbmRlclNoYWRlcihcImRhcmstc2hhZGVyXCIpO1xuICAgIH1cbn1cblxuY29uc3QgdG9nZ2xlUG9pbnRlciA9IChldnQpID0+IHtcbiAgICBjb25zdCBidXQgPSBmaW5kKFwiI3BvaW50ZXJcIilcbiAgICBjb25zdCBjYW52ID0gZmluZChcIi5sYXllci0wXCIpXG4gICAgY29uc3QgcmVjdCA9IGNhbnYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGV0IG1vdXNlUG9zID0ge3g6MCx5OjB9O1xuXG4gICAgY29uc3QgdXBkYXRlUG9pbnRlciA9IChldnQpID0+e1xuICAgICAgICBcbiAgICAgICAgbW91c2VQb3MgPSB7XG4gICAgICAgICAgICB4OiBldnQuY2xpZW50WCAtIHJlY3QubGVmdCxcbiAgICAgICAgICAgIHk6IGV2dC5jbGllbnRZIC0gcmVjdC50b3BcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdXBkYXRlUG9pbnRlcihldnQpO1xuXG4gICAgaWYgKHBvaW50ZXIpe1xuICAgICAgICBwb2ludGVyID0gZmFsc2U7XG4gICAgICAgIHJlbUNsYXNzKGJ1dCwgW1wic2VsZWN0ZWRcIl0pO1xuICAgICAgICBjbGVhckludGVydmFsKHBvaW50VGltZVswXSk7XG4gICAgICAgIHBvaW50VGltZSA9IFtdO1xuICAgICAgICB1bmRldGVjdChkb2N1bWVudCxcIm1vdXNlbW92ZVwiLCB1cGRhdGVQb2ludGVyKTtcbiAgICAgICAgc2V0U2hvdygxLCBmYWxzZSk7XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICAgIHBvaW50ZXIgPSB0cnVlO1xuICAgICAgICBhZGRDbGFzcyhidXQsIFtcInNlbGVjdGVkXCJdKVxuICAgICAgICBkZXRlY3QoZG9jdW1lbnQuYm9keSxcIm1vdXNlbW92ZVwiLCB1cGRhdGVQb2ludGVyKTtcblxuICAgICAgICBwb2ludFRpbWUucHVzaChzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG1vdmVUb3dhcmRzKDAsIG1vdXNlUG9zLngsbW91c2VQb3MueSk7XG4gICAgICAgICAgICBkcmF3U0MoMSxcImluY3JlbWVudFwiLFwibm9uZVwiKTtcbiAgICAgICAgICAgIHRlbGVwb3J0KDEsTWF0aC5mbG9vcihtb3VzZVBvcy54LzY0KSo2NCwgTWF0aC5mbG9vcihtb3VzZVBvcy55LzY0KSo2NCk7XG4gICAgICAgIH0sIDUwKSk7XG4gICAgICAgIHNldFNob3coMSwgdHJ1ZSk7XG4gICAgfVxufVxuXG5leHBvcnQge2J1dHRvbk92ZXJsYXkgLHRvZ2dsZVBvaW50ZXJ9IiwiaW1wb3J0IHsgYWRkQ2xhc3MsIGNyZWF0ZSwgcmVuZGVyLCBzdHlsZSB9IGZyb20gXCIuL3NjcmlwdHMvUW9MXCI7XG5pbXBvcnQge2luaXRDYW52YXNlcywgaW5pdERlYnVnLCBpbml0T3RoZXIsIGluaXRCdXR0b25PdmVybGF5fSBmcm9tIFwiLi9zY3JpcHRzL3N0YXJ0XCI7XG5pbXBvcnQgeyB0cmlnZ2VyIH0gZnJvbSBcIi4vc2NyaXB0cy90cmlnZ2Vyc1wiO1xuXG5jb25zdCBnYW1lID0gY3JlYXRlKFwiZGl2XCIpO1xuYWRkQ2xhc3MoZ2FtZSwgW1wiZ2FtZVwiXSk7XG5yZW5kZXIoZG9jdW1lbnQuYm9keSwgZ2FtZSk7XG5zdHlsZShnYW1lLCBgXG4gICAgZGlzcGxheTpmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOmNvbHVtbjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOmNlbnRlcjtcbiAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAgICB3aWR0aDoxMDAlO1xuICAgIGxlZnQ6IC0xMDBweDtcbmApXG5cbnJlbmRlcihnYW1lLCBpbml0Q2FudmFzZXMoKSk7XG5yZW5kZXIoZ2FtZSwgaW5pdE90aGVyKCkpO1xucmVuZGVyKGdhbWUsIGluaXREZWJ1ZygpKTtcblxudHJpZ2dlcihcInN0YXJ0XCIpOyIsImltcG9ydCAnLi4vY3NzL2FuaW1hdGlvbnMuY3NzJztcbmltcG9ydCAnLi4vY3NzL2ZvbnRzLmNzcyc7XG5pbXBvcnQgcGF0dGVybiBmcm9tIFwiLi4vaW1hZ2VzL3BhdHRlcm5fMTAyLmdpZlwiXG5pbXBvcnQge3JlbmRlciwgY3JlYXRlLCBhZGRDbGFzcywgcmVtQ2xhc3MsIGZpbmQsIHdyaXRlLCBzdHlsZSwgZGV0ZWN0fSBmcm9tIFwiLi4vc2NyaXB0cy9Rb0xcIlxuaW1wb3J0IHsgY2FudmFzLCBydW5FdmVyeXRoaW5nIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jYW52YXMnO1xuaW1wb3J0IHsgd3JhcHBlciwgbWluaVdyYXBwZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL3dyYXBwZXInO1xuaW1wb3J0IHsgZGVidWdUb29scyB9IGZyb20gJy4uL2NvbXBvbmVudHMvZGVidWdUb29scyc7XG5pbXBvcnQgeyBpbml0TWluaXMgfSBmcm9tICcuLi9jb21wb25lbnRzL21pbmlDYW52YXMnO1xuaW1wb3J0IHsgYnV0dG9uT3ZlcmxheSB9IGZyb20gJy4uL2NvbXBvbmVudHMvYnV0dG9uT3ZlcmxheSc7XG5pbXBvcnQgeyBpbml0U0MgfSBmcm9tICcuLi9jb21wb25lbnRzL3Nwcml0ZWNhbnZhcyc7XG5pbXBvcnQgeyBpbml0RGlhbG9ndWVzLCBuZXh0RGlhbG9ndWUgfSBmcm9tICcuLi9jb21wb25lbnRzL2RpYWxvZ3VlJztcbmltcG9ydCB7IGluaXRJbmZvU2NyZWVuIH0gZnJvbSAnLi4vY29tcG9uZW50cy9pbmZvU2NyZWVuJztcbmltcG9ydCB7IGluaXRBdWRpb3MgfSBmcm9tICcuL3NvdW5kcyc7XG5pbXBvcnQgeyBpbml0U2hhZGVycywgcmVuZGVyc2hhZGVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy9zaGFkZXJzJztcblxuY29uc3Qgd2lkdGggPSA2NDA7XG5jb25zdCBoZWlnaHQgPSA2NDA7XG5cbmNvbnN0IGluaXRDYW52YXNlcyA9ICgpID0+IHtcbiAgICBzdHlsZShkb2N1bWVudC5ib2R5LCBgXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMyNDI0MjQ7XG4gICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiR7cGF0dGVybn1cIik7XG4gICAgICAgIGJhY2tncm91bmQtc2l6ZTogNzBweDtcbiAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IHJlcGVhdDtcbiAgICBgKVxuICAgIGNvbnN0IHJhcHBlciA9IHdyYXBwZXIoKTtcbiAgICBjb25zdCBiYWNrZ3JvdW5kQ2FudmFzID0gY2FudmFzKHdpZHRoLGhlaWdodCwwKTtcbiAgICBjb25zdCBzb2xpZEJHcyA9IGNhbnZhcyh3aWR0aCxoZWlnaHQsMSk7XG4gICAgcmVuZGVyKHJhcHBlciwgYmFja2dyb3VuZENhbnZhcyk7XG4gICAgcmVuZGVyKHJhcHBlciwgc29saWRCR3MpO1xuICAgIGluaXRTQyhyYXBwZXIpO1xuICAgIGluaXRTaGFkZXJzKHJhcHBlcik7XG4gICAgY29uc29sZS5sb2coXCJjb21tZW5jaW5nXCIpO1xuICAgIHJ1bkV2ZXJ5dGhpbmcoW2JhY2tncm91bmRDYW52YXMsIHNvbGlkQkdzXSwgd2lkdGgsIGhlaWdodCk7XG4gICAgY29uc3QgYnV0T3YgPSBidXR0b25PdmVybGF5KHdpZHRoLCBoZWlnaHQpXG4gICAgcmVuZGVyKHJhcHBlciwgYnV0T3YpO1xuICAgIHJldHVybiByYXBwZXI7XG59XG5cbmNvbnN0IGluaXRPdGhlciA9ICgpID0+IHtcbiAgICBjb25zdCBtaW5pcmFwcGVyID0gbWluaVdyYXBwZXIoKTtcbiAgICBpbml0TWluaXMobWluaXJhcHBlcik7XG4gICAgaW5pdERpYWxvZ3VlcygpO1xuICAgIGluaXRJbmZvU2NyZWVuKCk7XG4gICAgaW5pdEF1ZGlvcygpO1xuICAgIHJldHVybiBtaW5pcmFwcGVyO1xufVxuXG5jb25zdCBpbml0RGVidWcgPSAoKSA9PntcbiAgICBjb25zdCBkZWJ1Z1Rvb2wgPSBkZWJ1Z1Rvb2xzKCk7XG4gICAgcmVuZGVyKGRvY3VtZW50LmJvZHksIGRlYnVnVG9vbCk7XG4gICAgcmV0dXJuIGRlYnVnVG9vbDtcbn1cblxuZXhwb3J0IHtpbml0Q2FudmFzZXMsIGluaXRPdGhlciwgaW5pdERlYnVnfSIsImltcG9ydCB7IGluY3JlbWVudFNjb3JlLCBzY29yZSB9IGZyb20gXCIuLi9jb21wb25lbnRzL2RlYnVnVG9vbHNcIjtcbmltcG9ydCB7IHRvZ2dsZVByb21wdCB9IGZyb20gXCIuLi9jb21wb25lbnRzL3Byb21wdHNcIjtcbmltcG9ydCB7IGNvaW5fbGlzdCwgZGVzdHJveVNDIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvc3ByaXRlY2FudmFzXCJcbmltcG9ydCB7IGZpbmQgfSBmcm9tIFwiLi9Rb0xcIjtcbmltcG9ydCB7IHBsYXlBdWRpbyB9IGZyb20gXCIuL3NvdW5kc1wiO1xuaW1wb3J0IHsgdHJpZ2dlciB9IGZyb20gXCIuL3RyaWdnZXJzXCI7XG5cbmNvbnN0IGFuaW1hdGVTQ3MgPSAoKSA9PiB7XG4gICAgY29pbl9saXN0LmZvckVhY2goY29pbiA9PiB7XG4gICAgICAgIGRyYXdPYmooY29pbiwgXCJpbmNyZW1lbnRcIiwgXCJub25lXCIpO1xuICAgICAgICBjb25zdCBvdmVybGFwID0gY2hlY2tDb2xsaXNpb24oY29pbiwgZmluZChcIiNjYXJcIikpO1xuICAgICAgICBpZiAob3ZlcmxhcCl7XG4gICAgICAgICAgICBkZXN0cm95U0MoY29pbik7XG4gICAgICAgICAgICBpbmNyZW1lbnRTY29yZSgpO1xuICAgICAgICAgICAgcGxheUF1ZGlvKFwiY29pblwiKTtcbiAgICAgICAgICAgIGlmIChzY29yZSA9PT0gMTApe1xuICAgICAgICAgICAgICAgIHRyaWdnZXIoXCJ3aW5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5jb25zdCBkcmF3T2JqID0gKG9iaiwgZnJhbWUsIGRpcmVjdGlvbikgPT4ge1xuICAgIGxldCBmcmFtID0gZnJhbWU7XG4gICAgaWYgKGZyYW1lID09PSBcImluY3JlbWVudFwiKXtcbiAgICAgICAgaWYgKG9iai50aW1lciA9PT0gb2JqLnVwZGF0ZXNfcGVyX2ZyYW1lcyl7XG4gICAgICAgICAgICBmcmFtID0gb2JqLmZyYW1lICsgMTtcbiAgICAgICAgICAgIG9iai5mcmFtZSA9IGZyYW07XG4gICAgICAgICAgICBvYmoudGltZXIgPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb2JqLnRpbWVyICs9IDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZyYW0gPT09IG9iai5mcmFtZXMpe1xuICAgICAgICBpZiAob2JqLm5hbWUgPT09IFwiaGlnaGxpZ2h0XCIpIGZyYW0gPSAxO1xuICAgICAgICBlbHNlIGZyYW0gPSAwXG4gICAgICAgIG9iai5mcmFtZSA9IGZyYW07XG4gICAgfVxuICAgIGlmIChvYmoudGltZXIgPT09IDEpe1xuICAgICAgICBvYmouZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgICAgICBjb25zdCBkcmFpbmQgPSBvYmouZGlyZWN0aW9uX2RhdGFbZGlyZWN0aW9uXTtcbiAgICAgICAgb2JqLmRyYXdfaW5kZXggPSBkcmFpbmQ7XG4gICAgICAgIGNvbnN0IGN0eCA9IG9iai5lbGUuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICBjb25zdCBzaXplID0gb2JqLnNpemU7XG4gICAgICAgIGNvbnN0IGltZyA9IG9iai5pbWc7XG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwwLHNpemUsc2l6ZSk7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCBzaXplKmZyYW0sIHNpemUqZHJhaW5kLCBzaXplLCBzaXplLCAwLCAwLCBzaXplLHNpemUpO1xuICAgIH1cbn1cblxuY29uc3QgY2hlY2tDb2xsaXNpb24gPSAoc2MsIHRoaW5nKSA9PiB7XG4gICAgLy8gR2V0IHRoZSBib3VuZGluZyBib3ggb2YgdGhlIGZpcnN0IGVsZW1lbnQgXG4gICAgY29uc3QgcmVjdDEgPSBzYy5lbGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IFxuICAgIFxuICAgIC8vIEdldCB0aGUgYm91bmRpbmcgYm94IG9mIHRoZSBzZWNvbmQgZWxlbWVudCBcbiAgICBjb25zdCByZWN0MiA9IHRoaW5nLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyBcbiAgICBcbiAgICAvLyBDaGVjayBpZiB0aGUgdHdvIGVsZW1lbnRzIG92ZXJsYXAgXG4gICAgY29uc3Qgb3ZlcmxhcCA9ICEocmVjdDEucmlnaHQgPCByZWN0Mi5sZWZ0IHx8ICBcbiAgICAgICAgICAgICAgICAgICAgcmVjdDEubGVmdCA+IHJlY3QyLnJpZ2h0IHx8ICBcbiAgICAgICAgICAgICAgICAgICAgcmVjdDEuYm90dG9tIDwgcmVjdDIudG9wIHx8ICBcbiAgICAgICAgICAgICAgICAgICAgcmVjdDEudG9wID4gcmVjdDIuYm90dG9tKTsgXG5cbiAgICByZXR1cm4gb3ZlcmxhcDtcbn1cblxuZXhwb3J0IHthbmltYXRlU0NzfSJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsInVybCIsIm9wdGlvbnMiLCJTdHJpbmciLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInRlc3QiLCJzbGljZSIsImhhc2giLCJuZWVkUXVvdGVzIiwicmVwbGFjZSIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJuIiwiZ2V0dGVyIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInAiLCJiIiwiYmFzZVVSSSIsInNlbGYiLCJocmVmIiwibmMiLCJwYXJlbnQiLCJjaGlsZCIsImNsYXNzbGlzdCIsImZvckVhY2giLCJjbGFzIiwiY2xhc3NMaXN0IiwiYWRkIiwiY29udGFpbnMiLCJyZW1DbGFzcyIsInNlbGVjdG9yIiwidGV4dCIsInRleHRDb250ZW50IiwiZXZlbnQiLCJmdW5jIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzdHlsZXRleHQiLCJhdHRyaWJMaXN0IiwidmFsdWVzIiwiYXR0cmliIiwibG9jYWxzIiwic2NvcmUiLCJpbmNyZW1lbnRTY29yZSIsInNjb3JlZWxlIiwic2xpZGVGdW5jIiwibGVmdCIsInZhbHVlIiwiYXVkaW9zIiwibWFrZUF1ZGlvIiwibmFtZSIsImF1ZGlvIiwiQXVkaW8iLCJmaW5kIiwicGxheSIsImN1cnJlbnRDb2RlIiwidG9nZ2xlUHJvbXB0IiwiY29kZSIsInByb21wdCIsInRpdGxlIiwiZXhpc3RzIiwic2V0VGltZW91dCIsImNyZWF0ZVByb21wdCIsIm15dGV4dCIsImRyYWciLCJkcmFnQmFyIiwiY3JlYXRlVGV4dCIsImJhciIsInRpdCIsImNsb3NlUHJvbXB0IiwibW91c2VEb3duIiwibW91c2VVcCIsInNwbGl0IiwicHJldmVudERlZmF1bHQiLCJib2R5IiwibW91c2VNb3ZlIiwiZXZ0IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm1vdXNlUG9zIiwiY2xpZW50WCIsImNsaWVudFkiLCJ0b3AiLCJ0aWxlcyIsImNvbGxpc2lvbl90aWxlcyIsInVwZGF0ZUJhY2tncm91bmQiLCJjdHgiLCJ3aWR0aCIsImhlaWdodCIsInJlbmRlclRpbGVzIiwicm93IiwidGlsZSIsImluZGV4MiIsImRyYXdUaWxlIiwieCIsInkiLCJzaXplIiwidGlsZXNldCIsIkltYWdlIiwib25sb2FkIiwiZHJhd0ltYWdlIiwic2NfbGlzdCIsImNvaW5fbGlzdCIsInNwcml0ZUNhbnZhcyIsIndyYXBwZXIiLCJpbWdzcmMiLCJzcGVlZCIsInNob3ciLCJmcmFtZXMiLCJjYW52IiwiaW1nIiwiZWxlIiwiZGlyZWN0aW9uIiwiZGlyZWN0aW9uX2RhdGEiLCJkcmF3X2luZGV4IiwiZnJhbWUiLCJ1cGRhdGVzX3Blcl9mcmFtZXMiLCJ0aW1lciIsImdldENvbnRleHQiLCJpbWFnZVNtb290aGluZ0VuYWJsZWQiLCJjbGVhclJlY3QiLCJzZXRTaG93IiwiZHJhd1NDIiwiZnJhbSIsImRyYWluZCIsInRlbGVwb3J0IiwiZGVzdHJveVNDIiwiaW5kZXhPZiIsInRyaWdnZXIiLCJiYWNrZ3JvdW5kQ2hhbmdlIiwibW91c2UiLCJ0aWxleCIsIk1hdGgiLCJmbG9vciIsInRpbGV5IiwibW9kaWZ5VGlsZSIsIm1zUGVyRnJhbWUiLCJtc1ByZXYiLCJwZXJmb3JtYW5jZSIsIm5vdyIsImNhbnZhcyIsImdldE1vdXNlUG9zIiwiaW5pdE1vdXNlIiwiQXJyYXkiLCJmaWxsIiwiY29uc29sZSIsImxvZyIsImluaXRCYWNrZ3JvdW5kIiwidG9vbHMiLCJkZXNjcmlwdGlvbnMiLCJocCIsInNldEhlYWx0aCIsImhlYWx0aCIsIm15aHAiLCJoZWFsdGhiYXIiLCJudW0iLCJzdGFydGh1ZSIsImVuZGh1ZSIsImh1ZSIsImhlYXJ0IiwibWluaUxpc3QiLCJtaW5pQ2FudmFzIiwiY3VycmVudEZyYW1lIiwiY2FudmVsZSIsImltZ2VsZSIsImluaXQiLCJhZGRlZGxlZnQiLCJjdHgyIiwiZGF0YXNldCIsImJhY2tjYW52IiwibW91c2VQb3MyIiwiaW50ZXJ2YWxfbGlzdCIsImhvdmVyRnVuYyIsInNldEludGVydmFsIiwidXBkYXRlRHJhZyIsInJlY3QyIiwiY2xlYXJJbnRlcnZhbCIsInJhd2ljb24iLCJjbG9uZWQiLCJjbG9uZU5vZGUiLCJpbmZvIiwiZGlzcGxheUluZm8iLCJyZW5kZXJTaGFkZXIiLCJzaGFkIiwiZXh0cmFfc3R5bGUiLCJyZW5kZXJMZXZlbCIsInBhdGhCbG9jayIsInJlbW92ZVNoYWRlcnMiLCJzaGFkbGlzdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzaGFkd3JhcCIsInBhdGgiLCJwb2ludGVyIiwicG9pbnRUaW1lIiwiYmciLCJCdXR0b24iLCJzcHJpdGVudW0iLCJidXR0b24iLCJ0b2dnbGVTaGFrZSIsInByb21wdGJ1dCIsImNoYW5nZUJhY2tncm91bmQiLCJ0b2dnbGVQb2ludGVyIiwiYnV0IiwidXBkYXRlUG9pbnRlciIsImR4IiwiZHkiLCJtYWciLCJzcXJ0IiwidXgiLCJ1eSIsIm54IiwibnkiLCJpbmNvbWluZ190aWxlIiwiaiIsImRldGVjdFRpbGUiLCJpbmNsdWRlcyIsImFuZ2xlIiwiYXRhbiIsIlBJIiwibW92ZVRvd2FyZHMiLCJnYW1lIiwicmFwcGVyIiwiYmFja2dyb3VuZENhbnZhcyIsInNvbGlkQkdzIiwiaW5pdFNoYWRlcnMiLCJjYW52YXNMaXN0IiwiYW5pbWF0ZUV2ZXJ5dGhpbmciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc05vdyIsIm1zUGFzc2VkIiwiY29pbiIsImRyYXdPYmoiLCJzYyIsInRoaW5nIiwicmVjdDEiLCJyaWdodCIsImJvdHRvbSIsImNoZWNrQ29sbGlzaW9uIiwicnVuRXZlcnl0aGluZyIsImJ1dE92IiwiZ2VuZXJhdGVCdXR0b25zIiwiaW5pdENhbnZhc2VzIiwibWluaXJhcHBlciIsIm1pbmlXcmFwcGVyIiwidG9vbCIsIm1pbmkiLCJtaW5pZWxlIiwiaW5pdE1pbmkiLCJpbmZvVG9wIiwiaW5mb0JvdHRvbSIsImhlYWx0aEJhciIsImluaXRJbmZvU2NyZWVuIiwiaW5pdE90aGVyIiwiZGVidWdUb29sIiwiZGVidWdXcmFwIiwic2xpZGVyIiwic2xpZGVyMiIsImRlYnVnVG9vbHMiLCJpbml0RGVidWciXSwic291cmNlUm9vdCI6IiJ9