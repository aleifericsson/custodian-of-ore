(()=>{"use strict";var e={320:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([e.id,".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}","",{version:3,sources:["webpack://./src/css/animations.css"],names:[],mappings:"AAAA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B",sourcesContent:[".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}"],sourceRoot:""}]);const s=a},414:(e,n,t)=>{t.d(n,{Z:()=>p});var o=t(537),r=t.n(o),i=t(645),a=t.n(i),s=t(667),l=t.n(s),d=new URL(t(542),t.b),c=a()(r()),u=l()(d);c.push([e.id,`html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(${u}) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */`,"",{version:3,sources:["webpack://./src/css/fonts.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;IACI,oBAAoB;IACpB,+DAA+C;EACjD;;EAEA;;;;;;;;;;GAUC",sourcesContent:["html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(../fonts/munro.ttf) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */"],sourceRoot:""}]);const p=c},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);o&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),n.push(c))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],d=o.base?l[0]+o.base:l[0],c=i[d]||0,u="".concat(d," ").concat(c);i[d]=c+1;var p=t(u),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)n[p].references++,n[p].updater(h);else{var g=r(h,o);o.byIndex=s,n.splice(s,0,{identifier:u,updater:g,references:1})}a.push(u)}return a}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=t(i[a]);n[s].references--}for(var l=o(e,r),d=0;d<i.length;d++){var c=t(i[d]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}i=l}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},542:(e,n,t)=>{e.exports=t.p+"f78662ff4aad4d038806.ttf"}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var i=n[o]={id:o,exports:{}};return e[o](i,i.exports,t),i.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!e;)e=o[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{const e=(e,n)=>{e.appendChild(n)},n=(e,n)=>{n.parentNode===e&&e.removeChild(n)},o=e=>document.createElement(e),r=(e,n)=>{n.forEach((n=>{e.classList.add(n)}))},i=(e,n)=>e.classList.contains(n),a=(e,n)=>{n.forEach((n=>{e.classList.remove(n)}))},s=e=>document.querySelector(e),l=e=>document.querySelectorAll(e),d=(e,n)=>{e.textContent=n},c=(e,n,t)=>{e.addEventListener(n,t)},u=(e,n,t)=>{e.removeEventListener(n,t)},p=(e,n)=>{e.style.cssText=n},h=(e,n,t)=>{n.map(((n,o)=>{e.setAttribute(n,t[o])}))},g=(e,n,t,o)=>{e.style.top=t-o/2+"px",e.style.left=n-o/2+"px"},m=(e,n)=>{const t=n.getBoundingClientRect();return{x:e.clientX-t.left,y:e.clientY-t.top}},f=(e,n)=>{if(null===e||null===n)return!1;const t=e.getBoundingClientRect(),o=n.getBoundingClientRect();return!(t.right-15<o.left+15||t.left+15>o.right-15||t.bottom-15<o.top+15||t.top+15>o.bottom-15)},x=(e,n)=>{if(null===e||null===n)return!1;const t=e.getBoundingClientRect(),o=n.getBoundingClientRect();return!(t.right<o.left||t.left>o.right||t.bottom<o.top||t.top>o.bottom)},y=(e,n)=>{const t=e.style.left,o=e.style.top;return{x:Number(t.substring(0,t.length-2))+n/2,y:Number(o.substring(0,o.length-2))+n/2}};var b=t(379),v=t.n(b),A=t(795),w=t.n(A),_=t(569),k=t.n(_),C=t(565),M=t.n(C),I=t(216),B=t.n(I),D=t(589),E=t.n(D),$=t(320),z={};z.styleTagTransform=E(),z.setAttributes=M(),z.insert=k().bind(null,"head"),z.domAPI=w(),z.insertStyleElement=B(),v()($.Z,z),$.Z&&$.Z.locals&&$.Z.locals;var T=t(414),S={};S.styleTagTransform=E(),S.setAttributes=M(),S.insert=k().bind(null,"head"),S.domAPI=w(),S.insertStyleElement=B(),v()(T.Z,S),T.Z&&T.Z.locals&&T.Z.locals;const P=t.p+"2303bf42784ad28af8cb.gif",R=t.p+"82e9ac88b221b8bd6b76.png";t.p;let L=null,j=null,F=null,N=null;const O=t.p+"89cc97a32f3bdd1a1f7c.png";let W;const Z=(e,n)=>{e.forEach(((e,t)=>{e.forEach(((e,o)=>{U(e,t,o,n)}))}))},U=(e,n,t,o)=>{const r=64;let i=new Image;i.src=O,i.onload=function(){o.drawImage(i,e*r,0,r,r,n*r,t*r,r,r)}},H=()=>new Array(10).fill(0).map((()=>new Array(10).fill(10))),G=t.p+"c488352b32cb2834c60f.png",Y=t.p+"f192e88a398e0860ed26.png",q=t.p+"2e1e9a0ec65f1856fb5a.png",J=t.p+"150d8cbb242787ea4063.png";let K=0;const X=[4,5,8,9,10];let Q=[350,450,250,560,200,350,270];const V=["down","left","up","right","random"],ee=["Magnet_Drone","Force-field_Drone","Lightning_Rod_Drone","Air_Strike","Machine_Gun","Drone_GPS_Hack","Recall_Drones","Repair_Package_Drone"],ne=["\nAttracts metal towards it\n\n- Placeable\n- Only one on the field at a time\n\n- Cooldown: none\n","\nDissolves bullets and missiles it touches.\n\n- Placeable\n- Only one on the field at a time\n\n- Depletes power in 10 seconds\n- Cooldown: 15 seconds\n","\nAbsorbs lightning in a small radius\n\n- Placeable\n- Only one on the field at a time\n\n- Shatters after 3 lightning strikes\n- Cooldown: 15 seconds\n","\nCall a missile to any point on the field\n\n- Ammo: 1 missile\n- Damage: high\n- Cooldown: 5 seconds\n","\nFires shots at any point on the field,\nmachine overheats after 20 shots\n\n- Ammo: 20 bullets\n- Firerate: 4 bullets per second\n- Cooldown: 15 seconds\n","\nLocks position of all drones temporarily,\nmissiles lose heat-seeking function.\n\n- Duration: 10 seconds\n- Cooldown: 20 seconds\n","\nRemove all placed drones from field.\n\n- Cooldown: none\n","\nWhen held near package drone, \nrestores 2 health per 5 seconds.\n\n- Cooldown: 20 seconds\n","\nHas Dio's special package,\nget it to his house somewhere west.\n","\nShoots low damage burst shots\nin 4 diagonal directions.\n","\nFires heat-seeking missiles\nor torpedoes,  tboth are high damage.\n","\nWill try to ram into you and cut you\nwith its saws. Longer contact means\nmore damage.\n","\nThe boss. Can spawn all drones\nand even summon lightning somehow.\n"],te=t.p+"253f6d096c5e70f2592b.png",oe=t.p+"288679a9935244c50a6f.png",re=[["D: My package has been suspiciously failed to be delivered twice in a row now!","D: I'm not even getting refunds for this!!","D: I guess when you want something done you have to do it yourself."],["P: Package drone status: Ready to deliver ref#7355608","P: Package drone status: Aberration detected - access from unautorised party","P: Package drone status: Limited remote control mode activated. Freedom of movement restricted at this admin level","D: Damn, I'm in but I cant' move. Guess I'll need my magnet drones to move the package. At least I haven't triggered security... yet."],["P: Package drone status: Warning. Security drones in area. Deviation from designated path may result in aggression.","D: These will do nothing against what I have in my arsenal."],["P: Package drone status: Warning. Heavy wind detected, recalculation of trajectory detected to remain on path.","D: Might be wise to control the drone's rotors directly with my control hack, even if it is temporary."],["D: What?! The path doesn't even go to my house! Someone's already in the system and stealing packages. No wonder I never got mine.","D: No time to get distracted tho, the sooner I get my package, the sooner I can forget about this scummy company."],["S: Security drone status: Aberration detected in rogue package drone. Requesting immediate backup to eliminate the issue","D: Finally: A reason to go all out"],["D: Hey, that's my house! I'm so close!","d: !!..","A: You have laid waste to my brethren and humiliated me!","A: Why do you persist in protecting a nonsentient piece of scrap metal?","d: I'm just rightfully getting something I paid for. Now get out my way before you end up like the rest of your trash!","A: Such determination you hold for something your life is not dependent on!","A: Unlike you, I will get REPLACED if I fail to elimiate any aberrations, and now your on the top of my list!","d: About time you get an update! Your buggy programming can't detect a real threat to your crumbling company if you ever saw one.","d: There are thieves in your system and you go after a guy who's protecting his legal property?! I think it's time for YOU to pay."],["A: Well, you have defeated me. I failed the one job I was programmed to complete. I will no doubt be replaced soon.","A: Say something nice. It might be the last thing I hear before I'm gone forever","D: We're not too different, man. We both made sacrifices defending metal.","D: Tell me, do you have a name?","A: They refered to me as 'Security AI Beta Test v8.10.04'","D: Haha, no wonder you failed. You never made it past beta!","D: Well then, I will give you a proper name. You will be crowned as the one who guarded pieces of rock minerals.","D: The custodian of ore.","C: Befitting name. So long then, enjoy your package.","D: Finally, it is in my hands!","D: Tungsten cube!!"]];let ie=0,ae=[];const se=e=>{Number.isInteger(e)&&(ie=e);const n=de(ae[ie]);ie+=1,c(n,"click",le)},le=e=>{ie<=3&&ye();let t=e.target;i(t,"dialogue")||(t=t.parentNode,i(t,"dialogue")||(t=t.parentNode)),u(t,"click",le),r(t,["dialogue-start-end"]),setTimeout((()=>{n(s(".game"),t),ae[ie-1].follow&&se()}),200)},de=n=>{const t=o("div");return r(t,["dialogue","dialogue-start-end"]),h(t,["id","draggable"],[`dialogue-${n.code}`,"false"]),p(t,"\n            color:white;\n            background-color: slategray;\n            border: 5px solid darkslategray;\n            position:absolute;\n            transition: 0.1s;\n            width: 600px;\n            height: 100px;\n            left: calc(50% -200px);\n            top: 500px;\n            display:flex;\n            justify-content: flex-start;\n            align-items: center;\n            gap: 10px;\n            padding: 10px;\n            z-index: 7;\n        "),e(t,ce(n.charactersrc,n.index)),e(t,ue(n.text,n.charname)),e(s(".game"),t),setTimeout((()=>t.classList.remove("dialogue-start-end")),100),t},ce=(e,n)=>{const t=o("div");return r(t,["charBox"]),p(t,`\n        border: 2px solid darkslategray;\n        min-width: 32px;\n        min-height: 32px;\n        margin: 16px;\n        scale: 2;\n        image-rendering: pixelated;\n        background: url(${e}) -${32*n}px 0px;\n    `),t},ue=(n,t)=>{const r=o("div"),i=o("div"),a=o("div");return p(r,"\n        position:relative;\n        top: -10px;\n    "),p(i,"\n        color:white;\n        font-family: 'munro';\n        font-size: 20px;\n    "),p(a,"\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n    "),d(i,n),d(a,t),e(r,a),e(r,i),r},pe=()=>{re.map((e=>{e.map(((n,t)=>{const o=n.substring(0,1),r=n.substring(3,n.length);let i,a,s,l=oe;s=t!==e.length-1,"D"===o?(i="Dio",a=0):"d"===o?(i="Dio",a=3):"A"===o?(i="Security AI",a=4):"P"===o?(i="Package Drone",a=1):"S"===o?(i="Security Drone",a=2):"C"===o&&(i="Custodian of Ore",a=4),((e,n,t,o,r,i)=>{ae.push({text:e,code:t,charactersrc:o,follow:r,charname:n,index:i})})(r,i,a,l,s,a),a+=1}))}))},he=t.p+"9f4a624ec8848f4ec512.png";let ge=!0,me=0,fe=0;const xe=(e,n)=>{me=e,ge=n;const t=s(".cutscene");t.style.visibility=ge?"visible":"hidden",t.style.background=`url(${he}) -${320*me}px 0px`},ye=()=>{3===fe&&(xe(me,!1),setTimeout((()=>{se()}),1e3)),0===fe?(fe+=1,u(s(".start-but"),"click",ye),n(j,s(".start-but")),se(),xe(1,!0)):2===fe?(xe(2,!0),fe+=1):fe+=1},be=t.p+"40bead41f130d5bf6de7.png",ve=t.p+"dc3293068f5630490558.png",Ae=t.p+"6c039a05fb3f3dab314c.png",we=t.p+"e2b44efb30368e5df2a8.png";let _e=[],ke=!1;const Ce=(e,n,t)=>{let o,i,a=5;"gunner_drone"===e&&(o=ve,i=75),"missile_drone"===e&&(o=Ae,i=150),"attack_drone"===e&&(o=we,i=6,a=2);let s=Math.floor(Math.random()*i*.5),l=360*Math.random();const d=Oe(j,e,32,o,n,t,5,!0,1);r(d,["enemy"]),_e.push({ele:d,type:e,x:n,y:t,fireevery:i,timer:s,timeout:null,size:64,moving:!1,moveTimer:10,speed:a,rot:l})},Me=(e,n)=>{const t=e.x,o=e.y,r=n+90,i=e.speed*Math.cos(r*(Math.PI/180)),a=e.speed*Math.sin(r*(Math.PI/180)),s=t+i-e.size/2,d=o+a-e.size/2;let c=!1;l(".edge").forEach((n=>{x(n,e.ele)&&(c=!0)})),c||(e.x=s+e.size/2,e.y=d+e.size/2,e.ele.style.left=`${e.x}px`,e.ele.style.top=`${e.y}px`)},Ie=(e,n)=>{ze("bullet",e,n,45),ze("bullet",e,n,135),ze("bullet",e,n,225),ze("bullet",e,n,315)},Be=()=>{_e=[],l(".enemy").forEach((e=>{n(j,e)}))};let De=[],Ee=null,$e=null;const ze=(n,t,i,a)=>{const s=o("div");let l,d,c,u=i,h=0,g=1,m="none";"wind"===n?(l=9,d=100,h=1,c=2):"bullet"===n?(l=1,d="none",h=10,c=2):"hit"===n?(l=2,d=10,c=2):"lightning_warning"===n?(l=10,d=20,c=4,g=.5):"lightning_strike"===n?(l=4,d=7,h=0,c=4):"lightning_bolt"===n?(l=3,d=7,c=4):"missile"===n?(l=0,d="none",h=12,c=2):"explosion"===n?(l=7,d=10,c=2):"good_missile"===n?(l=0,d="none",h=15,c=2,m=i,u=0):"good_explosion"===n?(l=7,d=10,c=4):"good_hit"===n&&(l=2,d=10,c=4),r(s,["effect",n]),p(s,`\n        scale: ${c};\n        top: ${i}px;\n        left: ${t}px;\n        height: 16px;\n        width: 16px;\n        background: url(${be}) -${16*l}px 0;\n        position:absolute;\n        image-rendering: pixelated;\n        transform: rotate(${a}deg);\n        opacity: ${g};\n    `);const f={type:n,x:t,y:u,speed:h,fadein:d,rot:a,ele:s,size:16,final_y:m};De.push(f),"good_explosion"===n&&(Ee=s),"good_hit"===n&&(null!=$e&&(Re($e),$e=null),$e=f),e(N,s)},Te=()=>{De=[],l(".effect").forEach((e=>{n(N,e)}))},Se=e=>{const n=e.x,t=e.y,o=e.rot+90,r=e.speed*Math.cos(o*(Math.PI/180)),i=e.speed*Math.sin(o*(Math.PI/180)),a=n+r-e.size/2,s=t+i-e.size/2;let d=!1;l(".edge").forEach((n=>{x(n,e.ele)&&(d=!0)})),d?Re(e):(e.x=a+e.size/2,e.y=s+e.size/2,e.ele.style.left=`${e.x}px`,e.ele.style.top=`${e.y}px`)},Pe=(e,n,t)=>{const o=y(t,64),r=o.x-e,i=o.y-n;let a=Math.atan(-i/r);return r<0&&(-i<0?a-=Math.PI:a+=Math.PI),a*=180/Math.PI,a-=90,a=-a,a<=-180&&(a+=360),a},Re=e=>{n(N,e.ele),De=De.filter((function(n){return n!==e}))};let Le=20;const je=n=>{if(n<=0)xe(4,!0),s(".healthbar").textContent="",Te(),Be();else{let t,r;null===s(".healthbar")?(t=Le,r=n):"number"==typeof n&&(t=n,Le=t,r=s(".healthbar"),r.textContent="");for(let n=0;n<t;n++){const t=20-n,i=350,a=470,s=Math.floor(t/20*(a-i)+i),l=o("div");l.id=`heart-${t}`,p(l,`\n            height:28px;\n            width: 28px;\n            margin: 2px;\n            background-color: hsl(${s}, 70%, 62%);\n        `),e(r,l)}}},Fe=(n,t)=>{const i=t.cloneNode(!1);i.id="infoPic",a(i,["canvas-icon"]),h(i,["width","height"],["64px","64px"]),p(i,"\n        padding-left: 5px;\n        padding-top: 10px;\n    ");const l=i.getContext("2d");l.imageSmoothingEnabled=!1;const c=new Image;c.src=i.dataset.imgsrc;let u=i.dataset.index;["package_drone","gunner_drone","missile_drone","attack_drone","boss_drone"].includes(n)?c.onload=function(){l.clearRect(0,0,64,64),l.drawImage(c,0,0,32,32,0,0,64,64)}:c.onload=function(){l.clearRect(0,0,64,64),l.drawImage(c,16*u,0,16,16,0,0,64,64)},"package_drone"===n&&(u=9),"gunner_drone"===n&&(u=10),"missile_drone"===n&&(u=11),"attack_drone"===n&&(u=12),"boss_drone"===n&&(u=13);const g=s(".infoTop");g.textContent="";const m=o("div");r(m,["infoTitle"]);let f=n.replace("_"," ");f=f.replace("_"," "),d(m,f),p(m,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n        text-transform: capitalize;\n    ");const x=o("div");r(x,["infoText"]),p(x,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 15px;\n        white-space: pre;\n    "),d(x,ne[u]),e(g,m),e(g,i),e(g,x)};let Ne=[null,null,null,null];const Oe=(n,t,i,a,s,l,d,u,g)=>{const m=o("canvas");let f;r(m,["spritecanvas",t]),h(m,["id","width","height"],[t,"64px","64px"]),"none"===a?f="none":(f=new Image,f.src=a),p(m,`\n        position:absolute;\n        top: ${l}px;\n        left: ${s}px;\n    `);let x={name:t,size:i,ele:m,x:s,y:l,direction:"left",img:f,speed:d,direction_data:{none:0},draw_index:0,frame:0,show:u,frames:g,updates_per_frames:2,timer:1};if(Ne[Ze(t)]=x,u){const t=m.getContext("2d");t.imageSmoothingEnabled=!1,f.onload=function(){t.clearRect(0,0,64,64),t.drawImage(f,0,0*i,i,i,0,0,64,64)},e(n,m),c(m,"mouseenter",We)}return"package_drone"===t&&(F=m),m.dataset.imgsrc=a,m},We=e=>{Fe(e.target.id,e.target)},Ze=e=>{let n;return n="package_drone"===e?0:"lightning_rod_drone"===e||"Lightning_Rod_Drone"===e?2:"magnet_drone"===e||"Magnet_Drone"===e?1:3,n},Ue=(e,n,t,o)=>{const r=Ne[e],i=o?2:r.speed,a=n-r.size/2,d=t-r.size/2,c=a-r.x,u=d-r.y,p=Math.sqrt(c*c+u*u),h=c/p*i,g=u/p*i,m=r.x+h-r.size/2,y=r.y+g-r.size/2;Math.atan(-g/h),((e,n)=>{if(e>0&&n>0&&e<=640&&n<=640){const t=Math.floor(e/64),o=Math.floor(n/64);W[t][o]}})(m,y);let b=!1;if(l(".edge").forEach((e=>{f(e,r.ele)&&(b=!0)})),b)"package_drone"===r.name&&(x(s(".edge.left"),r.ele)&&(Ge(e,r.x+5,r.y),r.x=r.x+5),x(s(".edge.right"),r.ele)&&(Ge(e,r.x-5,r.y),r.x=r.x-5),x(s(".edge.top"),r.ele)&&(Ge(e,r.x,r.y+5),r.y=r.y+5),x(s(".edge.bottom"),r.ele)&&(Ge(e,r.x,r.y-5),r.y=r.y-5));else if(p>r.speed){Ne[e].x=m+r.size/2,Ne[e].y=y+r.size/2,Ge(e,m,y);let n=Math.atan(-g/h);h<0&&(-g<0?n-=Math.PI:n+=Math.PI),n*=180/Math.PI;let t="left";n>=22.5&&n<=67.5?t="upright":n>=67.5&&n<=112.5?t="up":n>=112.5&&n<=157.5?t="upleft":n<=22.5&&n>=-22.5?t="right":n<=-22.5&&n>=-67.5?t="downright":n<=-67.5&&n>=-112.5?t="down":n<=-112.5&&n>=-157.5?t="downleft":n>=157.5&&n<=-157.5&&(t="left")}},He=e=>{n(j,Ne[e].ele),Ne[e]=null},Ge=(e,n,t)=>{p(Ne[e].ele,`\n        position:absolute;\n        pointer-events:none;\n        top: ${t}px;\n        left: ${n}px;\n    `)},Ye=n=>{const t=o("div");let i;r(t,["shader"]),t.id=n,"light-shader"===n?i="\n            background-image: linear-gradient(135deg, rgba(227, 245, 66, 0.3), rgba(230, 201, 147, 0.1));\n        ":"dark-shader"===n&&(i="\n            background-image: linear-gradient(135deg, rgba(54, 88, 163, 0.3), rgba(90, 76, 115, 0.6));\n        "),p(t,`\n        height:640px;\n        width: 640px;\n        position: absolute;\n        z-index: 5;\n        ${i}\n    `),e(N,t)},qe=(e,n,t,i)=>{const a=o("div");return r(a,["pathblock"]),p(a,`\n        background-color: rgba(245, 66, 66, 0.3);\n        left: ${e}px;\n        top: ${n}px;\n        height: ${i}px;\n        width: ${t}px;\n        position:absolute;\n    `),a},Je=e=>{const n=o("div");return r(n,["endblock"]),p(n,"\n            background-color: rgba(34, 117, 59, 0.6);\n            left: 0px;\n            top: 0px;\n            height: 640px;\n            width: 10px;\n            position:absolute;\n        "),n};let Ke;const Xe=(e,n,t,i,a)=>{const s=o("div");return r(s,["button",e]),s.id=e,p(s,`\n            position: absolute;\n            left:${i}px;\n            top: ${a}px;\n            width: 32px;\n            height: 32px;\n            background: url(${R}) -${32*n}px 0;\n        `),c(s,"click",t),s},Qe=()=>{l(".shader").forEach((e=>{n(N,e)})),K+=1,d(s("#level"),`Level: ${K}`),(n=>{const t=o("div");r(t,["level","shader"]),t.id=n,p(t,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),Te(),(e=>{Be(),"level-1"===e?(Ce("gunner_drone",70,450),Ce("gunner_drone",100,50)):"level-2"===e?(Ce("gunner_drone",150,450),Ce("gunner_drone",100,100)):"level-3"===e?(Ce("gunner_drone",50,50),Ce("gunner_drone",70,400),Ce("gunner_drone",300,400)):"level-4"===e?(Ce("gunner_drone",50,50),Ce("gunner_drone",200,500),Ce("missile_drone",400,400),Ce("gunner_drone",200,200)):"level-5"===e?(Ce("missile_drone",150,500),Ce("gunner_drone",200,350),Ce("gunner_drone",300,500),Ce("missile_drone",70,70),Ce("gunner_drone",500,550)):"level-6"===e?(Ce("gunner_drone",500*Math.random()+50,500*Math.random()+50),Ce("gunner_drone",50,300),Ce("gunner_drone",100,500*Math.random()+50),Ce("missile_drone",400,400)):"level-7"===e?(Ce("gunner_drone",500*Math.random()+50,300),Ce("gunner_drone",200,500*Math.random()+50),Ce("gunner_drone",300*Math.random()+300,500*Math.random()+50),Ce("missile_drone",400,500*Math.random()+50),Ce("missile_drone",500*Math.random()+50,500*Math.random()+50),Ce("attack_drone",320,200*Math.random()+220)):"level-8"===e?(Ce("gunner_drone",500*Math.random()+50,300),Ce("gunner_drone",500,500*Math.random()+50),Ce("gunner_drone",500*Math.random()+50,500),Ce("missile_drone",500*Math.random()+50,500*Math.random()+50),Ce("missile_drone",100,500*Math.random()+50),Ce("missile_drone",500*Math.random()+50,500*Math.random()+50),Ce("attack_drone",250,200*Math.random()+20),Ce("attack_drone",450,200*Math.random()+420)):"level-9"===e&&(Ce("gunner_drone",100,100),Ce("gunner_drone",500*Math.random()+50,320),Ce("gunner_drone",500*Math.random()+50,500*Math.random()+50),Ce("missile_drone",500*Math.random()+50,550),Ce("missile_drone",500*Math.random()+50,150),Ce("missile_drone",200*Math.random()+50,200*Math.random()+50),Ce("missile_drone",300*Math.random()+250,300*Math.random()+250),Ce("attack_drone",150,200*Math.random()+220),Ce("attack_drone",350,200*Math.random()+220),Ce("attack_drone",450,150))})(n),"level-1"===n?(e(t,qe(0,200,300,150)),e(t,qe(200,350,440,150))):"level-2"===n?(e(t,qe(400,200,240,100)),e(t,qe(300,200,100,300)),e(t,qe(100,500,300,50)),e(t,qe(0,550,150,50))):"level-3"===n?(e(t,qe(140,550,500,50)),e(t,qe(140,320,50,230)),e(t,qe(140,270,320,50)),e(t,qe(410,220,50,50)),e(t,qe(0,170,460,50))):"level-4"===n?(e(t,qe(360,170,280,100)),e(t,qe(220,270,200,50)),e(t,qe(100,320,170,50)),e(t,qe(0,370,160,50))):"level-5"===n?(e(t,qe(480,370,160,50)),e(t,qe(430,230,50,360)),e(t,qe(317,180,233,50)),e(t,qe(550,78,50,152)),e(t,qe(100,478,50,112)),e(t,qe(267,275,50,203)),e(t,qe(188,78,50,111)),e(t,qe(138,134,50,141)),e(t,qe(100,28,500,50)),e(t,qe(100,590,380,50)),e(t,qe(100,428,167,50)),e(t,qe(0,275,267,50))):"level-6"===n&&(e(t,qe(373,275,267,50)),e(t,qe(373,325,50,315))),"level-10"!==n&&e(t,Je(":)")),e(N,t)})(`level-${K}`),X.includes(K)?Ye("dark-shader"):Ye("light-shader"),10===K&&(K=0),ke=!(K<=6)},Ve=(t.p,()=>{en(),!0===ke&&_e.map((e=>{if(null!==Ee&&f(Ee,e.ele)&&(e=>{n(j,e.ele),_e=_e.filter((function(n){return n!==e}))})(e),0===e.timer){e.timer=e.fireevery;const n=e.x+32,t=e.y+32;"gunner_drone"===e.type&&(Ie(n,t),setTimeout((()=>{Ie(n,t)}),200),setTimeout((()=>{Ie(n,t)}),400),setTimeout((()=>{e.moving=!0}),1e3)),"missile_drone"===e.type&&(ze("missile",n,t,180),setTimeout((()=>{e.moving=!0}),1e3)),"attack_drone"===e.type&&x(e.ele,F)&&je(Le-1)}else e.timer=e.timer-1;!0===e.moving&&(0===e.moveTimer?(e.moveTimer=10,e.moving=!1,e.rot=360*Math.random()):(e.moveTimer=e.moveTimer-1,Me(e,e.rot))),"attack_drone"===e.type&&Me(e,Pe(e.x,e.y,F)+180)})),X.includes(K)&&(e=>{let n,t;if("random"===e){let e=Math.floor(4*Math.random());n=V[e]}else n=e;"down"===n?(Ue(0,Ne[0].x,640,!0),t=0):"right"===n?(Ue(0,640,Ne[0].y,!0),t=270):"up"===n?(Ue(0,Ne[0].x,0,!0),t=180):"left"===n&&(Ue(0,0,Ne[0].y,!0),t=90);const o=Math.floor(22*Math.random());if(21===o&&ze("wind",640*Math.random(),640*Math.random(),t),Math.floor(250*Math.random()),21===o){const e=64*Math.floor(10*Math.random())+24,n=64*Math.floor(10*Math.random())+24;ze("lightning_warning",e,n,0)}})(V[X.indexOf(K)]),De.map((e=>{if(["bullet","wind","good_missile"].includes(e.type))Se(e);else if("missile"===e.type){let n;x(L,e.ele),n=Pe(e.x,e.y,F);let t=((e,n)=>{let t=n-e;return t<=-180&&(t+=360),t>180&&(t-=360),t>0?-1:t<0?1:0})(e.rot,n);1===t?e.rot=e.rot+5:-1===t&&(e.rot=e.rot-5),e.rot>180&&(e.rot=e.rot-360),Se(e),e.ele.style.transform=`rotate(${e.rot}deg)`}if((e=>{if(0===e.fadein){if("lightning_warning"===e.type){ze("lightning_strike",e.x,e.y,90*Math.floor(4*Math.random()));let n=(e.y-24)/64;for(let t=0;t<n+1;t++)ze("lightning_bolt",e.x,e.y-64*t,0)}"good_explosion"===e.type&&(Ee=null),Re(e)}else"none"!==e.fadein?(e.fadein=e.fadein-1,"lightning_warning"===e.type&&(e.fadein%4==0||e.fadein%4==1?e.ele.style.background=`url(${be}) -176px 0`:e.ele.style.background=`url(${be}) -160px 0`)):"good_missile"===e.type&&e.y>=e.final_y&&(ze("good_explosion",e.x,e.y,90*Math.floor(4*Math.random())),Re(e))})(e),!0===ke){if("bullet"===e.type&&f(e.ele,F)){je(Le-1);let n=0,t=0;45===e.rot?(n=16,t=-16):135===e.rot?(n=16,t=16):225===e.rot?(n=-16,t=16):315===e.rot&&(n=-16,t=-16);let o=y(F,64);ze("hit",o.x+n,o.y+t,360*Math.random()),Re(e)}if("lightning_strike"===e.type&&f(e.ele,F)&&(je(Le-3),Re(e)),"missile"===e.type)if(f(e.ele,F)){je(Le-4);let n=y(F,64);ze("explosion",n.x,n.y,360*Math.random()),Re(e)}else if(f(e.ele,Ne[1].ele)){let t=y(L,64);ze("explosion",t.x+64,t.y+64,360*Math.random()),Re(e),He(1),null!==L&&n(j,L)}else null!==$e&&f($e.ele,e.ele)&&Re(e)}}))}),en=()=>{if(x(L,F)&&(e=>{const n=y(L,200);Ue(0,n.x,n.y,!1)})(),K>0&&K<=6){const e=l(".pathblock");let t=!1;e.forEach((e=>{f(e,F)&&(t=!0)})),!1===t&&(e.forEach((e=>{n(s(".level.shader"),e)})),ke=!0)}if(f(s(".endblock"),F)){if(0===K)g(F,600,420,64),Ne[0].x=600,Ne[0].y=420;else{const e=y(F,64);Ne[0].y=K<=5?Q[K+1]:e.y,Ne[0].x=e.x+580,g(F,Ne[0].x,Ne[0].y,64)}Qe()}},nn=(e,n)=>{const t=Math.floor(n.x/64),o=Math.floor(n.y/64);let r=W[t][o];r++,20==r&&(r=0),((e,n,t)=>{W[e][n]=t})(t,o,r)},tn=1e3/30;let on=window.performance.now();const rn=(e,n,t)=>{const a=o("canvas");r(a,["game-canvas",`layer-${t}`]),h(a,["width","height"],[`${e}px`,`${n}px`]),p(a,"\n        position:absolute;\n    ");const s=a.getContext("2d");return(e=>{c(e,"click",(n=>{e.getContext("2d");const t=function(e,n){const t=e.getBoundingClientRect();return{x:n.clientX-t.left,y:n.clientY-t.top}}(e,n);i(e,"layer-1")&&nn(0,t)}))})(a),0===t&&((e,n,t)=>{W=H(),W[2][1]=11,W[9][9]=18,W[9][8]=18,W[8][8]=19,W[8][9]=19,console.log(W),((e,n,t)=>{Z(W,e)})(e)})(s),a};let an=-1;const sn=e=>{"slider1"===e.target.id?s(".layer-1").style.left=`${e.target.value}px`:"slider2"===e.target.id&&(s(".button-overlay").style.left=`${e.target.value}px`)};let ln=[],dn=20;function cn(t,i,a,l){this.name=t,this.index=l,this.img=i,this.imgsrc=a,this.currentFrame=0,this.canvele,this.imgele,this.backele,this.lock=null,this.init=()=>{const n=this.index;this.addedleft=64*ln.length,this.size;const t=this.name,i=o("canvas");r(i,["mini-canvas",`${t}`]),h(i,["width","height"],["64px","64px"]),p(i,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const a=i.getContext("2d"),s=this.img;a.imageSmoothingEnabled=!1,s.onload=function(){a.clearRect(0,0,64,64),a.drawImage(s,16*n,0,16,16,0,0,64,64)},this.canvele=i,this.ctx=a;const l=o("canvas");r(l,["canvas-icon"]),h(l,["width","height","id"],["64px","64px",t]),p(l,"\n        ");const d=o("div");r(d,["backele",t]),p(d,"\n            width: 64px;\n            height: 64px;\n            position:relative;\n        ");const c=l.getContext("2d");return c.imageSmoothingEnabled=!1,s.onload=function(){c.clearRect(0,0,64,64),c.drawImage(s,16*n,0,16,16,0,0,64,64)},l.dataset.imgsrc=this.imgsrc,l.dataset.index=n,this.imgele=l,this.initMouse(i,l),e(d,l),this.backele=d,d},this.cooldown=i=>{const a=this.backele,s=o("div");r(s,["lock",t]),p(s,`\n            width: 16px;\n            height: 16px;\n            scale: 4;\n            top: 24px;\n            left: 24px;\n            image-rendering: pixelated;\n            position:absolute;\n            background: url(${te}) -144px 0px;\n        `),e(a,s),this.lock=s,setTimeout((()=>{n(a,s),this.lock=null}),i)},this.initMouse=(r,a)=>{const l=r.getContext("2d");let d;const h=j;let f,x=[],y=this.size,b=(this.currentFrame,this.index),v=!1;const A=e=>{v=!0,0===x.length&&("Machine_Gun"===t?(dn=20,x.push(setInterval((()=>{0===dn?clearInterval(x[0]):(dn-=1,ze("good_hit",f.x-24,f.y-24,90*Math.floor(4*Math.random())))}),250))):"Magnet_Drone"===t&&x.push(setInterval((()=>{g(L,f.x,f.y,200)}),100)))},w=e=>{e.preventDefault(),f=m(e,h),d=m(e,document.body),g(r,d.x,d.y,64)};c(a,"mousedown",(a=>{a.preventDefault(),r.style.top="-1000px",r.style.left="-1000px",e(document.body,r),c(document.body,"mousemove",w),c(h,"mouseenter",A),l.clearRect(0,0,64,64),l.drawImage(i,16*b,0,16,16,0,0,64,64),"Magnet_Drone"===t?(null!==L&&n(j,L),(()=>{const n=o("div");n.id="magnet_hitbox",p(n,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        z-index: 5;\n        background-color: rgba(255,255,255, 0.5);\n    "),L=n,e(s(".wrapper"),n)})()):("Force-field_Drone"===t&&this.cooldown(15e3),"Lightning_Rod_Drone"===t&&this.cooldown(15e3),"Air_Strike"===t&&this.cooldown(5e3),"Machine_Gun"===t&&this.cooldown(15e3),"Drone_GPS_Hack"===t&&this.cooldown(2e4),"Repair_Drone"===t&&this.cooldown(2e4)),["Magnet_Drone","Lightning_Rod_Drone","Force-field_Drone"].includes(this.name)&&null!==Ne[Ze(this.name)]&&He(Ze(this.name))})),c(document.body,"mouseup",(e=>{u(document.body,"mousemove",w),u(h,"mouseenter",A);let o=m(e,h);!0===v&&("Air_Strike"===this.name&&ze("good_missile",o.x,o.y,0),["Magnet_Drone","Lightning_Rod_Drone","Force-field_Drone"].includes(this.name)&&((e,n,t)=>{let o,r;"Lightning_Rod_Drone"===e?(o=Y,r="lightning_rod_drone"):"Magnet_Drone"===e?(o=J,r="magnet_drone"):"Force-field_Drone"===e&&(o=q,r="force_field_drone"),Oe(j,r,32,o,n,t,0,!0,1)})(t,o.x-32,o.y-32),v=!1),clearInterval(x[0]),x=[],null!=s(`.mini-canvas.${this.name}`)&&n(document.body,r),l.clearRect(0,0,y,y)})),c(a,"mouseenter",(e=>{Fe(e.target.id,e.target)}))}}const un=o("div");r(un,["game"]),e(document.body,un),p(un,"\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n    position:relative;\n    width:100%;\n    left: -100px;\n"),e(un,(()=>{p(document.body,`\n        background-color: #242424;\n        background-image: url("${P}");\n        background-size: 70px;\n        background-repeat: repeat;\n    `);const n=(()=>{const n=o("div");return r(n,["wrapper"]),p(n,"\n        position:relative;\n        border: 5px solid darkslategray;\n        width:640px;\n        height:640px;\n    "),e(document.body,n),j=n,n})(),t=rn(640,640,0),i=rn(640,640,1);e(n,t),e(n,i),(e=>{Oe(e,"package_drone",32,G,500,300,5,!0,1)})(n),(n=>{const t=o("div");r(t,["shadwrap"]),p(t,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n        pointer-events:none;\n    "),e(n,t),e(t,Je("start")),N=t,(n=>{let t=o("div");r(t,["edge","left"]),p(t,"\n            left: -15px;\n            top: -10px;\n            height: 660px;\n            width: 10px;\n            position:absolute;\n    "),e(n,t),t=o("div"),r(t,["edge","top"]),p(t,"\n            left: -10px;\n            top: -15px;\n            height: 10px;\n            width: 660px;\n            position:absolute;\n    "),e(n,t),t=o("div"),r(t,["edge","bottom"]),p(t,"\n            left: 0px;\n            top: 635px;\n            height: 10px;\n            width: 660px;\n            position:absolute;\n    "),e(n,t),t=o("div"),r(t,["edge","right"]),p(t,"\n            left: 635px;\n            top: 0px;\n            height: 660px;\n            width: 10px;\n            position:absolute;\n    "),e(n,t)})(n)})(n),console.log("commencing"),function(e,n,t){const o=()=>{window.requestAnimationFrame(o);const e=window.performance.now(),n=e-on;n<tn||(on=e-n%tn,Ve())};o()}();const a=(Ke=o("div"),r(Ke,["button-overlay"]),p(Ke,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(n=>{e(n,Xe("changebg",8,Qe,16,16))})(Ke),Ke);return e(n,a),n})()),e(un,(()=>{const n=(()=>{const n=o("div");return r(n,["mini-wrapper"]),p(n,"\n        position:relative;\n        background-color: #000000;\n        border: 5px solid darkslategray;\n        width: 640px;\n        display:flex;\n        justify-content: space-around;\n        height:64px;\n        align-items:center;\n        margin-top: 10px;\n    "),e(document.body,n),n})();return t=n,ee.map((n=>e(t,(e=>{const n=new Image;n.src=te;const t=new cn(e,n,te,ln.length),o=t.init();return ln.push(t),o})(n)))),pe(),(()=>{const n=o("div");r(n,["infoScreen"]),p(n,"\n        width: 250px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: 650px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n    "),e(n,(()=>{const e=o("div");return r(e,["infoTop"]),p(e,"\n        padding: 5px;\n    "),e})()),e(n,(()=>{const e=o("div");return r(e,["infoBottom"]),e})()),e(j,(()=>{const n=o("div");r(n,["healthbar"]),p(n,"\n        width: 32px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: -52px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n        display:flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    "),je(n);const t=o("div");return p(t,`\n        position:absolute;\n        width: 16px;\n        height: 16px;\n        background: url(${te}) -128px 0px;\n        scale: 300%;\n        image-rendering: pixelated;\n        left: 8px;\n        z-index: 5;\n        transform: translate(0, 3px);\n    `),e(n,t),n})()),e(j,n)})(),(n=>{const t=o("div");r(t,["cutscene"]),t.style.visibility=ge?"visible":"hidden",p(t,`\n        height:320px;\n        width: 320px;\n        scale: 2;\n        position:absolute;\n        top: 160px;\n        left: 160px;\n        background: url(${he}) -${320*me}px 0px;\n        image-rendering: pixelated;\n        z-index: 6;\n    `),e(n,t);const i=o("div");r(i,["start-but","button"]),p(i,"\n        width: 100px;\n        height:50px;\n        position:absolute;\n        left: 270px;\n        top: 450px;\n        background-color: darkred;\n        color: white;\n        font-family: munro;\n        font-size: 30px;\n        padding:5px;\n        padding-bottom: 0px;\n        text-align: center;\n        vertical-align: center;\n        z-index: 7;\n    "),d(i,"Start"),c(i,"click",ye),e(n,i)})(j),n;var t})()),e(un,(()=>{const n=(()=>{const n=o("div");r(n,["debug-wrapper"]),p(n,"\n        position:relative;\n    ");const t=o("input");t.id="slider1",c(t,"input",sn),h(t,["type","min","max","value","class"],["range","0","640","0","slidey"]),e(n,t);const i=o("input");i.id="slider2",c(i,"input",sn),h(i,["type","min","max","value","class"],["range","0","640","0","slidey"]),e(n,i);const a=o("h1");a.id="score",p(a,"\n        color:white;\n        font-family: munro;\n    ");const l=o("h1");return l.id="level",p(l,"\n        color:white;\n        font-family:munro;\n    "),d(l,"Level: 0"),((e="bruh")=>{an+=1,d("bruh"===e?s("#score"):e,`Score: ${an}`)})(a),e(n,a),e(n,l),n})();return e(document.body,n),n})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,