(()=>{"use strict";var n={320:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}","",{version:3,sources:["webpack://./src/css/animations.css"],names:[],mappings:"AAAA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B",sourcesContent:[".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}"],sourceRoot:""}]);const s=i},414:(n,e,t)=>{t.d(e,{Z:()=>u});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),s=t(667),l=t.n(s),c=new URL(t(542),t.b),d=i()(r()),p=l()(c);d.push([n.id,`html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(${p}) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */`,"",{version:3,sources:["webpack://./src/css/fonts.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;IACI,oBAAoB;IACpB,+DAA+C;EACjD;;EAEA;;;;;;;;;;GAUC",sourcesContent:["html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(../fonts/munro.ttf) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */"],sourceRoot:""}]);const u=d},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],s=0;s<n.length;s++){var l=n[s],c=o.base?l[0]+o.base:l[0],d=a[c]||0,p="".concat(c," ").concat(d);a[c]=d+1;var u=t(p),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)e[u].references++,e[u].updater(m);else{var f=r(m,o);o.byIndex=s,e.splice(s,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var l=o(n,r),c=0;c<a.length;c++){var d=t(a[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=l}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},542:(n,e,t)=>{n.exports=t.p+"f78662ff4aad4d038806.ttf"}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var o=e.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!n;)n=o[r--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{const n=(n,e)=>{n.appendChild(e)},e=(n,e)=>{e.parentNode===n&&n.removeChild(e)},o=n=>document.createElement(n),r=(n,e)=>{e.forEach((e=>{n.classList.add(e)}))},a=(n,e)=>n.classList.contains(e),i=(n,e)=>{e.forEach((e=>{n.classList.remove(e)}))},s=n=>document.querySelector(n),l=n=>document.querySelectorAll(n),c=(n,e)=>{n.textContent=e},d=(n,e,t)=>{n.addEventListener(e,t)},p=(n,e,t)=>{n.removeEventListener(e,t)},u=(n,e)=>{n.style.cssText=e},m=(n,e,t)=>{e.map(((e,o)=>{n.setAttribute(e,t[o])}))},f=(n,e,t,o)=>{n.style.top=t-o/2+"px",n.style.left=e-o/2+"px"},h=(n,e)=>{const t=e.getBoundingClientRect();return{x:n.clientX-t.left,y:n.clientY-t.top}},g=(n,e)=>{if(null===n||null===e)return!1;const t=n.getBoundingClientRect(),o=e.getBoundingClientRect();return!(t.right<o.left||t.left>o.right||t.bottom<o.top||t.top>o.bottom)},A=(n,e)=>{const t=n.style.left,o=n.style.top;return{x:Number(t.substring(0,t.length-2))+e/2,y:Number(o.substring(0,o.length-2))+e/2}};var b=t(379),v=t.n(b),x=t(795),y=t.n(x),C=t(569),w=t.n(C),B=t(565),_=t.n(B),M=t(216),k=t.n(M),I=t(589),E=t.n(I),$=t(320),z={};z.styleTagTransform=E(),z.setAttributes=_(),z.insert=w().bind(null,"head"),z.domAPI=y(),z.insertStyleElement=k(),v()($.Z,z),$.Z&&$.Z.locals&&$.Z.locals;var S=t(414),R={};R.styleTagTransform=E(),R.setAttributes=_(),R.insert=w().bind(null,"head"),R.domAPI=y(),R.insertStyleElement=k(),v()(S.Z,R),S.Z&&S.Z.locals&&S.Z.locals;const D=t.p+"2303bf42784ad28af8cb.gif",T=t.p+"82e9ac88b221b8bd6b76.png",P=(t.p,t.p+"46f9a3232743a28fe55c.mp3"),L=t.p+"f6a9d30b202864f403ab.mp3",j=t.p+"4b0a7fa0436041018c59.mp3",N=t.p+"2313cadcd41e0912116a.mp3",O=t.p+"db5db37355927833123f.mp3",Z=t.p+"9a548da064d95ad7ec01.mp3";let F=[];const U=(n,e)=>{var t=new Audio(n);F.push({audio:t,name:e})};let q=null,G=null,H=null,J=null;const K=t.p+"89cc97a32f3bdd1a1f7c.png";let X;const Y=(n,e,t)=>{Q(X,n)},Q=(n,e)=>{n.forEach(((n,t)=>{n.forEach(((n,o)=>{W(n,t,o,e)}))}))},W=(n,e,t,o)=>{const r=64;let a=new Image;a.src=K,a.onload=function(){o.drawImage(a,n*r,0,r,r,e*r,t*r,r,r)}},V=t.p+"c488352b32cb2834c60f.png",nn=t.p+"dc3293068f5630490558.png",en=t.p+"6c039a05fb3f3dab314c.png",tn=t.p+"e2b44efb30368e5df2a8.png";let on=[];const rn=(n,e,t)=>{let o,a;"gunner_drone"===n&&(o=nn,a=200),"missile_drone"===n&&(o=en,a=400),"attack_drone"===n&&(o=tn,a=500);let i=Math.floor(Math.random()*a);const s=sn(G,n,32,o,e,t,5,!0,1);r(s,["enemy"]),on.push({ele:s,type:n,firing:!1,x:e,y:t,fireevery:a,timer:i,timeout:null})};let an=[];const sn=(e,t,a,i,s,l,c,d,p)=>{const f=o("canvas");let h;r(f,["spritecanvas"]),m(f,["id","width","height"],[t,"64px","64px"]),"none"===i?h="none":(h=new Image,h.src=i),u(f,`\n        position:absolute;\n        pointer-events:none;\n        top: ${l}px;\n        left: ${s}px;\n    `);let g={name:t,size:a,ele:f,x:s,y:l,direction:"left",img:h,speed:c,direction_data:{none:0},draw_index:0,frame:0,show:d,frames:p,updates_per_frames:2,timer:1};if(an.push(g),d){const t=f.getContext("2d");t.imageSmoothingEnabled=!1,h.onload=function(){t.clearRect(0,0,64,64),t.drawImage(h,0,0*a,a,a,0,0,64,64)},n(e,f)}return"package_drone"===t&&(H=f),f},ln=(n,e,t)=>{u(an[n].ele,`\n        position:absolute;\n        pointer-events:none;\n        top: ${t}px;\n        left: ${e}px;\n    `)},cn=t.p+"39e6521c1a1cd6dea9e1.png";let dn=[];const pn=(e,t,a,i)=>{const s=o("div");let l,c,d,p;"wind"===e&&(l=9,c=200,d=2,p=2),r(s,["effect",e]),u(s,`\n        scale: ${p};\n        top: ${a}px;\n        left: ${t}px;\n        height: 16px;\n        width: 16px;\n        background: url(${cn}) -${16*l}px 0;\n        position:absolute;\n        image-rendering: pixelated;\n        transform: rotate(${i}deg);\n    `),dn.push({type:e,x:t,y:a,speed:d,fadein:c,rot:i}),n(J,s)},un=e=>{const t=o("div");let a;r(t,["shader"]),t.id=e,"light-shader"===e?a="\n            background-image: linear-gradient(135deg, rgba(227, 245, 66, 0.3), rgba(230, 201, 147, 0.1));\n        ":"dark-shader"===e&&(a="\n            background-image: linear-gradient(135deg, rgba(54, 88, 163, 0.3), rgba(90, 76, 115, 0.6));\n        "),u(t,`\n        height:640px;\n        width: 640px;\n        position: absolute;\n        ${a}\n    `),n(J,t)},mn=t=>{const a=o("div");r(a,["level","shader"]),a.id=t,u(a,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),dn=[],l(".effect").forEach((n=>{e(J,n)})),(n=>{on=[],l(".enemy").forEach((n=>{e(G,n)})),"level-1"===n?(rn("gunner_drone",70,450),rn("gunner_drone",100,50)):"level-2"===n?(rn("gunner_drone",150,450),rn("gunner_drone",100,100)):"level-3"===n?(rn("gunner_drone",50,50),rn("gunner_drone",70,400),rn("gunner_drone",300,400)):"level-4"===n?(rn("gunner_drone",50,50),rn("gunner_drone",200,500),rn("missile_drone",400,400),rn("gunner_drone",200,200)):"level-5"===n?(rn("gunner_drone",150,500),rn("gunner_drone",200,350),rn("gunner_drone",300,500),rn("missile_drone",70,70),rn("gunner_drone",500,550)):"level-6"===n?(rn("gunner_drone",500*Math.random()+50,500*Math.random()+50),rn("gunner_drone",50,300),rn("gunner_drone",100,500*Math.random()+50),rn("missile_drone",400,400),rn("missile_drone",500*Math.random()+50,500*Math.random()+50)):"level-7"===n?(rn("gunner_drone",500*Math.random()+50,300),rn("gunner_drone",200,500*Math.random()+50),rn("gunner_drone",300*Math.random()+300,500*Math.random()+50),rn("missile_drone",400,500*Math.random()+50),rn("missile_drone",500*Math.random()+50,500*Math.random()+50),rn("attack_drone",320,200*Math.random()+220)):"level-8"===n?(rn("gunner_drone",500*Math.random()+50,300),rn("gunner_drone",500,500*Math.random()+50),rn("gunner_drone",500*Math.random()+50,500),rn("gunner_drone",500*Math.random()+50,500*Math.random()+50),rn("missile_drone",100,500*Math.random()+50),rn("missile_drone",500*Math.random()+50,500*Math.random()+50),rn("attack_drone",250,200*Math.random()+20),rn("attack_drone",450,200*Math.random()+420)):"level-9"===n&&(rn("gunner_drone",100,100),rn("gunner_drone",500*Math.random()+50,320),rn("gunner_drone",500*Math.random()+50,500*Math.random()+50),rn("missile_drone",500*Math.random()+50,550),rn("missile_drone",500*Math.random()+50,150),rn("missile_drone",200*Math.random()+50,200*Math.random()+50),rn("missile_drone",300*Math.random()+250,300*Math.random()+250),rn("attack_drone",150,200*Math.random()+220),rn("attack_drone",350,200*Math.random()+220),rn("attack_drone",450,150))})(t),"level-1"===t?(n(a,fn(0,200,300,150)),n(a,fn(200,350,440,150))):"level-2"===t?(n(a,fn(400,200,240,100)),n(a,fn(300,200,100,300)),n(a,fn(100,500,300,50)),n(a,fn(0,550,150,50))):"level-3"===t?(n(a,fn(140,550,500,50)),n(a,fn(140,320,50,230)),n(a,fn(140,270,320,50)),n(a,fn(410,220,50,50)),n(a,fn(0,170,460,50))):"level-4"===t?(n(a,fn(360,170,280,100)),n(a,fn(220,270,200,50)),n(a,fn(100,320,170,50)),n(a,fn(0,370,160,50)),pn("wind",20,100,0)):"level-5"===t?(n(a,fn(480,370,160,50)),n(a,fn(430,230,50,360)),n(a,fn(317,180,233,50)),n(a,fn(550,78,50,152)),n(a,fn(100,478,50,112)),n(a,fn(267,275,50,203)),n(a,fn(188,78,50,111)),n(a,fn(138,134,50,141)),n(a,fn(100,28,500,50)),n(a,fn(100,590,380,50)),n(a,fn(100,428,167,50)),n(a,fn(0,275,267,50)),pn("wind",20,100,90)):"level-6"===t&&(n(a,fn(373,275,267,50)),n(a,fn(373,325,50,315))),"level-10"!==t&&n(a,hn(":)")),n(J,a)},fn=(n,e,t,a)=>{const i=o("div");return r(i,["pathblock"]),u(i,`\n        background-color: rgba(245, 66, 66, 0.3);\n        left: ${n}px;\n        top: ${e}px;\n        height: ${a}px;\n        width: ${t}px;\n        position:absolute;\n    `),i},hn=n=>{const e=o("div");return r(e,["endblock"]),u(e,"\n            background-color: rgba(34, 117, 59, 0.6);\n            left: 0px;\n            top: 0px;\n            height: 640px;\n            width: 10px;\n            position:absolute;\n        "),e};let gn=0;const An=[4,5,8,9,10],bn=["Magnet_Drone","Gunner_Drone","Lightning_Rod_Drone","Air_Strike","Machine_Gun","Drone_Control_Hack","Drone_GPS_Hack","Recall_Drones","Repair_Package_Drone"],vn=["\nAttracts metal towards it\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Cooldown: none\n","\nShoots things in a small radius\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Ammo: 10 bullets\n- Damage: low\n- Cooldown: 20 seconds\n","\nAbsorbs lightning in a small radius\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Shatters after 3 lightning strikes\n- Cooldown: 20 seconds\n","\nCall a missile to any point on the field\n\n- Ammo: 1 missile\n- Damage: high\n- Cooldown: 10 seconds\n","\nFires shots at any point on the field,\nmachine overheats after 20 shots\n\n- Ammo: 20 bullets\n- Firerate: 4 bullets per second\n- Cooldown: 20 seconds\n","\nMakes drones moveable temporarily,\ndrag onto desired drone and\ndrag affected drone to move it\n\n- Duration: 10 seconds\n- Cooldown: 30 seconds\n","\nLocks a drone's position temporarily,\ndrag onto desired drone\n\n- Duration: 10 seconds\n- Cooldown: 30 seconds\n","\nRemove all placed drones from field.\n\n- Cooldown: none\n","\nWhen near package drone, restores\n2 health per 5 seconds.\n\n- Cooldown: 30 seconds\n"];let xn;const yn=(n,e,t,a,i)=>{const s=o("div");return r(s,["button",n]),s.id=n,u(s,`\n            position: absolute;\n            left:${a}px;\n            top: ${i}px;\n            width: 32px;\n            height: 32px;\n            background: url(${T}) -${32*e}px 0;\n        `),d(s,"click",t),s},Cn=()=>{l(".shader").forEach((n=>{e(J,n)})),gn+=1,c(s("#level"),`Level: ${gn}`),mn(`level-${gn}`),An.includes(gn)?un("dark-shader"):un("light-shader"),10===gn&&(gn=0)},wn=()=>{let n=g(q,H);if(n&&(n=>{const e=A(q,200);((n,e,t)=>{const o=an[n],r=e-o.size/2,a=t-o.size/2,i=r-o.x,s=a-o.y,l=Math.sqrt(i*i+s*s),c=i/l*o.speed,d=s/l*o.speed,p=o.x+c-o.size/2,u=o.y+d-o.size/2,m=(an[n].size,((n,e)=>{if(n>0&&e>0&&n<=640&&e<=640){const t=Math.floor(n/64),o=Math.floor(e/64);X[t][o]}})(p,u),p>640-o.size/2||p<0-o.size/2||u>640-o.size/2||u<0-o.size/2);if(l>o.speed&&!m){an[n].x=p+o.size/2,an[n].y=u+o.size/2,ln(n,p,u);let e=Math.atan(-d/c);c<0&&(-d<0?e-=Math.PI:e+=Math.PI),e*=180/Math.PI;let t="left";e>=22.5&&e<=67.5?t="upright":e>=67.5&&e<=112.5?t="up":e>=112.5&&e<=157.5?t="upleft":e<=22.5&&e>=-22.5?t="right":e<=-22.5&&e>=-67.5?t="downright":e<=-67.5&&e>=-112.5?t="down":e<=-112.5&&e>=-157.5?t="downleft":e>=157.5&&e<=-157.5&&(t="left")}})(0,e.x,e.y)})(),l(".pathblock").forEach((e=>{g(e,H)&&(n=!0)})),g(s(".endblock"),H)){if(0===gn)f(H,600,420,64),an[0].x=600,an[0].y=420;else{const n=A(H,64);f(H,n.x+580,n.y,64),an[0].x=n.x+580,an[0].y=n.y}Cn()}},Bn=(n,e)=>{const t=Math.floor(e.x/64),o=Math.floor(e.y/64);let r=X[t][o];r++,20==r&&(r=0),((n,e,t)=>{X[n][e]=t})(t,o,r)},_n=1e3/30;let Mn=window.performance.now();const kn=(n,e,t)=>{const i=o("canvas");r(i,["game-canvas",`layer-${t}`]),m(i,["width","height"],[`${n}px`,`${e}px`]),u(i,"\n        position:absolute;\n    ");const s=i.getContext("2d");return(n=>{d(n,"click",(e=>{n.getContext("2d");const t=function(n,e){const t=n.getBoundingClientRect();return{x:e.clientX-t.left,y:e.clientY-t.top}}(n,e);a(n,"layer-1")&&Bn(0,t)}))})(i),0===t&&((n,e,t)=>{X=new Array(10).fill(0).map((()=>new Array(10).fill(10))),X[2][1]=11,X[9][9]=18,X[9][8]=18,X[8][8]=19,X[8][9]=19,console.log(X),Y(n)})(s),i};let In=-1;const En=n=>{"slider1"===n.target.id?s(".layer-1").style.left=`${n.target.value}px`:"slider2"===n.target.id&&(s(".button-overlay").style.left=`${n.target.value}px`)},$n=t.p+"89d1863fe0155e15b8ec.png";let zn=20;const Sn=e=>{let t,r;null===s(".healthbar")?(t=zn,r=e):"number"==typeof e&&(t=e,zn=t,r=s(".healthbar"),r.textContent="");for(let e=0;e<t;e++){const t=20-e,a=350,i=470,s=Math.floor(t/20*(i-a)+a),l=o("div");l.id=`heart-${t}`,u(l,`\n            height:28px;\n            width: 28px;\n            margin: 2px;\n            background-color: hsl(${s}, 70%, 62%);\n        `),n(r,l)}};let Rn=[];function Dn(t,a,l,g){this.name=t,this.index=g,this.img=a,this.imgsrc=l,this.currentFrame=0,this.canvele,this.imgele,this.init=()=>{const n=this.index;this.addedleft=64*Rn.length,this.size;const e=this.name,t=o("canvas");r(t,["mini-canvas",`${e}`]),m(t,["width","height"],["64px","64px"]),u(t,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const a=t.getContext("2d"),i=this.img;a.imageSmoothingEnabled=!1,i.onload=function(){a.clearRect(0,0,64,64),a.drawImage(i,16*n,0,16,16,0,0,64,64)},this.canvele=t,this.ctx=a;const s=o("canvas");r(s,["canvas-icon"]),m(s,["width","height","id"],["64px","64px",e]),u(s,"\n\n        ");const l=s.getContext("2d");return l.imageSmoothingEnabled=!1,i.onload=function(){l.clearRect(0,0,64,64),l.drawImage(i,16*n,0,16,16,0,0,64,64)},s.dataset.imgsrc=this.imgsrc,s.dataset.index=n,this.imgele=s,this.initMouse(t,s),s},this.initMouse=(l,g)=>{const A=l.getContext("2d");let b;const v=G;let x,y=[],C=this.size,w=(this.currentFrame,this.index);const B=n=>{0===y.length&&y.push(setInterval((()=>{"Magnet_Drone"===t&&f(q,x.x,x.y,200)}),100))},_=n=>{n.preventDefault(),x=h(n,v),b=h(n,document.body),f(l,b.x,b.y,64)};d(g,"mousedown",(e=>{e.preventDefault(),l.style.top="-1000px",l.style.left="-1000px",n(document.body,l),d(document.body,"mousemove",_),d(v,"mouseenter",B),A.clearRect(0,0,64,64),A.drawImage(a,16*w,0,16,16,0,0,64,64),"Magnet_Drone"===t&&(()=>{const e=o("div");e.id="magnet_hitbox",u(e,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        background-color:rgba(255,255,255, 0.5);\n        z-index: 5;\n    "),q=e,n(s(".wrapper"),e)})()})),d(document.body,"mouseup",(n=>{p(document.body,"mousemove",_),p(v,"mouseenter",B),y.length,clearInterval(y[0]),y=[],null!=s(`.mini-canvas.${this.name}`)&&e(document.body,l),A.clearRect(0,0,C,C),"Magnet_Drone"===t&&null!==q&&e(G,q)})),d(g,"mouseenter",(e=>{((e,t)=>{const a=t.cloneNode(!1);a.id="infoPic",i(a,["canvas-icon"]),m(a,["width","height"],["64px","64px"]),u(a,"\n        padding-left: 5px;\n        padding-top: 10px;\n    ");const l=a.getContext("2d");l.imageSmoothingEnabled=!1;const d=new Image;d.src=a.dataset.imgsrc;const p=a.dataset.index;d.onload=function(){l.clearRect(0,0,64,64),l.drawImage(d,16*p,0,16,16,0,0,64,64)};const f=s(".infoTop");f.textContent="";const h=o("div");r(h,["infoTitle"]);let g=e.replace("_"," ");g=g.replace("_"," "),c(h,g),u(h,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n    ");const A=o("div");r(A,["infoText"]),u(A,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 15px;\n        white-space: pre;\n    "),c(A,vn[p]),n(f,h),n(f,a),n(f,A)})(e.target.id,e.target)}))}}const Tn=o("div");r(Tn,["game"]),n(document.body,Tn),u(Tn,"\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n    position:relative;\n    width:100%;\n    left: -100px;\n"),n(Tn,(()=>{u(document.body,`\n        background-color: #242424;\n        background-image: url("${D}");\n        background-size: 70px;\n        background-repeat: repeat;\n    `);const e=(()=>{const e=o("div");return r(e,["wrapper"]),u(e,"\n        position:relative;\n        border: 5px solid darkslategray;\n        width:640px;\n        height:640px;\n    "),n(document.body,e),G=e,e})(),t=kn(640,640,0),a=kn(640,640,1);n(e,t),n(e,a),(n=>{sn(n,"package_drone",32,V,100,300,5,!0,1)})(e),(e=>{const t=o("div");r(t,["shadwrap"]),u(t,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),n(e,t),n(t,hn("start")),J=t})(e),console.log("commencing"),function(n,e,t){const o=()=>{window.requestAnimationFrame(o);const e=window.performance.now(),t=e-Mn;t<_n||(Mn=e-t%_n,n.map(((n,e)=>{const t=n.getContext("2d");0===e&&Y(t)})),wn())};o()}([t,a]);const i=(xn=o("div"),r(xn,["button-overlay"]),u(xn,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(e=>{n(e,yn("changebg",8,Cn,16,16))})(xn),xn);return n(e,i),e})()),n(Tn,(()=>{const e=(()=>{const e=o("div");return r(e,["mini-wrapper"]),u(e,"\n        position:relative;\n        background-color: #000000;\n        border: 5px solid darkslategray;\n        width: 640px;\n        display:flex;\n        justify-content: space-around;\n        height:64px;\n        align-items:center;\n        margin-top: 10px;\n    "),n(document.body,e),e})();return t=e,bn.map((e=>n(t,(n=>{const e=new Image;e.src=$n;const t=new Dn(n,e,$n,Rn.length),o=t.init();return Rn.push(t),o})(e)))),(()=>{const e=o("div");r(e,["infoScreen"]),u(e,"\n        width: 250px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: 650px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n    "),n(e,(()=>{const n=o("div");return r(n,["infoTop"]),u(n,"\n        padding: 5px;\n    "),n})()),n(e,(()=>{const n=o("div");return r(n,["infoBottom"]),n})()),n(G,(()=>{const e=o("div");r(e,["healthbar"]),u(e,"\n        width: 32px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: -52px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n        display:flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    "),Sn(e);const t=o("div");return u(t,`\n        position:absolute;\n        width: 16px;\n        height: 16px;\n        background: url(${$n}) -144px 0px;\n        scale: 300%;\n        image-rendering: pixelated;\n        left: 8px;\n        z-index: 5;\n        transform: translate(0, 3px);\n    `),n(e,t),e})()),n(G,e)})(),U(L,"click"),U(P,"close"),U(j,"coin"),U(N,"epic"),U(O,"swipe"),U(Z,"open"),e;var t})()),n(Tn,(()=>{const e=(()=>{const e=o("div");r(e,["debug-wrapper"]),u(e,"\n        position:relative;\n    ");const t=o("input");t.id="slider1",d(t,"input",En),m(t,["type","min","max","value","class"],["range","0","640","0","slidey"]),n(e,t);const a=o("input");a.id="slider2",d(a,"input",En),m(a,["type","min","max","value","class"],["range","0","640","0","slidey"]),n(e,a);const i=o("h1");i.id="score",u(i,"\n        color:white;\n        font-family: munro;\n    ");const l=o("h1");return l.id="level",u(l,"\n        color:white;\n        font-family:munro;\n    "),c(l,"Level: 0"),((n="bruh")=>{In+=1,c("bruh"===n?s("#score"):n,`Score: ${In}`)})(i),n(e,i),n(e,l),e})();return n(document.body,e),e})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,