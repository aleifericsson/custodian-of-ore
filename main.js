(()=>{"use strict";var e={320:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}","",{version:3,sources:["webpack://./src/css/animations.css"],names:[],mappings:"AAAA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B",sourcesContent:[".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}"],sourceRoot:""}]);const s=i},414:(e,n,t)=>{t.d(n,{Z:()=>u});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),s=t(667),l=t.n(s),d=new URL(t(542),t.b),c=i()(r()),p=l()(d);c.push([e.id,`html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(${p}) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */`,"",{version:3,sources:["webpack://./src/css/fonts.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;IACI,oBAAoB;IACpB,+DAA+C;EACjD;;EAEA;;;;;;;;;;GAUC",sourcesContent:["html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(../fonts/munro.ttf) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */"],sourceRoot:""}]);const u=c},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);o&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),n.push(c))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},i=[],s=0;s<e.length;s++){var l=e[s],d=o.base?l[0]+o.base:l[0],c=a[d]||0,p="".concat(d," ").concat(c);a[d]=c+1;var u=t(p),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)n[u].references++,n[u].updater(m);else{var g=r(m,o);o.byIndex=s,n.splice(s,0,{identifier:p,updater:g,references:1})}i.push(p)}return i}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=t(a[i]);n[s].references--}for(var l=o(e,r),d=0;d<a.length;d++){var c=t(a[d]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}a=l}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},542:(e,n,t)=>{e.exports=t.p+"f78662ff4aad4d038806.ttf"}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!e;)e=o[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{const e=(e,n)=>{e.appendChild(n)},n=(e,n)=>{n.parentNode===e&&e.removeChild(n)},o=e=>document.createElement(e),r=(e,n)=>{n.forEach((n=>{e.classList.add(n)}))},a=(e,n)=>e.classList.contains(n),i=(e,n)=>{n.forEach((n=>{e.classList.remove(n)}))},s=e=>document.querySelector(e),l=e=>document.querySelectorAll(e),d=(e,n)=>{e.textContent=n},c=(e,n,t)=>{e.addEventListener(n,t)},p=(e,n,t)=>{e.removeEventListener(n,t)},u=(e,n)=>{e.style.cssText=n},m=(e,n,t)=>{n.map(((n,o)=>{e.setAttribute(n,t[o])}))},g=(e,n,t,o)=>{e.style.top=t-o/2+"px",e.style.left=n-o/2+"px"},h=(e,n)=>{const t=n.getBoundingClientRect();return{x:e.clientX-t.left,y:e.clientY-t.top}},f=(e,n)=>{if(null===e||null===n)return!1;const t=e.getBoundingClientRect(),o=n.getBoundingClientRect();return!(t.right-15<o.left+15||t.left+15>o.right-15||t.bottom-15<o.top+15||t.top+15>o.bottom-15)},b=(e,n)=>{if(null===e||null===n)return!1;const t=e.getBoundingClientRect(),o=n.getBoundingClientRect();return!(t.right<o.left||t.left>o.right||t.bottom<o.top||t.top>o.bottom)},y=(e,n)=>{const t=e.style.left,o=e.style.top;return{x:Number(t.substring(0,t.length-2))+n/2,y:Number(o.substring(0,o.length-2))+n/2}};var x=t(379),v=t.n(x),A=t(795),w=t.n(A),C=t(569),_=t.n(C),k=t(565),M=t.n(k),I=t(216),B=t.n(I),E=t(589),$=t.n(E),z=t(320),D={};D.styleTagTransform=$(),D.setAttributes=M(),D.insert=_().bind(null,"head"),D.domAPI=w(),D.insertStyleElement=B(),v()(z.Z,D),z.Z&&z.Z.locals&&z.Z.locals;var T=t(414),S={};S.styleTagTransform=$(),S.setAttributes=M(),S.insert=_().bind(null,"head"),S.domAPI=w(),S.insertStyleElement=B(),v()(T.Z,S),T.Z&&T.Z.locals&&T.Z.locals;const P=t.p+"2303bf42784ad28af8cb.gif",R=t.p+"82e9ac88b221b8bd6b76.png",j=(t.p,t.p+"46f9a3232743a28fe55c.mp3"),L=t.p+"f6a9d30b202864f403ab.mp3",N=t.p+"4b0a7fa0436041018c59.mp3",O=t.p+"2313cadcd41e0912116a.mp3",F=t.p+"db5db37355927833123f.mp3",W=t.p+"9a548da064d95ad7ec01.mp3";let Z=[];const U=(e,n)=>{var t=new Audio(e);Z.push({audio:t,name:n})},H=e=>{Z.find((n=>n.name===e)).audio.play()};let Y=null,q=null,G=null,J=null;const K=t.p+"89cc97a32f3bdd1a1f7c.png";let X;const Q=(e,n)=>{e.forEach(((e,t)=>{e.forEach(((e,o)=>{V(e,t,o,n)}))}))},V=(e,n,t,o)=>{const r=64;let a=new Image;a.src=K,a.onload=function(){o.drawImage(a,e*r,0,r,r,n*r,t*r,r,r)}},ee=()=>new Array(10).fill(0).map((()=>new Array(10).fill(10))),ne=t.p+"c488352b32cb2834c60f.png",te=t.p+"dc3293068f5630490558.png",oe=t.p+"6c039a05fb3f3dab314c.png",re=t.p+"e2b44efb30368e5df2a8.png",ae=t.p+"760f5f68047112823cad.png";let ie=0;const se=[4,5,8,9,10];let le=[350,450,250,560,200,350,270];const de=["down","left","up","right","random"],ce=["Magnet_Drone","Gunner_Drone","Lightning_Rod_Drone","Air_Strike","Machine_Gun","Drone_Control_Hack","Drone_GPS_Hack","Recall_Drones","Repair_Package_Drone"],pe=["\nAttracts metal towards it\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Cooldown: none\n","\nShoots things in a small radius\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Ammo: 10 bullets\n- Damage: low\n- Cooldown: 20 seconds\n","\nAbsorbs lightning in a small radius\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Shatters after 3 lightning strikes\n- Cooldown: 20 seconds\n","\nCall a missile to any point on the field\n\n- Ammo: 1 missile\n- Damage: high\n- Cooldown: 10 seconds\n","\nFires shots at any point on the field,\nmachine overheats after 20 shots\n\n- Ammo: 20 bullets\n- Firerate: 4 bullets per second\n- Cooldown: 20 seconds\n","\nMakes drones moveable temporarily,\ndrag onto desired drone and\ndrag affected drone to move it\n\n- Duration: 10 seconds\n- Cooldown: 30 seconds\n","\nLocks a drone's position temporarily,\ndrag onto desired drone\n\n- Duration: 10 seconds\n- Cooldown: 30 seconds\n","\nRemove all placed drones from field.\n\n- Cooldown: none\n","\nWhen near package drone, restores\n2 health per 5 seconds.\n\n- Cooldown: 30 seconds\n","\nHas Dio's special package,\nget it to his house somewhere west.\n","\nShoots low damage burst shots\nin 4 diagonal directions.\n","\nFires heat-seeking missiles\nor torpedoes,  tboth are high damage.\n","\nWill try to ram into you and cut you\nwith its saws. Longer contact means\nmore damage.\n","\nThe boss. Can spawn all drones\nand even summon lightning somehow.\n"],ue=t.p+"89d1863fe0155e15b8ec.png",me=t.p+"288679a9935244c50a6f.png",ge=[["D: My package has been suspiciously failed to be delivered twice in a row now!","D: I'm not even getting refunds for this!!","D: I guess when you want something done you have to do it yourself."],["P: Package drone status: Ready to deliver ref#7355608","P: Package drone status: Aberration detected - access from unautorised party","P: Package drone status: Limited remote control mode activated. Freedom of movement restricted at this admin level","D: Damn, I'm in but I cant' move. Guess I'll need my magnet drones to move the package. At least I haven't triggered security... yet."],["P: Package drone status: Warning. Security drones in area. Deviation from designated path may result in aggression.","D: These will do nothing against what I have in my arsenal."],["P: Package drone status: Warning. Heavy wind detected, recalculation of trajectory detected to remain on path.","D: Might be wise to control the drone's rotors directly with my control hack, even if it is temporary."],["D: What?! The path doesn't even go to my house! Someone's already in the system and stealing packages. No wonder I never got mine.","D: No time to get distracted tho, the sooner I get my package, the sooner I can forget about this scummy company."],["S: Security drone status: Aberration detected in rogue package drone. Requesting immediate backup to eliminate the issue","D: Finally: A reason to go all out"],["D: Hey, that's my house! I'm so close!","d: !!..","A: You have laid waste to my brethren and humiliated me!","A: Why do you persist in protecting a nonsentient piece of scrap metal?","d: I'm just rightfully getting something I paid for. Now get out my way before you end up like the rest of your trash!","A: Such determination you hold for something your life is not dependent on!","A: Unlike you, I will get REPLACED if I fail to elimiate any aberrations, and now your on the top of my list!","d: About time you get an update! Your buggy programming can't detect a real threat to your crumbling company if you ever saw one.","d: There are thieves in your system and you go after a guy who's protecting his legal property?! I think it's time for YOU to pay."],["A: Well, you have defeated me. I failed the one job I was programmed to complete. I will no doubt be replaced soon.","A: Say something nice. It might be the last thing I hear before I'm gone forever","D: We're not too different, man. We both made sacrifices defending metal.","D: Tell me, do you have a name?","A: They refered to me as 'Security AI Beta Test v8.10.04'","D: Haha, no wonder you failed. You never made it past beta!","D: Well then, I will give you a proper name. You will be crowned as the one who guarded pieces of rock minerals.","D: The custodian of ore.","C: Befitting name. So long then, enjoy your package.","D: Finally, it is in my hands!","D: Tungsten cube!!"]];let he=0,fe=[];const be=e=>{H("swipe"),Number.isInteger(e)&&(he=e);const n=xe(fe[he]);he+=1,c(n,"click",ye)},ye=e=>{he<=3&&Be(),H("swipe");let t=e.target;a(t,"dialogue")||(t=t.parentNode,a(t,"dialogue")||(t=t.parentNode)),p(t,"click",ye),r(t,["dialogue-start-end"]),setTimeout((()=>{n(s(".game"),t),fe[he-1].follow&&be()}),200)},xe=n=>{const t=o("div");return r(t,["dialogue","dialogue-start-end"]),m(t,["id","draggable"],[`dialogue-${n.code}`,"false"]),u(t,"\n            color:white;\n            background-color: slategray;\n            border: 5px solid darkslategray;\n            position:absolute;\n            transition: 0.1s;\n            width: 600px;\n            height: 100px;\n            left: calc(50% -200px);\n            top: 500px;\n            display:flex;\n            justify-content: flex-start;\n            align-items: center;\n            gap: 10px;\n            padding: 10px;\n            z-index: 7;\n        "),e(t,ve(n.charactersrc,n.index)),e(t,Ae(n.text,n.charname)),e(s(".game"),t),setTimeout((()=>t.classList.remove("dialogue-start-end")),100),t},ve=(e,n)=>{const t=o("div");return r(t,["charBox"]),u(t,`\n        border: 2px solid darkslategray;\n        min-width: 32px;\n        min-height: 32px;\n        margin: 16px;\n        scale: 2;\n        image-rendering: pixelated;\n        background: url(${e}) -${32*n}px 0px;\n    `),t},Ae=(n,t)=>{const r=o("div"),a=o("div"),i=o("div");return u(r,"\n        position:relative;\n        top: -10px;\n    "),u(a,"\n        color:white;\n        font-family: 'munro';\n        font-size: 20px;\n    "),u(i,"\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n    "),d(a,n),d(i,t),e(r,i),e(r,a),r},we=()=>{ge.map((e=>{e.map(((n,t)=>{const o=n.substring(0,1),r=n.substring(3,n.length);let a,i,s,l=me;s=t!==e.length-1,"D"===o?(a="Dio",i=0):"d"===o?(a="Dio",i=3):"A"===o?(a="Security AI",i=4):"P"===o?(a="Package Drone",i=1):"S"===o?(a="Security Drone",i=2):"C"===o&&(a="Custodian of Ore",i=4),((e,n,t,o,r,a)=>{fe.push({text:e,code:t,charactersrc:o,follow:r,charname:n,index:a})})(r,a,i,l,s,i),i+=1}))}))},Ce=t.p+"9f4a624ec8848f4ec512.png";let _e=!0,ke=0,Me=0;const Ie=(e,n)=>{ke=e,_e=n;const t=s(".cutscene");t.style.visibility=_e?"visible":"hidden",t.style.background=`url(${Ce}) -${320*ke}px 0px`},Be=()=>{3===Me&&(Ie(ke,!1),setTimeout((()=>{be()}),1e3)),0===Me?(Me+=1,p(s(".start-but"),"click",Be),n(q,s(".start-but")),be(),Ie(1,!0)):2===Me?(Ie(2,!0),Me+=1):Me+=1};let Ee=20;const $e=n=>{if(n<=0)Ie(4,!0),s(".healthbar").textContent="",Re(),Ze();else{let t,r;null===s(".healthbar")?(t=Ee,r=n):"number"==typeof n&&(t=n,Ee=t,r=s(".healthbar"),r.textContent="");for(let n=0;n<t;n++){const t=20-n,a=350,i=470,s=Math.floor(t/20*(i-a)+a),l=o("div");l.id=`heart-${t}`,u(l,`\n            height:28px;\n            width: 28px;\n            margin: 2px;\n            background-color: hsl(${s}, 70%, 62%);\n        `),e(r,l)}}},ze=(n,t)=>{const a=t.cloneNode(!1);a.id="infoPic",i(a,["canvas-icon"]),m(a,["width","height"],["64px","64px"]),u(a,"\n        padding-left: 5px;\n        padding-top: 10px;\n    ");const l=a.getContext("2d");l.imageSmoothingEnabled=!1;const c=new Image;c.src=a.dataset.imgsrc;let p=a.dataset.index;["package_drone","gunner_drone","missile_drone","attack_drone","boss_drone"].includes(n)?c.onload=function(){l.clearRect(0,0,64,64),l.drawImage(c,0,0,32,32,0,0,64,64)}:c.onload=function(){l.clearRect(0,0,64,64),l.drawImage(c,16*p,0,16,16,0,0,64,64)},"package_drone"===n&&(p=9),"gunner_drone"===n&&(p=10),"missile_drone"===n&&(p=11),"attack_drone"===n&&(p=12),"boss_drone"===n&&(p=13);const g=s(".infoTop");g.textContent="";const h=o("div");r(h,["infoTitle"]);let f=n.replace("_"," ");f=f.replace("_"," "),d(h,f),u(h,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n        text-transform: capitalize;\n    ");const b=o("div");r(b,["infoText"]),u(b,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 15px;\n        white-space: pre;\n    "),d(b,pe[p]),e(g,h),e(g,a),e(g,b)};let De=[],Te=null,Se=null;const Pe=(n,t,a,i)=>{const s=o("div");let l,d,c,p=a,m=0,g=1,h="none";"wind"===n?(l=9,d=100,m=1,c=2):"bullet"===n?(l=1,d="none",m=10,c=2):"hit"===n?(l=2,d=10,c=2):"lightning_warning"===n?(l=10,d=20,c=4,g=.5):"lightning_strike"===n?(l=4,d=7,m=0,c=4):"lightning_bolt"===n?(l=3,d=7,c=4):"missile"===n?(l=0,d="none",m=15,c=2):"explosion"===n?(l=7,d=10,c=2):"good_missile"===n?(l=0,d="none",m=15,c=2,h=a,p=0):"good_explosion"===n?(l=7,d=10,c=4):"good_hit"===n&&(l=2,d=10,c=4),r(s,["effect",n]),u(s,`\n        scale: ${c};\n        top: ${a}px;\n        left: ${t}px;\n        height: 16px;\n        width: 16px;\n        background: url(${ae}) -${16*l}px 0;\n        position:absolute;\n        image-rendering: pixelated;\n        transform: rotate(${i}deg);\n        opacity: ${g};\n    `);const f={type:n,x:t,y:p,speed:m,fadein:d,rot:i,ele:s,size:16,final_y:h};De.push(f),"good_explosion"===n&&(Te=s),"good_hit"===n&&(null!=Se&&(Le(Se),Se=null),Se=f),e(J,s)},Re=()=>{De=[],l(".effect").forEach((e=>{n(J,e)}))},je=e=>{const n=e.x,t=e.y,o=e.rot+90,r=e.speed*Math.cos(o*(Math.PI/180)),a=e.speed*Math.sin(o*(Math.PI/180)),i=n+r-e.size/2,s=t+a-e.size/2;let d=!1;l(".edge").forEach((n=>{b(n,e.ele)&&(d=!0)})),d?Le(e):(e.x=i+e.size/2,e.y=s+e.size/2,e.ele.style.left=`${e.x}px`,e.ele.style.top=`${e.y}px`)},Le=e=>{n(J,e.ele),De=De.filter((function(n){return n!==e}))};let Ne=[],Oe=!1;const Fe=(e,n,t)=>{let o,a;"gunner_drone"===e&&(o=te,a=75),"missile_drone"===e&&(o=oe,a=150),"attack_drone"===e&&(o=re,a=500);let i=Math.floor(Math.random()*a*.5),s=360*Math.random();const l=He(q,e,32,o,n,t,5,!0,1);r(l,["enemy"]),Ne.push({ele:l,type:e,x:n,y:t,fireevery:a,timer:i,timeout:null,size:64,moving:!1,moveTimer:10,speed:5,rot:s})},We=(e,n)=>{Pe("bullet",e,n,45),Pe("bullet",e,n,135),Pe("bullet",e,n,225),Pe("bullet",e,n,315)},Ze=()=>{Ne=[],l(".enemy").forEach((e=>{n(q,e)}))};let Ue=[];const He=(n,t,a,i,s,l,d,p,g)=>{const h=o("canvas");let f;r(h,["spritecanvas",t]),m(h,["id","width","height"],[t,"64px","64px"]),"none"===i?f="none":(f=new Image,f.src=i),u(h,`\n        position:absolute;\n        top: ${l}px;\n        left: ${s}px;\n    `);let b={name:t,size:a,ele:h,x:s,y:l,direction:"left",img:f,speed:d,direction_data:{none:0},draw_index:0,frame:0,show:p,frames:g,updates_per_frames:2,timer:1};if(Ue.push(b),p){const t=h.getContext("2d");t.imageSmoothingEnabled=!1,f.onload=function(){t.clearRect(0,0,64,64),t.drawImage(f,0,0*a,a,a,0,0,64,64)},e(n,h),c(h,"mouseenter",Ye)}return"package_drone"===t&&(G=h),h.dataset.imgsrc=i,h},Ye=e=>{ze(e.target.id,e.target)},qe=(e,n,t,o)=>{const r=Ue[e],a=o?2:r.speed,i=n-r.size/2,d=t-r.size/2,c=i-r.x,p=d-r.y,u=Math.sqrt(c*c+p*p),m=c/u*a,g=p/u*a,h=r.x+m-r.size/2,y=r.y+g-r.size/2;Math.atan(-g/m),((e,n)=>{if(e>0&&n>0&&e<=640&&n<=640){const t=Math.floor(e/64),o=Math.floor(n/64);X[t][o]}})(h,y);let x=!1;if(l(".edge").forEach((e=>{f(e,r.ele)&&(x=!0)})),x&&"package_drone"===r.name&&(x=!1,b(s(".edge.left"),r.ele)&&Ge(e,6,r.y),b(s(".edge.right"),r.ele)&&Ge(e,634,r.y),b(s(".edge.top"),r.ele)&&Ge(e,r.x,6),b(s(".edge.bottom"),r.ele)&&Ge(e,r.x,634)),u>r.speed&&!x){Ue[e].x=h+r.size/2,Ue[e].y=y+r.size/2,Ge(e,h,y);let n=Math.atan(-g/m);m<0&&(-g<0?n-=Math.PI:n+=Math.PI),n*=180/Math.PI;let t="left";n>=22.5&&n<=67.5?t="upright":n>=67.5&&n<=112.5?t="up":n>=112.5&&n<=157.5?t="upleft":n<=22.5&&n>=-22.5?t="right":n<=-22.5&&n>=-67.5?t="downright":n<=-67.5&&n>=-112.5?t="down":n<=-112.5&&n>=-157.5?t="downleft":n>=157.5&&n<=-157.5&&(t="left")}},Ge=(e,n,t)=>{u(Ue[e].ele,`\n        position:absolute;\n        pointer-events:none;\n        top: ${t}px;\n        left: ${n}px;\n    `)},Je=n=>{const t=o("div");let a;r(t,["shader"]),t.id=n,"light-shader"===n?a="\n            background-image: linear-gradient(135deg, rgba(227, 245, 66, 0.3), rgba(230, 201, 147, 0.1));\n        ":"dark-shader"===n&&(a="\n            background-image: linear-gradient(135deg, rgba(54, 88, 163, 0.3), rgba(90, 76, 115, 0.6));\n        "),u(t,`\n        height:640px;\n        width: 640px;\n        position: absolute;\n        z-index: 5;\n        ${a}\n    `),e(J,t)},Ke=(e,n,t,a)=>{const i=o("div");return r(i,["pathblock"]),u(i,`\n        background-color: rgba(245, 66, 66, 0.3);\n        left: ${e}px;\n        top: ${n}px;\n        height: ${a}px;\n        width: ${t}px;\n        position:absolute;\n    `),i},Xe=e=>{const n=o("div");return r(n,["endblock"]),u(n,"\n            background-color: rgba(34, 117, 59, 0.6);\n            left: 0px;\n            top: 0px;\n            height: 640px;\n            width: 10px;\n            position:absolute;\n        "),n};let Qe;const Ve=(e,n,t,a,i)=>{const s=o("div");return r(s,["button",e]),s.id=e,u(s,`\n            position: absolute;\n            left:${a}px;\n            top: ${i}px;\n            width: 32px;\n            height: 32px;\n            background: url(${R}) -${32*n}px 0;\n        `),c(s,"click",t),s},en=()=>{l(".shader").forEach((e=>{n(J,e)})),ie+=1,d(s("#level"),`Level: ${ie}`),(n=>{const t=o("div");r(t,["level","shader"]),t.id=n,u(t,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),Re(),(e=>{Ze(),"level-1"===e?(Fe("gunner_drone",70,450),Fe("gunner_drone",100,50)):"level-2"===e?(Fe("gunner_drone",150,450),Fe("gunner_drone",100,100)):"level-3"===e?(Fe("gunner_drone",50,50),Fe("gunner_drone",70,400),Fe("gunner_drone",300,400)):"level-4"===e?(Fe("gunner_drone",50,50),Fe("gunner_drone",200,500),Fe("missile_drone",400,400),Fe("gunner_drone",200,200)):"level-5"===e?(Fe("missile_drone",150,500),Fe("gunner_drone",200,350),Fe("gunner_drone",300,500),Fe("missile_drone",70,70),Fe("gunner_drone",500,550)):"level-6"===e?(Fe("gunner_drone",500*Math.random()+50,500*Math.random()+50),Fe("gunner_drone",50,300),Fe("gunner_drone",100,500*Math.random()+50),Fe("missile_drone",400,400)):"level-7"===e?(Fe("gunner_drone",500*Math.random()+50,300),Fe("gunner_drone",200,500*Math.random()+50),Fe("gunner_drone",300*Math.random()+300,500*Math.random()+50),Fe("missile_drone",400,500*Math.random()+50),Fe("missile_drone",500*Math.random()+50,500*Math.random()+50),Fe("attack_drone",320,200*Math.random()+220)):"level-8"===e?(Fe("gunner_drone",500*Math.random()+50,300),Fe("gunner_drone",500,500*Math.random()+50),Fe("gunner_drone",500*Math.random()+50,500),Fe("missile_drone",500*Math.random()+50,500*Math.random()+50),Fe("missile_drone",100,500*Math.random()+50),Fe("missile_drone",500*Math.random()+50,500*Math.random()+50),Fe("attack_drone",250,200*Math.random()+20),Fe("attack_drone",450,200*Math.random()+420)):"level-9"===e&&(Fe("gunner_drone",100,100),Fe("gunner_drone",500*Math.random()+50,320),Fe("gunner_drone",500*Math.random()+50,500*Math.random()+50),Fe("missile_drone",500*Math.random()+50,550),Fe("missile_drone",500*Math.random()+50,150),Fe("missile_drone",200*Math.random()+50,200*Math.random()+50),Fe("missile_drone",300*Math.random()+250,300*Math.random()+250),Fe("attack_drone",150,200*Math.random()+220),Fe("attack_drone",350,200*Math.random()+220),Fe("attack_drone",450,150))})(n),"level-1"===n?(e(t,Ke(0,200,300,150)),e(t,Ke(200,350,440,150))):"level-2"===n?(e(t,Ke(400,200,240,100)),e(t,Ke(300,200,100,300)),e(t,Ke(100,500,300,50)),e(t,Ke(0,550,150,50))):"level-3"===n?(e(t,Ke(140,550,500,50)),e(t,Ke(140,320,50,230)),e(t,Ke(140,270,320,50)),e(t,Ke(410,220,50,50)),e(t,Ke(0,170,460,50))):"level-4"===n?(e(t,Ke(360,170,280,100)),e(t,Ke(220,270,200,50)),e(t,Ke(100,320,170,50)),e(t,Ke(0,370,160,50))):"level-5"===n?(e(t,Ke(480,370,160,50)),e(t,Ke(430,230,50,360)),e(t,Ke(317,180,233,50)),e(t,Ke(550,78,50,152)),e(t,Ke(100,478,50,112)),e(t,Ke(267,275,50,203)),e(t,Ke(188,78,50,111)),e(t,Ke(138,134,50,141)),e(t,Ke(100,28,500,50)),e(t,Ke(100,590,380,50)),e(t,Ke(100,428,167,50)),e(t,Ke(0,275,267,50))):"level-6"===n&&(e(t,Ke(373,275,267,50)),e(t,Ke(373,325,50,315))),"level-10"!==n&&e(t,Xe(":)")),e(J,t)})(`level-${ie}`),se.includes(ie)?Je("dark-shader"):Je("light-shader"),10===ie&&(ie=0),ie<=6&&(Oe=!1)},nn=()=>{tn(),!0===Oe&&Ne.map((e=>{if(null!==Te&&f(Te,e.ele)&&(e=>{n(q,e.ele),Ne=Ne.filter((function(n){return n!==e}))})(e),0===e.timer){e.timer=e.fireevery;const n=e.x+32,t=e.y+32;"gunner_drone"===e.type&&(We(n,t),setTimeout((()=>{We(n,t)}),200),setTimeout((()=>{We(n,t)}),400),setTimeout((()=>{e.moving=!0}),1e3)),"missile_drone"===e.type&&(Pe("missile",n,t,180),setTimeout((()=>{e.moving=!0}),1e3))}else e.timer=e.timer-1;!0===e.moving&&(0===e.moveTimer?(e.moveTimer=10,e.moving=!1,e.rot=360*Math.random()):(e.moveTimer=e.moveTimer-1,((e,n)=>{const t=e.x,o=e.y,r=n+90,a=e.speed*Math.cos(r*(Math.PI/180)),i=e.speed*Math.sin(r*(Math.PI/180)),d=t+a-e.size/2,c=o+i-e.size/2;let p=!1;l(".edge").forEach((n=>{f(n,e.ele)&&(p=!0)})),p?(p=!1,b(s(".edge.left"),e.ele)&&(g(e.ele,32,e.y,e.size),e.x=32),b(s(".edge.right"),e.ele)&&(g(e.ele,608,e.y,e.size),e.x=608),b(s(".edge.top"),e.ele)&&(g(e.ele,e.x,32,e.size),e.y=32),b(s(".edge.bottom"),e.ele)&&(g(e.ele,e.x,608,e.size),e.y=608)):(e.x=d+e.size/2,e.y=c+e.size/2,e.ele.style.left=`${e.x}px`,e.ele.style.top=`${e.y}px`)})(e,e.rot)))})),se.includes(ie)&&(e=>{let n,t;if("random"===e){let e=Math.floor(4*Math.random());n=de[e]}else n=e;"down"===n?(qe(0,Ue[0].x,640,!0),t=0):"right"===n?(qe(0,640,Ue[0].y,!0),t=270):"up"===n?(qe(0,Ue[0].x,0,!0),t=180):"left"===n&&(qe(0,0,Ue[0].y,!0),t=90);const o=Math.floor(22*Math.random());if(21===o&&Pe("wind",640*Math.random(),640*Math.random(),t),Math.floor(250*Math.random()),21===o){const e=64*Math.floor(10*Math.random())+24,n=64*Math.floor(10*Math.random())+24;Pe("lightning_warning",e,n,0)}})(de[se.indexOf(ie)]),De.map((e=>{if(["bullet","wind","good_missile"].includes(e.type))je(e);else if("missile"===e.type){let n=((e,n,t)=>{const o=y(t,64),r=o.x-e,a=o.y-n;let i=Math.atan(-a/r);return r<0&&(-a<0?i-=Math.PI:i+=Math.PI),i*=180/Math.PI,i-=90,i=-i,i<=-180&&(i+=360),i})(e.x,e.y,G),t=((e,n)=>{let t=n-e;return t<=-180&&(t+=360),t>180&&(t-=360),t>0?-1:t<0?1:0})(e.rot,n);1===t?e.rot=e.rot+5:-1===t&&(e.rot=e.rot-5),e.rot>180&&(e.rot=e.rot-360),je(e),e.ele.style.transform=`rotate(${e.rot}deg)`}if((e=>{if(0===e.fadein){if("lightning_warning"===e.type){Pe("lightning_strike",e.x,e.y,90*Math.floor(4*Math.random()));let n=(e.y-24)/64;for(let t=0;t<n+1;t++)Pe("lightning_bolt",e.x,e.y-64*t,0)}"good_explosion"===e.type&&(Te=null),Le(e)}else"none"!==e.fadein?(e.fadein=e.fadein-1,"lightning_warning"===e.type&&(e.fadein%4==0||e.fadein%4==1?e.ele.style.background=`url(${ae}) -176px 0`:e.ele.style.background=`url(${ae}) -160px 0`)):"good_missile"===e.type&&e.y>=e.final_y&&(Pe("good_explosion",e.x,e.y,90*Math.floor(4*Math.random())),Le(e))})(e),!0===Oe){if("bullet"===e.type&&f(e.ele,G)){$e(Ee-1);let n=0,t=0;45===e.rot?(n=16,t=-16):135===e.rot?(n=16,t=16):225===e.rot?(n=-16,t=16):315===e.rot&&(n=-16,t=-16);let o=y(G,64);Pe("hit",o.x+n,o.y+t,360*Math.random()),Le(e)}if("lightning_strike"===e.type&&f(e.ele,G)&&($e(Ee-3),Le(e)),"missile"===e.type)if(f(e.ele,G)){$e(Ee-4);let n=y(G,64);Pe("explosion",n.x,n.y,360*Math.random()),Le(e)}else null!==Se&&f(Se.ele,e.ele)&&Le(e)}}))},tn=()=>{if(f(Y,G)&&(e=>{const n=y(Y,200);qe(0,n.x,n.y,!1)})(),ie>0&&ie<=6){const e=l(".pathblock");let t=!1;e.forEach((e=>{f(e,G)&&(t=!0)})),!1===t&&(e.forEach((e=>{n(s(".level.shader"),e)})),Oe=!0)}if(f(s(".endblock"),G)){if(0===ie)g(G,600,420,64),Ue[0].x=600,Ue[0].y=420;else{const e=y(G,64);Ue[0].y=ie<=5?le[ie+1]:e.y,Ue[0].x=e.x+580,g(G,Ue[0].x,Ue[0].y,64)}en()}},on=(e,n)=>{const t=Math.floor(n.x/64),o=Math.floor(n.y/64);let r=X[t][o];r++,20==r&&(r=0),((e,n,t)=>{X[e][n]=t})(t,o,r)},rn=1e3/30;let an=window.performance.now();const sn=(e,n,t)=>{const i=o("canvas");r(i,["game-canvas",`layer-${t}`]),m(i,["width","height"],[`${e}px`,`${n}px`]),u(i,"\n        position:absolute;\n    ");const s=i.getContext("2d");return(e=>{c(e,"click",(n=>{e.getContext("2d");const t=function(e,n){const t=e.getBoundingClientRect();return{x:n.clientX-t.left,y:n.clientY-t.top}}(e,n);a(e,"layer-1")&&on(0,t)}))})(i),0===t&&((e,n,t)=>{X=ee(),X[2][1]=11,X[9][9]=18,X[9][8]=18,X[8][8]=19,X[8][9]=19,console.log(X),((e,n,t)=>{Q(X,e)})(e)})(s),i};let ln=-1;const dn=e=>{"slider1"===e.target.id?s(".layer-1").style.left=`${e.target.value}px`:"slider2"===e.target.id&&(s(".button-overlay").style.left=`${e.target.value}px`)};let cn=[],pn=20;function un(t,a,i,l){this.name=t,this.index=l,this.img=a,this.imgsrc=i,this.currentFrame=0,this.canvele,this.imgele,this.init=()=>{const e=this.index;this.addedleft=64*cn.length,this.size;const n=this.name,t=o("canvas");r(t,["mini-canvas",`${n}`]),m(t,["width","height"],["64px","64px"]),u(t,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const a=t.getContext("2d"),i=this.img;a.imageSmoothingEnabled=!1,i.onload=function(){a.clearRect(0,0,64,64),a.drawImage(i,16*e,0,16,16,0,0,64,64)},this.canvele=t,this.ctx=a;const s=o("canvas");r(s,["canvas-icon"]),m(s,["width","height","id"],["64px","64px",n]),u(s,"\n\n        ");const l=s.getContext("2d");return l.imageSmoothingEnabled=!1,i.onload=function(){l.clearRect(0,0,64,64),l.drawImage(i,16*e,0,16,16,0,0,64,64)},s.dataset.imgsrc=this.imgsrc,s.dataset.index=e,this.imgele=s,this.initMouse(t,s),s},this.initMouse=(r,i)=>{const l=r.getContext("2d");let d;const m=q;let f,b=[],y=this.size,x=(this.currentFrame,this.index);const v=e=>{0===b.length&&("Machine_Gun"===t?(pn=20,b.push(setInterval((()=>{0===pn?clearInterval(b[0]):(pn-=1,Pe("good_hit",f.x-24,f.y-24,90*Math.floor(4*Math.random())))}),250))):"Magnet_Drone"===t&&b.push(setInterval((()=>{g(Y,f.x,f.y,200)}),100)))},A=e=>{e.preventDefault(),f=h(e,m),d=h(e,document.body),g(r,d.x,d.y,64)};c(i,"mousedown",(n=>{n.preventDefault(),r.style.top="-1000px",r.style.left="-1000px",e(document.body,r),c(document.body,"mousemove",A),c(m,"mouseenter",v),l.clearRect(0,0,64,64),l.drawImage(a,16*x,0,16,16,0,0,64,64),"Magnet_Drone"===t&&(()=>{const n=o("div");n.id="magnet_hitbox",u(n,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        background-color:rgba(255,255,255, 0.5);\n        z-index: 5;\n    "),Y=n,e(s(".wrapper"),n)})()})),c(document.body,"mouseup",(e=>{p(document.body,"mousemove",A),p(m,"mouseenter",v);let o=h(e,m);0!==b.length&&("coin"===t||"Air_Strike"===t&&Pe("good_missile",o.x,o.y,0)),clearInterval(b[0]),b=[],null!=s(`.mini-canvas.${this.name}`)&&n(document.body,r),l.clearRect(0,0,y,y),"Magnet_Drone"===t&&null!==Y&&n(q,Y)})),c(i,"mouseenter",(e=>{ze(e.target.id,e.target)}))}}const mn=o("div");r(mn,["game"]),e(document.body,mn),u(mn,"\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n    position:relative;\n    width:100%;\n    left: -100px;\n"),e(mn,(()=>{u(document.body,`\n        background-color: #242424;\n        background-image: url("${P}");\n        background-size: 70px;\n        background-repeat: repeat;\n    `);const n=(()=>{const n=o("div");return r(n,["wrapper"]),u(n,"\n        position:relative;\n        border: 5px solid darkslategray;\n        width:640px;\n        height:640px;\n    "),e(document.body,n),q=n,n})(),t=sn(640,640,0),a=sn(640,640,1);e(n,t),e(n,a),(e=>{He(e,"package_drone",32,ne,500,300,5,!0,1)})(n),(n=>{const t=o("div");r(t,["shadwrap"]),u(t,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n        pointer-events:none;\n    "),e(n,t),e(t,Xe("start")),J=t,(n=>{let t=o("div");r(t,["edge","left"]),u(t,"\n            left: -15px;\n            top: -10px;\n            height: 660px;\n            width: 10px;\n            position:absolute;\n    "),e(n,t),t=o("div"),r(t,["edge","top"]),u(t,"\n            left: -10px;\n            top: -15px;\n            height: 10px;\n            width: 660px;\n            position:absolute;\n    "),e(n,t),t=o("div"),r(t,["edge","bottom"]),u(t,"\n            left: 0px;\n            top: 635px;\n            height: 10px;\n            width: 660px;\n            position:absolute;\n    "),e(n,t),t=o("div"),r(t,["edge","right"]),u(t,"\n            left: 635px;\n            top: 0px;\n            height: 660px;\n            width: 10px;\n            position:absolute;\n    "),e(n,t)})(n)})(n),console.log("commencing"),function(e,n,t){const o=()=>{window.requestAnimationFrame(o);const e=window.performance.now(),n=e-an;n<rn||(an=e-n%rn,nn())};o()}();const i=(Qe=o("div"),r(Qe,["button-overlay"]),u(Qe,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(n=>{e(n,Ve("changebg",8,en,16,16))})(Qe),Qe);return e(n,i),n})()),e(mn,(()=>{const n=(()=>{const n=o("div");return r(n,["mini-wrapper"]),u(n,"\n        position:relative;\n        background-color: #000000;\n        border: 5px solid darkslategray;\n        width: 640px;\n        display:flex;\n        justify-content: space-around;\n        height:64px;\n        align-items:center;\n        margin-top: 10px;\n    "),e(document.body,n),n})();return t=n,ce.map((n=>e(t,(e=>{const n=new Image;n.src=ue;const t=new un(e,n,ue,cn.length),o=t.init();return cn.push(t),o})(n)))),we(),(()=>{const n=o("div");r(n,["infoScreen"]),u(n,"\n        width: 250px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: 650px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n    "),e(n,(()=>{const e=o("div");return r(e,["infoTop"]),u(e,"\n        padding: 5px;\n    "),e})()),e(n,(()=>{const e=o("div");return r(e,["infoBottom"]),e})()),e(q,(()=>{const n=o("div");r(n,["healthbar"]),u(n,"\n        width: 32px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: -52px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n        display:flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    "),$e(n);const t=o("div");return u(t,`\n        position:absolute;\n        width: 16px;\n        height: 16px;\n        background: url(${ue}) -144px 0px;\n        scale: 300%;\n        image-rendering: pixelated;\n        left: 8px;\n        z-index: 5;\n        transform: translate(0, 3px);\n    `),e(n,t),n})()),e(q,n)})(),U(L,"click"),U(j,"close"),U(N,"coin"),U(O,"epic"),U(F,"swipe"),U(W,"open"),(n=>{const t=o("div");r(t,["cutscene"]),t.style.visibility=_e?"visible":"hidden",u(t,`\n        height:320px;\n        width: 320px;\n        scale: 2;\n        position:absolute;\n        top: 160px;\n        left: 160px;\n        background: url(${Ce}) -${320*ke}px 0px;\n        image-rendering: pixelated;\n        z-index: 6;\n    `),e(n,t);const a=o("div");r(a,["start-but","button"]),u(a,"\n        width: 100px;\n        height:50px;\n        position:absolute;\n        left: 270px;\n        top: 450px;\n        background-color: darkred;\n        color: white;\n        font-family: munro;\n        font-size: 30px;\n        padding:5px;\n        padding-bottom: 0px;\n        text-align: center;\n        vertical-align: center;\n        z-index: 7;\n    "),d(a,"Start"),c(a,"click",Be),e(n,a)})(q),n;var t})()),e(mn,(()=>{const n=(()=>{const n=o("div");r(n,["debug-wrapper"]),u(n,"\n        position:relative;\n    ");const t=o("input");t.id="slider1",c(t,"input",dn),m(t,["type","min","max","value","class"],["range","0","640","0","slidey"]),e(n,t);const a=o("input");a.id="slider2",c(a,"input",dn),m(a,["type","min","max","value","class"],["range","0","640","0","slidey"]),e(n,a);const i=o("h1");i.id="score",u(i,"\n        color:white;\n        font-family: munro;\n    ");const l=o("h1");return l.id="level",u(l,"\n        color:white;\n        font-family:munro;\n    "),d(l,"Level: 0"),((e="bruh")=>{ln+=1,d("bruh"===e?s("#score"):e,`Score: ${ln}`)})(i),e(n,i),e(n,l),n})();return e(document.body,n),n})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,