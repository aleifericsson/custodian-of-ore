(()=>{"use strict";var e={320:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}","",{version:3,sources:["webpack://./src/css/animations.css"],names:[],mappings:"AAAA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B",sourcesContent:[".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}"],sourceRoot:""}]);const s=i},414:(e,n,t)=>{t.d(n,{Z:()=>p});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),s=t(667),l=t.n(s),d=new URL(t(542),t.b),c=i()(r()),u=l()(d);c.push([e.id,`html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(${u}) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */`,"",{version:3,sources:["webpack://./src/css/fonts.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;IACI,oBAAoB;IACpB,+DAA+C;EACjD;;EAEA;;;;;;;;;;GAUC",sourcesContent:["html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(../fonts/munro.ttf) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */"],sourceRoot:""}]);const p=c},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);o&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),n.push(c))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},i=[],s=0;s<e.length;s++){var l=e[s],d=o.base?l[0]+o.base:l[0],c=a[d]||0,u="".concat(d," ").concat(c);a[d]=c+1;var p=t(u),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)n[p].references++,n[p].updater(m);else{var g=r(m,o);o.byIndex=s,n.splice(s,0,{identifier:u,updater:g,references:1})}i.push(u)}return i}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=t(a[i]);n[s].references--}for(var l=o(e,r),d=0;d<a.length;d++){var c=t(a[d]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}a=l}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},542:(e,n,t)=>{e.exports=t.p+"f78662ff4aad4d038806.ttf"}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!e;)e=o[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{const e=(e,n)=>{e.appendChild(n)},n=(e,n)=>{n.parentNode===e&&e.removeChild(n)},o=e=>document.createElement(e),r=(e,n)=>{n.forEach((n=>{e.classList.add(n)}))},a=(e,n)=>e.classList.contains(n),i=(e,n)=>{n.forEach((n=>{e.classList.remove(n)}))},s=e=>document.querySelector(e),l=e=>document.querySelectorAll(e),d=(e,n)=>{e.textContent=n},c=(e,n,t)=>{e.addEventListener(n,t)},u=(e,n,t)=>{e.removeEventListener(n,t)},p=(e,n)=>{e.style.cssText=n},m=(e,n,t)=>{n.map(((n,o)=>{e.setAttribute(n,t[o])}))},g=(e,n,t,o)=>{e.style.top=t-o/2+"px",e.style.left=n-o/2+"px"},h=(e,n)=>{const t=n.getBoundingClientRect();return{x:e.clientX-t.left,y:e.clientY-t.top}},f=(e,n)=>{if(null===e||null===n)return!1;const t=e.getBoundingClientRect(),o=n.getBoundingClientRect();return!(t.right<o.left||t.left>o.right||t.bottom<o.top||t.top>o.bottom)},b=(e,n)=>{const t=e.style.left,o=e.style.top;return{x:Number(t.substring(0,t.length-2))+n/2,y:Number(o.substring(0,o.length-2))+n/2}};var y=t(379),x=t.n(y),v=t(795),A=t.n(v),w=t(569),C=t.n(w),k=t(565),_=t.n(k),M=t(216),B=t.n(M),I=t(589),E=t.n(I),z=t(320),D={};D.styleTagTransform=E(),D.setAttributes=_(),D.insert=C().bind(null,"head"),D.domAPI=A(),D.insertStyleElement=B(),x()(z.Z,D),z.Z&&z.Z.locals&&z.Z.locals;var $=t(414),S={};S.styleTagTransform=E(),S.setAttributes=_(),S.insert=C().bind(null,"head"),S.domAPI=A(),S.insertStyleElement=B(),x()($.Z,S),$.Z&&$.Z.locals&&$.Z.locals;const T=t.p+"2303bf42784ad28af8cb.gif",P=t.p+"82e9ac88b221b8bd6b76.png",R=(t.p,t.p+"46f9a3232743a28fe55c.mp3"),j=t.p+"f6a9d30b202864f403ab.mp3",L=t.p+"4b0a7fa0436041018c59.mp3",N=t.p+"2313cadcd41e0912116a.mp3",O=t.p+"db5db37355927833123f.mp3",F=t.p+"9a548da064d95ad7ec01.mp3";let W=[];const Z=(e,n)=>{var t=new Audio(e);W.push({audio:t,name:n})},U=e=>{W.find((n=>n.name===e)).audio.play()};let H=null,Y=null,q=null,G=null;const J=t.p+"89cc97a32f3bdd1a1f7c.png";let K;const X=(e,n)=>{e.forEach(((e,t)=>{e.forEach(((e,o)=>{Q(e,t,o,n)}))}))},Q=(e,n,t,o)=>{const r=64;let a=new Image;a.src=J,a.onload=function(){o.drawImage(a,e*r,0,r,r,n*r,t*r,r,r)}},V=()=>new Array(10).fill(0).map((()=>new Array(10).fill(10))),ee=t.p+"c488352b32cb2834c60f.png",ne=t.p+"dc3293068f5630490558.png",te=t.p+"6c039a05fb3f3dab314c.png",oe=t.p+"e2b44efb30368e5df2a8.png",re=t.p+"39e6521c1a1cd6dea9e1.png";let ae=0;const ie=[4,5,8,9,10];let se=[350,450,250,560,200,350,270];const le=["down","left","up","right","random"],de=["Magnet_Drone","Gunner_Drone","Lightning_Rod_Drone","Air_Strike","Machine_Gun","Drone_Control_Hack","Drone_GPS_Hack","Recall_Drones","Repair_Package_Drone"],ce=["\nAttracts metal towards it\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Cooldown: none\n","\nShoots things in a small radius\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Ammo: 10 bullets\n- Damage: low\n- Cooldown: 20 seconds\n","\nAbsorbs lightning in a small radius\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Shatters after 3 lightning strikes\n- Cooldown: 20 seconds\n","\nCall a missile to any point on the field\n\n- Ammo: 1 missile\n- Damage: high\n- Cooldown: 10 seconds\n","\nFires shots at any point on the field,\nmachine overheats after 20 shots\n\n- Ammo: 20 bullets\n- Firerate: 4 bullets per second\n- Cooldown: 20 seconds\n","\nMakes drones moveable temporarily,\ndrag onto desired drone and\ndrag affected drone to move it\n\n- Duration: 10 seconds\n- Cooldown: 30 seconds\n","\nLocks a drone's position temporarily,\ndrag onto desired drone\n\n- Duration: 10 seconds\n- Cooldown: 30 seconds\n","\nRemove all placed drones from field.\n\n- Cooldown: none\n","\nWhen near package drone, restores\n2 health per 5 seconds.\n\n- Cooldown: 30 seconds\n","\nHas Dio's special package,\nget it to his house somewhere west.\n","\nShoots low damage burst shots\nin 4 diagonal directions.\n","\nFires heat-seeking missiles\nor torpedoes,  tboth are high damage.\n","\nWill try to ram into you and cut you\nwith its saws. Longer contact means\nmore damage.\n","\nThe boss. Can spawn all drones\nand even summon lightning somehow.\n"],ue=t.p+"89d1863fe0155e15b8ec.png";let pe=20;const me=n=>{if(0===n);else{let t,r;null===s(".healthbar")?(t=pe,r=n):"number"==typeof n&&(t=n,pe=t,r=s(".healthbar"),r.textContent="");for(let n=0;n<t;n++){const t=20-n,a=350,i=470,s=Math.floor(t/20*(i-a)+a),l=o("div");l.id=`heart-${t}`,p(l,`\n            height:28px;\n            width: 28px;\n            margin: 2px;\n            background-color: hsl(${s}, 70%, 62%);\n        `),e(r,l)}}},ge=(n,t)=>{const a=t.cloneNode(!1);a.id="infoPic",i(a,["canvas-icon"]),m(a,["width","height"],["64px","64px"]),p(a,"\n        padding-left: 5px;\n        padding-top: 10px;\n    ");const l=a.getContext("2d");l.imageSmoothingEnabled=!1;const c=new Image;c.src=a.dataset.imgsrc;let u=a.dataset.index;["package_drone","gunner_drone","missile_drone","attack_drone","boss_drone"].includes(n)?c.onload=function(){l.clearRect(0,0,64,64),l.drawImage(c,0,0,32,32,0,0,64,64)}:c.onload=function(){l.clearRect(0,0,64,64),l.drawImage(c,16*u,0,16,16,0,0,64,64)},"package_drone"===n&&(u=9),"gunner_drone"===n&&(u=10),"missile_drone"===n&&(u=11),"attack_drone"===n&&(u=12),"boss_drone"===n&&(u=13);const g=s(".infoTop");g.textContent="";const h=o("div");r(h,["infoTitle"]);let f=n.replace("_"," ");f=f.replace("_"," "),d(h,f),p(h,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n        text-transform: capitalize;\n    ");const b=o("div");r(b,["infoText"]),p(b,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 15px;\n        white-space: pre;\n    "),d(b,ce[u]),e(g,h),e(g,a),e(g,b)};let he=[];const fe=(n,t,a,i)=>{const s=o("div");let l,d,c,u;"wind"===n?(l=9,d=100,c=1,u=2):"bullet"===n&&(l=1,d="none",c=7,u=2),r(s,["effect",n]),p(s,`\n        scale: ${u};\n        top: ${a}px;\n        left: ${t}px;\n        height: 16px;\n        width: 16px;\n        background: url(${re}) -${16*l}px 0;\n        position:absolute;\n        image-rendering: pixelated;\n        transform: rotate(${i}deg);\n    `),he.push({type:n,x:t,y:a,speed:c,fadein:d,rot:i,ele:s,size:16}),e(G,s)},be=e=>{n(G,e.ele),he=he.filter((function(n){return n!==e}))};let ye=[],xe=!1;const ve=(e,n,t)=>{let o,a;"gunner_drone"===e&&(o=ne,a=75),"missile_drone"===e&&(o=te,a=150),"attack_drone"===e&&(o=oe,a=500);let i=Math.floor(Math.random()*a*.5),s=360*Math.random();const l=Ce(Y,e,32,o,n,t,5,!0,1);r(l,["enemy"]),ye.push({ele:l,type:e,x:n,y:t,fireevery:a,timer:i,timeout:null,size:64,moving:!1,moveTimer:10,speed:5,rot:s})},Ae=(e,n)=>{fe("bullet",e,n,45),fe("bullet",e,n,135),fe("bullet",e,n,225),fe("bullet",e,n,315)};let we=[];const Ce=(n,t,a,i,s,l,d,u,g)=>{const h=o("canvas");let f;r(h,["spritecanvas",t]),m(h,["id","width","height"],[t,"64px","64px"]),"none"===i?f="none":(f=new Image,f.src=i),p(h,`\n        position:absolute;\n        top: ${l}px;\n        left: ${s}px;\n    `);let b={name:t,size:a,ele:h,x:s,y:l,direction:"left",img:f,speed:d,direction_data:{none:0},draw_index:0,frame:0,show:u,frames:g,updates_per_frames:2,timer:1};if(we.push(b),u){const t=h.getContext("2d");t.imageSmoothingEnabled=!1,f.onload=function(){t.clearRect(0,0,64,64),t.drawImage(f,0,0*a,a,a,0,0,64,64)},e(n,h),c(h,"mouseenter",ke)}return"package_drone"===t&&(q=h),h.dataset.imgsrc=i,h},ke=e=>{ge(e.target.id,e.target)},_e=(e,n,t,o)=>{const r=we[e],a=o?2:r.speed,i=n-r.size/2,d=t-r.size/2,c=i-r.x,u=d-r.y,p=Math.sqrt(c*c+u*u),m=c/p*a,g=u/p*a,h=r.x+m-r.size/2,b=r.y+g-r.size/2;((e,n)=>{if(e>0&&n>0&&e<=640&&n<=640){const t=Math.floor(e/64),o=Math.floor(n/64);K[t][o]}})(h,b);let y=!1;if(l(".edge").forEach((e=>{f(e,r.ele)&&(y=!0)})),y&&"package_drone"===r.name&&(y=!1,f(s(".edge.left"),r.ele)&&Me(e,6,r.y),f(s(".edge.right"),r.ele)&&Me(e,634,r.y),f(s(".edge.top"),r.ele)&&Me(e,r.x,6),f(s(".edge.bottom"),r.ele)&&Me(e,r.x,634)),p>r.speed&&!y){we[e].x=h+r.size/2,we[e].y=b+r.size/2,Me(e,h,b);let n=Math.atan(-g/m);m<0&&(-g<0?n-=Math.PI:n+=Math.PI),n*=180/Math.PI;let t="left";n>=22.5&&n<=67.5?t="upright":n>=67.5&&n<=112.5?t="up":n>=112.5&&n<=157.5?t="upleft":n<=22.5&&n>=-22.5?t="right":n<=-22.5&&n>=-67.5?t="downright":n<=-67.5&&n>=-112.5?t="down":n<=-112.5&&n>=-157.5?t="downleft":n>=157.5&&n<=-157.5&&(t="left")}},Me=(e,n,t)=>{p(we[e].ele,`\n        position:absolute;\n        pointer-events:none;\n        top: ${t}px;\n        left: ${n}px;\n    `)},Be=n=>{const t=o("div");let a;r(t,["shader"]),t.id=n,"light-shader"===n?a="\n            background-image: linear-gradient(135deg, rgba(227, 245, 66, 0.3), rgba(230, 201, 147, 0.1));\n        ":"dark-shader"===n&&(a="\n            background-image: linear-gradient(135deg, rgba(54, 88, 163, 0.3), rgba(90, 76, 115, 0.6));\n        "),p(t,`\n        height:640px;\n        width: 640px;\n        position: absolute;\n        z-index: 5;\n        ${a}\n    `),e(G,t)},Ie=t=>{const a=o("div");r(a,["level","shader"]),a.id=t,p(a,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),he=[],l(".effect").forEach((e=>{n(G,e)})),(e=>{ye=[],l(".enemy").forEach((e=>{n(Y,e)})),"level-1"===e?(ve("gunner_drone",70,450),ve("gunner_drone",100,50)):"level-2"===e?(ve("gunner_drone",150,450),ve("gunner_drone",100,100)):"level-3"===e?(ve("gunner_drone",50,50),ve("gunner_drone",70,400),ve("gunner_drone",300,400)):"level-4"===e?(ve("gunner_drone",50,50),ve("gunner_drone",200,500),ve("missile_drone",400,400),ve("gunner_drone",200,200)):"level-5"===e?(ve("missile_drone",150,500),ve("gunner_drone",200,350),ve("gunner_drone",300,500),ve("missile_drone",70,70),ve("gunner_drone",500,550)):"level-6"===e?(ve("gunner_drone",500*Math.random()+50,500*Math.random()+50),ve("gunner_drone",50,300),ve("gunner_drone",100,500*Math.random()+50),ve("missile_drone",400,400),ve("missile_drone",500*Math.random()+50,500*Math.random()+50)):"level-7"===e?(ve("gunner_drone",500*Math.random()+50,300),ve("gunner_drone",200,500*Math.random()+50),ve("gunner_drone",300*Math.random()+300,500*Math.random()+50),ve("missile_drone",400,500*Math.random()+50),ve("missile_drone",500*Math.random()+50,500*Math.random()+50),ve("attack_drone",320,200*Math.random()+220)):"level-8"===e?(ve("gunner_drone",500*Math.random()+50,300),ve("gunner_drone",500,500*Math.random()+50),ve("gunner_drone",500*Math.random()+50,500),ve("missile_drone",500*Math.random()+50,500*Math.random()+50),ve("missile_drone",100,500*Math.random()+50),ve("missile_drone",500*Math.random()+50,500*Math.random()+50),ve("attack_drone",250,200*Math.random()+20),ve("attack_drone",450,200*Math.random()+420)):"level-9"===e&&(ve("gunner_drone",100,100),ve("gunner_drone",500*Math.random()+50,320),ve("gunner_drone",500*Math.random()+50,500*Math.random()+50),ve("missile_drone",500*Math.random()+50,550),ve("missile_drone",500*Math.random()+50,150),ve("missile_drone",200*Math.random()+50,200*Math.random()+50),ve("missile_drone",300*Math.random()+250,300*Math.random()+250),ve("attack_drone",150,200*Math.random()+220),ve("attack_drone",350,200*Math.random()+220),ve("attack_drone",450,150))})(t),"level-1"===t?(e(a,Ee(0,200,300,150)),e(a,Ee(200,350,440,150))):"level-2"===t?(e(a,Ee(400,200,240,100)),e(a,Ee(300,200,100,300)),e(a,Ee(100,500,300,50)),e(a,Ee(0,550,150,50))):"level-3"===t?(e(a,Ee(140,550,500,50)),e(a,Ee(140,320,50,230)),e(a,Ee(140,270,320,50)),e(a,Ee(410,220,50,50)),e(a,Ee(0,170,460,50))):"level-4"===t?(e(a,Ee(360,170,280,100)),e(a,Ee(220,270,200,50)),e(a,Ee(100,320,170,50)),e(a,Ee(0,370,160,50)),fe("wind",20,100,0)):"level-5"===t?(e(a,Ee(480,370,160,50)),e(a,Ee(430,230,50,360)),e(a,Ee(317,180,233,50)),e(a,Ee(550,78,50,152)),e(a,Ee(100,478,50,112)),e(a,Ee(267,275,50,203)),e(a,Ee(188,78,50,111)),e(a,Ee(138,134,50,141)),e(a,Ee(100,28,500,50)),e(a,Ee(100,590,380,50)),e(a,Ee(100,428,167,50)),e(a,Ee(0,275,267,50)),fe("wind",20,100,90)):"level-6"===t&&(e(a,Ee(373,275,267,50)),e(a,Ee(373,325,50,315))),"level-10"!==t&&e(a,ze(":)")),e(G,a)},Ee=(e,n,t,a)=>{const i=o("div");return r(i,["pathblock"]),p(i,`\n        background-color: rgba(245, 66, 66, 0.3);\n        left: ${e}px;\n        top: ${n}px;\n        height: ${a}px;\n        width: ${t}px;\n        position:absolute;\n    `),i},ze=e=>{const n=o("div");return r(n,["endblock"]),p(n,"\n            background-color: rgba(34, 117, 59, 0.6);\n            left: 0px;\n            top: 0px;\n            height: 640px;\n            width: 10px;\n            position:absolute;\n        "),n};let De;const $e=(e,n,t,a,i)=>{const s=o("div");return r(s,["button",e]),s.id=e,p(s,`\n            position: absolute;\n            left:${a}px;\n            top: ${i}px;\n            width: 32px;\n            height: 32px;\n            background: url(${P}) -${32*n}px 0;\n        `),c(s,"click",t),s},Se=()=>{l(".shader").forEach((e=>{n(G,e)})),ae+=1,d(s("#level"),`Level: ${ae}`),Ie(`level-${ae}`),ie.includes(ae)?Be("dark-shader"):Be("light-shader"),10===ae&&(ae=0),ae<=6&&(xe=!1)},Te=[["D: My package has been suspiciously failed to be delivered twice in a row now!","D: I'm not even getting refunds for this!!","D: I guess when you want something done you have to do it yourself."],["P: Package drone status: Ready to deliver ref#7355608","P: Package drone status: Aberration detected - access from unautorised party","P: Package drone status: Limited remote control mode activated. Freedom of movement restricted at this admin level","D: Damn, I'm in but I cant' move. Guess I'll need my magnet drones to move the package.","D: At least I haven't triggered security... yet."],["P: Package drone status: Warning. Security drones in area. Deviation from designated path may result in aggression.","D: These will do nothing against what I have in my arsenal."],["P: Package drone status: Warning. Heavy wind detected, recalculation of trajectory detected to remain on path.","D: Might be wise to control the drone's rotors directly with my control hack, even if it is temporary."],["D: What?! The path doesn't even go to my house! Someone's already in the system and stealing packages. No wonder I never got mine.","D: No time to get distracted tho, the sooner I get my package, the sooner I can forget about this scummy company."],["S: Security drone status: Aberration detected in rogue package drone. Requesting immediate backup to eliminate the issue","D: Finally: A reason to go all out"],["D: Hey, that's my house! I'm so close!","d: !!..","A: You have laid waste to my brethren and humiliated me!","A: Why do you persist in protecting a nonsentient piece of scrap metal?","d: I'm just rightfully getting something I paid for. Now get out my way before you end up like the rest of your trash!","A: Such determination you hold for something your life is not dependent on!","A: Unlike you, I will get REPLACED if I fail to elimiate any aberrations, and now your on the top of my list!","d: About time you get an update! Your buggy programming can't detect a real threat to your crumbling company if you ever saw one.","d: There are thieves in your system and you go after a guy who's protecting his legal property?! I think it's time for YOU to pay."],["A: Well, you have defeated me. I failed the one job I was programmed to complete. I will no doubt be replaced soon.","A: Say something nice. It might be the last thing I hear before I'm gone forever","D: We're not too different, man. We both made sacrifices defending metal.","D: Tell me, do you have a name?","A: They refered to me as 'Security AI Beta Test v8.10.04'","D: Haha, no wonder you failed. You never made it past beta!","D: Well then, I will give you a proper name. You will be crowned as the one who guarded pieces of rock minerals.","D: The custodian of ore.","C: Befitting name. So long then, enjoy your package.","D: Finally, it is in my hands!","D: Tungsten cube!!"]];let Pe=0,Re=[];const je=e=>{U("swipe"),Number.isInteger(e)&&(Pe=e);const n=Ne(Re[Pe]);Pe+=1,c(n,"click",Le)},Le=e=>{Pe<=3&&en(),U("swipe");let t=e.target;a(t,"dialogue")||(t=t.parentNode,a(t,"dialogue")||(t=t.parentNode)),u(t,"click",Le),r(t,["dialogue-start-end"]),setTimeout((()=>{n(s(".game"),t),Re[Pe-1].follow&&je()}),200)},Ne=n=>{const t=o("div");return r(t,["dialogue","dialogue-start-end"]),m(t,["id","draggable"],[`dialogue-${n.code}`,"false"]),p(t,"\n            color:white;\n            background-color: slategray;\n            border: 5px solid darkslategray;\n            position:absolute;\n            transition: 0.1s;\n            width: 600px;\n            height: 100px;\n            left: calc(50% -200px);\n            top: 500px;\n            display:flex;\n            justify-content: flex-start;\n            align-items: center;\n            gap: 10px;\n            padding: 10px;\n            z-index: 7;\n        "),e(t,Oe(n.charactersrc)),e(t,Fe(n.text,n.charname)),e(s(".game"),t),setTimeout((()=>t.classList.remove("dialogue-start-end")),100),t},Oe=e=>{const n=o("div");return r(n,["charBox"]),p(n,`\n        border: 5px solid darkslategray;\n        min-width: 64px;\n        min-height: 64px;\n        background: url(${e}) 0 0;\n    `),n},Fe=(n,t)=>{const r=o("div"),a=o("div"),i=o("div");return p(r,"\n        position:relative;\n        top: -10px;\n    "),p(a,"\n        color:white;\n        font-family: 'munro';\n        font-size: 20px;\n    "),p(i,"\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n    "),d(a,n),d(i,t),e(r,i),e(r,a),r},We=()=>{(()=>{let e=0;Te.map((n=>{n.map(((t,o)=>{const r=t.substring(0,1),a=t.substring(3,t.length);let i,s;s=o!==n.length-1,"D"===r||"d"===r?i="Dio":"A"===r?i="Security AI":"P"===r?i="Package Drone":"S"===r?i="Security Drone":"C"===r&&(i="Custodian of Ore"),((e,n,t,o,r)=>{Re.push({text:e,code:t,charactersrc:o,follow:r,charname:n})})(a,i,e,void 0,s),e+=1}))}))})()},Ze=()=>{Ue(),!0===xe&&ye.map((e=>{if(0===e.timer){e.timer=e.fireevery;const n=e.x+32,t=e.y+32;"gunner_drone"===e.type&&(Ae(n,t),setTimeout((()=>{Ae(n,t)}),200),setTimeout((()=>{Ae(n,t)}),400),setTimeout((()=>{e.moving=!0}),1e3))}else e.timer=e.timer-1;!0===e.moving&&(0===e.moveTimer?(e.moveTimer=10,e.moving=!1,e.rot=360*Math.random()):(e.moveTimer=e.moveTimer-1,((e,n)=>{const t=e.x,o=e.y,r=n+90,a=e.speed*Math.cos(r*(Math.PI/180)),i=e.speed*Math.sin(r*(Math.PI/180)),d=t+a-e.size/2,c=o+i-e.size/2;let u=!1;l(".edge").forEach((n=>{f(n,e.ele)&&(u=!0)})),u?(u=!1,f(s(".edge.left"),e.ele)&&(g(e.ele,6,e.y,e.size),e.x=6),f(s(".edge.right"),e.ele)&&(g(e.ele,634,e.y,e.size),e.x=634),f(s(".edge.top"),e.ele)&&(g(e.ele,e.x,6,e.size),e.y=6),f(s(".edge.bottom"),e.ele)&&(g(e.ele,e.x,634,e.size),e.y=634)):(e.x=d+e.size/2,e.y=c+e.size/2,e.ele.style.left=`${e.x}px`,e.ele.style.top=`${e.y}px`)})(e,e.rot)))})),ie.includes(ae)&&(e=>{let n,t;if("random"===e){let e=Math.floor(4*Math.random());n=le[e]}else n=e;"down"===n?(_e(0,we[0].x,640,!0),t=0):"right"===n?(_e(0,640,we[0].y,!0),t=270):"up"===n?(_e(0,we[0].x,0,!0),t=180):"left"===n&&(_e(0,0,we[0].y,!0),t=90),21===Math.floor(22*Math.random())&&fe("wind",640*Math.random(),640*Math.random(),t)})(le[ie.indexOf(ae)]),he.map((e=>{["bullet","missile","wind"].includes(e.type)&&(e=>{const n=e.x,t=e.y,o=e.rot+90,r=e.speed*Math.cos(o*(Math.PI/180)),a=e.speed*Math.sin(o*(Math.PI/180)),i=n+r-e.size/2,s=t+a-e.size/2;let d=!1;l(".edge").forEach((n=>{f(n,e.ele)&&(d=!0)})),d?be(e):(e.x=i+e.size/2,e.y=s+e.size/2,e.ele.style.left=`${e.x}px`,e.ele.style.top=`${e.y}px`)})(e),(e=>{0===e.fadein?be(e):"none"!==e.fadein&&(e.fadein=e.fadein-1)})(e),!0===xe&&"bullet"===e.type&&f(e.ele,q)&&(me(pe-1),be(e))}))},Ue=()=>{if(f(H,q)&&(e=>{const n=b(H,200);_e(0,n.x,n.y,!1)})(),ae>0&&ae<=6){const e=l(".pathblock");let t=!1;e.forEach((e=>{f(e,q)&&(t=!0)})),!1===t&&(e.forEach((e=>{n(s(".level.shader"),e)})),xe=!0)}if(f(s(".endblock"),q)){if(0===ae)g(q,600,420,64),we[0].x=600,we[0].y=420;else{const e=b(q,64);we[0].y=ae<=5?se[ae+1]:e.y,we[0].x=e.x+580,g(q,we[0].x,we[0].y,64)}Se()}},He=(e,n)=>{const t=Math.floor(n.x/64),o=Math.floor(n.y/64);let r=K[t][o];r++,20==r&&(r=0),((e,n,t)=>{K[e][n]=t})(t,o,r)},Ye=1e3/30;let qe=window.performance.now();const Ge=(e,n,t)=>{const i=o("canvas");r(i,["game-canvas",`layer-${t}`]),m(i,["width","height"],[`${e}px`,`${n}px`]),p(i,"\n        position:absolute;\n    ");const s=i.getContext("2d");return(e=>{c(e,"click",(n=>{e.getContext("2d");const t=function(e,n){const t=e.getBoundingClientRect();return{x:n.clientX-t.left,y:n.clientY-t.top}}(e,n);a(e,"layer-1")&&He(0,t)}))})(i),0===t&&((e,n,t)=>{K=V(),K[2][1]=11,K[9][9]=18,K[9][8]=18,K[8][8]=19,K[8][9]=19,console.log(K),((e,n,t)=>{X(K,e)})(e)})(s),i};let Je=-1;const Ke=e=>{"slider1"===e.target.id?s(".layer-1").style.left=`${e.target.value}px`:"slider2"===e.target.id&&(s(".button-overlay").style.left=`${e.target.value}px`)};let Xe=[];function Qe(t,a,i,l){this.name=t,this.index=l,this.img=a,this.imgsrc=i,this.currentFrame=0,this.canvele,this.imgele,this.init=()=>{const e=this.index;this.addedleft=64*Xe.length,this.size;const n=this.name,t=o("canvas");r(t,["mini-canvas",`${n}`]),m(t,["width","height"],["64px","64px"]),p(t,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const a=t.getContext("2d"),i=this.img;a.imageSmoothingEnabled=!1,i.onload=function(){a.clearRect(0,0,64,64),a.drawImage(i,16*e,0,16,16,0,0,64,64)},this.canvele=t,this.ctx=a;const s=o("canvas");r(s,["canvas-icon"]),m(s,["width","height","id"],["64px","64px",n]),p(s,"\n\n        ");const l=s.getContext("2d");return l.imageSmoothingEnabled=!1,i.onload=function(){l.clearRect(0,0,64,64),l.drawImage(i,16*e,0,16,16,0,0,64,64)},s.dataset.imgsrc=this.imgsrc,s.dataset.index=e,this.imgele=s,this.initMouse(t,s),s},this.initMouse=(r,i)=>{const l=r.getContext("2d");let d;const m=Y;let f,b=[],y=this.size,x=(this.currentFrame,this.index);const v=e=>{0===b.length&&b.push(setInterval((()=>{"Magnet_Drone"===t&&g(H,f.x,f.y,200)}),100))},A=e=>{e.preventDefault(),f=h(e,m),d=h(e,document.body),g(r,d.x,d.y,64)};c(i,"mousedown",(n=>{n.preventDefault(),r.style.top="-1000px",r.style.left="-1000px",e(document.body,r),c(document.body,"mousemove",A),c(m,"mouseenter",v),l.clearRect(0,0,64,64),l.drawImage(a,16*x,0,16,16,0,0,64,64),"Magnet_Drone"===t&&(()=>{const n=o("div");n.id="magnet_hitbox",p(n,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        background-color:rgba(255,255,255, 0.5);\n        z-index: 5;\n    "),H=n,e(s(".wrapper"),n)})()})),c(document.body,"mouseup",(e=>{u(document.body,"mousemove",A),u(m,"mouseenter",v),b.length,clearInterval(b[0]),b=[],null!=s(`.mini-canvas.${this.name}`)&&n(document.body,r),l.clearRect(0,0,y,y),"Magnet_Drone"===t&&null!==H&&n(Y,H)})),c(i,"mouseenter",(e=>{ge(e.target.id,e.target)}))}}let Ve=0;const en=()=>{3===Ve&&n(Y,s(".start-screen")),0===Ve?(Ve+=1,u(s(".start-but"),"click",en),n(Y,s(".start-but")),je()):Ve+=1},nn=o("div");r(nn,["game"]),e(document.body,nn),p(nn,"\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n    position:relative;\n    width:100%;\n    left: -100px;\n"),e(nn,(()=>{p(document.body,`\n        background-color: #242424;\n        background-image: url("${T}");\n        background-size: 70px;\n        background-repeat: repeat;\n    `);const n=(()=>{const n=o("div");return r(n,["wrapper"]),p(n,"\n        position:relative;\n        border: 5px solid darkslategray;\n        width:640px;\n        height:640px;\n    "),e(document.body,n),Y=n,n})(),t=Ge(640,640,0),a=Ge(640,640,1);e(n,t),e(n,a),Ce(n,"package_drone",32,ee,500,300,5,!0,1),(n=>{const t=o("div");r(t,["shadwrap"]),p(t,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n        pointer-events:none;\n    "),e(n,t),e(t,ze("start")),G=t,(n=>{let t=o("div");r(t,["edge","left"]),p(t,"\n            background-color: rgba(229, 232, 65, 0.6);\n            left: 0px;\n            top: 0px;\n            height: 640px;\n            width: 5px;\n            position:absolute;\n    "),e(n,t),t=o("div"),r(t,["edge","top"]),p(t,"\n            background-color: rgba(229, 232, 65, 0.6);\n            left: 0px;\n            top: 0px;\n            height: 5px;\n            width: 640px;\n            position:absolute;\n    "),e(n,t),t=o("div"),r(t,["edge","bottom"]),p(t,"\n            background-color: rgba(229, 232, 65, 0.6);\n            left: 0px;\n            top: 635px;\n            height: 5px;\n            width: 640px;\n            position:absolute;\n    "),e(n,t),t=o("div"),r(t,["edge","right"]),p(t,"\n            background-color: rgba(229, 232, 65, 0.6);\n            left: 635px;\n            top: 0px;\n            height: 640px;\n            width: 5px;\n            position:absolute;\n    "),e(n,t)})(n)})(n),console.log("commencing"),function(e,n,t){const o=()=>{window.requestAnimationFrame(o);const e=window.performance.now(),n=e-qe;n<Ye||(qe=e-n%Ye,Ze())};o()}();const i=(De=o("div"),r(De,["button-overlay"]),p(De,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(n=>{e(n,$e("changebg",8,Se,16,16))})(De),De);e(n,i);const s=o("div");r(s,["start-screen"]),p(s,"\n        height:640px;\n        width: 640px;\n        position:absolute;\n        background-color: black;\n        z-index: 6;\n    "),e(n,s);const l=o("div");return r(l,["start-but","button"]),p(l,"\n        width: 100px;\n        height:50px;\n        position:absolute;\n        left: 270px;\n        top: 450px;\n        background-color: darkslategray;\n        color: white;\n        font-family: munro;\n        font-size: 30px;\n        padding:5px;\n        padding-bottom: 0px;\n        text-align: center;\n        vertical-align: center;\n        z-index: 7;\n    "),d(l,"Start"),c(l,"click",en),e(n,l),n})()),e(nn,(()=>{const n=(()=>{const n=o("div");return r(n,["mini-wrapper"]),p(n,"\n        position:relative;\n        background-color: #000000;\n        border: 5px solid darkslategray;\n        width: 640px;\n        display:flex;\n        justify-content: space-around;\n        height:64px;\n        align-items:center;\n        margin-top: 10px;\n    "),e(document.body,n),n})();return t=n,de.map((n=>e(t,(e=>{const n=new Image;n.src=ue;const t=new Qe(e,n,ue,Xe.length),o=t.init();return Xe.push(t),o})(n)))),We(),(()=>{const n=o("div");r(n,["infoScreen"]),p(n,"\n        width: 250px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: 650px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n    "),e(n,(()=>{const e=o("div");return r(e,["infoTop"]),p(e,"\n        padding: 5px;\n    "),e})()),e(n,(()=>{const e=o("div");return r(e,["infoBottom"]),e})()),e(Y,(()=>{const n=o("div");r(n,["healthbar"]),p(n,"\n        width: 32px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: -52px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n        display:flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    "),me(n);const t=o("div");return p(t,`\n        position:absolute;\n        width: 16px;\n        height: 16px;\n        background: url(${ue}) -144px 0px;\n        scale: 300%;\n        image-rendering: pixelated;\n        left: 8px;\n        z-index: 5;\n        transform: translate(0, 3px);\n    `),e(n,t),n})()),e(Y,n)})(),Z(j,"click"),Z(R,"close"),Z(L,"coin"),Z(N,"epic"),Z(O,"swipe"),Z(F,"open"),n;var t})()),e(nn,(()=>{const n=(()=>{const n=o("div");r(n,["debug-wrapper"]),p(n,"\n        position:relative;\n    ");const t=o("input");t.id="slider1",c(t,"input",Ke),m(t,["type","min","max","value","class"],["range","0","640","0","slidey"]),e(n,t);const a=o("input");a.id="slider2",c(a,"input",Ke),m(a,["type","min","max","value","class"],["range","0","640","0","slidey"]),e(n,a);const i=o("h1");i.id="score",p(i,"\n        color:white;\n        font-family: munro;\n    ");const l=o("h1");return l.id="level",p(l,"\n        color:white;\n        font-family:munro;\n    "),d(l,"Level: 0"),((e="bruh")=>{Je+=1,d("bruh"===e?s("#score"):e,`Score: ${Je}`)})(i),e(n,i),e(n,l),n})();return e(document.body,n),n})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,