(()=>{"use strict";var n={320:(n,t,e)=>{e.d(t,{Z:()=>s});var o=e(537),r=e.n(o),a=e(645),i=e.n(a)()(r());i.push([n.id,".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}","",{version:3,sources:["webpack://./src/css/animations.css"],names:[],mappings:"AAAA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B",sourcesContent:[".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}"],sourceRoot:""}]);const s=i},414:(n,t,e)=>{e.d(t,{Z:()=>u});var o=e(537),r=e.n(o),a=e(645),i=e.n(a),s=e(667),l=e.n(s),c=new URL(e(542),e.b),d=i()(r()),p=l()(c);d.push([n.id,`html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(${p}) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */`,"",{version:3,sources:["webpack://./src/css/fonts.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;IACI,oBAAoB;IACpB,+DAA+C;EACjD;;EAEA;;;;;;;;;;GAUC",sourcesContent:["html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(../fonts/munro.ttf) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */"],sourceRoot:""}]);const u=d},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",o=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),o&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),o&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),e&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=e):d[2]=e),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},667:n=>{n.exports=function(n,t){return t||(t={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]|(%20)/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,o=0;o<t.length;o++)if(t[o].identifier===n){e=o;break}return e}function o(n,o){for(var a={},i=[],s=0;s<n.length;s++){var l=n[s],c=o.base?l[0]+o.base:l[0],d=a[c]||0,p="".concat(c," ").concat(d);a[c]=d+1;var u=e(p),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)t[u].references++,t[u].updater(f);else{var m=r(f,o);o.byIndex=s,t.splice(s,0,{identifier:p,updater:m,references:1})}i.push(p)}return i}function r(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=e(a[i]);t[s].references--}for(var l=o(n,r),c=0;c<a.length;c++){var d=e(a[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=l}}},569:n=>{var t={};n.exports=function(n,e){var o=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,r&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},542:(n,t,e)=>{n.exports=e.p+"f78662ff4aad4d038806.ttf"}},t={};function e(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return n[o](a,a.exports,e),a.exports}e.m=n,e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var o=t.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!n;)n=o[r--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{const n=(n,t)=>{n.appendChild(t)},t=(n,t)=>{t.parentNode===n&&n.removeChild(t)},o=n=>document.createElement(n),r=(n,t)=>{t.forEach((t=>{n.classList.add(t)}))},a=(n,t)=>n.classList.contains(t),i=(n,t)=>{t.forEach((t=>{n.classList.remove(t)}))},s=n=>document.querySelector(n),l=n=>document.querySelectorAll(n),c=(n,t)=>{n.textContent=t},d=(n,t,e)=>{n.addEventListener(t,e)},p=(n,t,e)=>{n.removeEventListener(t,e)},u=(n,t)=>{n.style.cssText=t},f=(n,t,e)=>{t.map(((t,o)=>{n.setAttribute(t,e[o])}))},m=(n,t,e,o)=>{n.style.top=e-o/2+"px",n.style.left=t-o/2+"px"},h=(n,t)=>{const e=t.getBoundingClientRect();return{x:n.clientX-e.left,y:n.clientY-e.top}},g=(n,t)=>{if(null===n||null===t)return!1;const e=n.getBoundingClientRect(),o=t.getBoundingClientRect();return!(e.right<o.left||e.left>o.right||e.bottom<o.top||e.top>o.bottom)};var A=e(379),b=e.n(A),v=e(795),x=e.n(v),y=e(569),C=e.n(y),w=e(565),B=e.n(w),k=e(216),I=e.n(k),E=e(589),M=e.n(E),_=e(320),$={};$.styleTagTransform=M(),$.setAttributes=B(),$.insert=C().bind(null,"head"),$.domAPI=x(),$.insertStyleElement=I(),b()(_.Z,$),_.Z&&_.Z.locals&&_.Z.locals;var S=e(414),R={};R.styleTagTransform=M(),R.setAttributes=B(),R.insert=C().bind(null,"head"),R.domAPI=x(),R.insertStyleElement=I(),b()(S.Z,R),S.Z&&S.Z.locals&&S.Z.locals;const D=e.p+"2303bf42784ad28af8cb.gif",z=e.p+"89cc97a32f3bdd1a1f7c.png";let T;const P=[11,14,15,16,19],j=(n,t,e)=>{L(T,n)},L=(n,t)=>{n.forEach(((n,e)=>{n.forEach(((n,o)=>{O(n,e,o,t)}))}))},O=(n,t,e,o)=>{const r=64;let a=new Image;a.src=z,a.onload=function(){o.drawImage(a,n*r,0,r,r,t*r,e*r,r,r)}},N=e.p+"c488352b32cb2834c60f.png";let Z=null,F=null,U=null,q=[];const G=(n,t,e)=>{u(q[n].ele,`\n        position:absolute;\n        pointer-events:none;\n        top: ${e}px;\n        left: ${t}px;\n    `)},H=e.p+"f6a9d30b202864f403ab.mp3",J=e.p+"46f9a3232743a28fe55c.mp3",K=e.p+"4b0a7fa0436041018c59.mp3",X=e.p+"2313cadcd41e0912116a.mp3",Y=e.p+"db5db37355927833123f.mp3",Q=e.p+"9a548da064d95ad7ec01.mp3";let W=[];const V=(n,t)=>{var e=new Audio(n);W.push({audio:e,name:t})},nn=n=>{const t=((n,t)=>{const e=n.style.left,o=n.style.top;return{x:Number(e.substring(0,e.length-2))+100,y:Number(o.substring(0,o.length-2))+100}})(Z);((n,t,e)=>{const o=q[n],r=t-o.size/2,a=e-o.size/2,i=r-o.x,s=a-o.y,l=Math.sqrt(i*i+s*s),c=i/l*o.speed,d=s/l*o.speed,p=o.x+c,u=o.y+d,f=q[n].size,m=((n,t)=>{const e=Math.floor(n/64),o=Math.floor(t/64);return T[e][o]})(p,u);if(l>o.speed&&!P.includes(m)){q[n].x=p,q[n].y=u,G(n,p-f/2,u-f/2);let t=Math.atan(-d/c);c<0&&(-d<0?t-=Math.PI:t+=Math.PI),t*=180/Math.PI;let e="left";t>=22.5&&t<=67.5?e="upright":t>=67.5&&t<=112.5?e="up":t>=112.5&&t<=157.5?e="upleft":t<=22.5&&t>=-22.5?e="right":t<=-22.5&&t>=-67.5?e="downright":t<=-67.5&&t>=-112.5?e="down":t<=-112.5&&t>=-157.5?e="downleft":t>=157.5&&t<=-157.5&&(e="left")}})(0,t.x,t.y)};e.p;const tn=(n,t)=>{const e=Math.floor(t.x/64),o=Math.floor(t.y/64);let r=T[e][o];r++,20==r&&(r=0),((n,t,e)=>{T[n][t]=e})(e,o,r)},en=1e3/30;let on=window.performance.now();const rn=(n,t,e)=>{const i=o("canvas");r(i,["game-canvas",`layer-${e}`]),f(i,["width","height"],[`${n}px`,`${t}px`]),u(i,"\n        position:absolute;\n    ");const s=i.getContext("2d");return(n=>{d(n,"click",(t=>{n.getContext("2d");const e=function(n,t){const e=n.getBoundingClientRect();return{x:t.clientX-e.left,y:t.clientY-e.top}}(n,t);a(n,"layer-1")&&tn(0,e)}))})(i),0===e&&((n,t,e)=>{T=new Array(10).fill(0).map((()=>new Array(10).fill(10))),T[2][1]=11,T[9][9]=18,T[9][8]=18,T[8][8]=19,T[8][9]=19,console.log(T),j(n)})(s),i};function an(n,t,e){const o=()=>{window.requestAnimationFrame(o);const t=window.performance.now(),e=t-on;e<en||(on=t-e%en,n.map(((n,t)=>{const e=n.getContext("2d");0===t&&j(e)})),(()=>{let n=g(Z,U);n&&nn(),l(".pathblock").forEach((t=>{g(t,U)&&(n=!0)}))})())};o()}let sn=-1;const ln=n=>{"slider1"===n.target.id?s(".layer-1").style.left=`${n.target.value}px`:"slider2"===n.target.id&&(s(".button-overlay").style.left=`${n.target.value}px`)},cn=["Magnet_Drone","Gunner_Drone","Lightning_Rod_Drone","Mirror_Drone","Air_Strike","Machine_Gun","Drone_Control_Hack","Drone_GPS_Hack","Recall_Drones","Repair_Package_Drone"],dn=["\nAttracts metal towards it\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Cooldown: none\n","\nShoots things in a small radius\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Ammo: 10 bullets\n- Damage: low\n- Cooldown: 20 seconds\n","\nAbsorbs lightning in a small radius\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Shatters after 3 lightning strikes\n- Cooldown: 20 seconds\n","\nDeflects lasers that hit it,\nclick to change deflection direction\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Shatters after 3 laser deflections\n- Cooldown: 20 seconds\n","\nCall a missile to any point on the field\n\n- Ammo: 1 missile\n- Damage: high\n- Cooldown: 10 seconds\n","\nFires shots at any point on the field,\nmachine overheats after 20 shots\n\n- Ammo: 20 bullets\n- Firerate: 4 bullets per second\n- Cooldown: 20 seconds\n","\nMakes drones moveable temporarily,\ndrag onto desired drone and\ndrag affected drone to move it\n\n- Duration: 10 seconds\n- Cooldown: 30 seconds\n","\nLocks a drone's position temporarily,\ndrag onto desired drone\n\n- Duration: 10 seconds\n- Cooldown: 30 seconds\n","\nRemove all placed drones from field.\n\n- Cooldown: none\n","\nWhen near package drone, restores\n2 health per 5 seconds.\n\n- Cooldown: 30 seconds\n"];let pn=20;const un=t=>{let e,r;null===s(".healthbar")?(e=pn,r=t):"number"==typeof t&&(e=t,pn=e,r=s(".healthbar"),r.textContent="");for(let t=0;t<e;t++){const e=20-t,a=350,i=470,s=Math.floor(e/20*(i-a)+a),l=o("div");l.id=`heart-${e}`,u(l,`\n            height:28px;\n            width: 28px;\n            margin: 2px;\n            background-color: hsl(${s}, 70%, 62%);\n        `),n(r,l)}},fn=e.p+"2ecc510bd9084ba1205a.png";let mn=[];function hn(e,a,l,g){this.name=e,this.index=g,this.img=a,this.imgsrc=l,this.currentFrame=0,this.canvele,this.imgele,this.init=()=>{const n=this.index;this.addedleft=64*mn.length,this.size;const t=this.name,e=o("canvas");r(e,["mini-canvas",`${t}`]),f(e,["width","height"],["64px","64px"]),u(e,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const a=e.getContext("2d"),i=this.img;a.imageSmoothingEnabled=!1,i.onload=function(){a.clearRect(0,0,64,64),a.drawImage(i,16*n,0,16,16,0,0,64,64)},this.canvele=e,this.ctx=a;const s=o("canvas");r(s,["canvas-icon"]),f(s,["width","height","id"],["64px","64px",t]),u(s,"\n\n        ");const l=s.getContext("2d");return l.imageSmoothingEnabled=!1,i.onload=function(){l.clearRect(0,0,64,64),l.drawImage(i,16*n,0,16,16,0,0,64,64)},s.dataset.imgsrc=this.imgsrc,s.dataset.index=n,this.imgele=s,this.initMouse(e,s),s},this.initMouse=(l,g)=>{const A=l.getContext("2d");let b;const v=F;let x,y=[],C=this.size,w=(this.currentFrame,this.index);const B=n=>{0===y.length&&y.push(setInterval((()=>{"Magnet_Drone"===e&&m(Z,x.x,x.y,200)}),200))},k=n=>{n.preventDefault(),x=h(n,v),b=h(n,document.body),m(l,b.x,b.y,64)};d(g,"mousedown",(t=>{t.preventDefault(),l.style.top="-1000px",l.style.left="-1000px",n(document.body,l),d(document.body,"mousemove",k),d(v,"mouseenter",B),A.clearRect(0,0,64,64),A.drawImage(a,16*w,0,16,16,0,0,64,64),"Magnet_Drone"===e&&(()=>{const t=o("div");t.id="magnet_hitbox",u(t,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        background-color:rgba(255,255,255, 0.5);\n        z-index: 5;\n    "),Z=t,n(s(".wrapper"),t)})()})),d(document.body,"mouseup",(n=>{p(document.body,"mousemove",k),p(v,"mouseenter",B),y.length,clearInterval(y[0]),y=[],null!=s(`.mini-canvas.${this.name}`)&&t(document.body,l),A.clearRect(0,0,C,C),"Magnet_Drone"===e&&null!==Z&&t(F,Z)})),d(g,"mouseenter",(t=>{((t,e)=>{const a=e.cloneNode(!1);a.id="infoPic",i(a,["canvas-icon"]),f(a,["width","height"],["64px","64px"]),u(a,"\n        padding-left: 5px;\n        padding-top: 10px;\n    ");const l=a.getContext("2d");l.imageSmoothingEnabled=!1;const d=new Image;d.src=a.dataset.imgsrc;const p=a.dataset.index;d.onload=function(){l.clearRect(0,0,64,64),l.drawImage(d,16*p,0,16,16,0,0,64,64)};const m=s(".infoTop");m.textContent="";const h=o("div");r(h,["infoTitle"]);let g=t.replace("_"," ");g=g.replace("_"," "),c(h,g),u(h,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n    ");const A=o("div");r(A,["infoText"]),u(A,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 15px;\n        white-space: pre;\n    "),c(A,dn[p]),n(m,h),n(m,a),n(m,A)})(t.target.id,t.target)}))}}const gn=e.p+"82e9ac88b221b8bd6b76.png",An=t=>{const e=o("div");let a;r(e,["shader"]),e.id=t,"light-shader"===t?a="\n            background-image: linear-gradient(135deg, rgba(227, 245, 66, 0.3), rgba(230, 201, 147, 0.1));\n        ":"dark-shader"===t&&(a="\n            background-image: linear-gradient(135deg, rgba(54, 88, 163, 0.3), rgba(90, 76, 115, 0.6));\n        "),u(e,`\n        height:640px;\n        width: 640px;\n        position: absolute;\n        ${a}\n    `),n(s(".shadwrap"),e)},bn=t=>{const e=o("div");r(e,["level","shader"]),e.id=t,u(e,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),"level-1"===t?n(e,xn(0,256,640,64)):"level-2"===t&&n(e,xn(0,128,640,64)),n(s(".shadwrap"),e)},vn=()=>{const n=l(".shader"),e=s(".shadwrap");n.forEach((n=>{t(e,n)}))},xn=(n,t,e,a)=>{const i=o("div");return r(i,["pathblock"]),u(i,`\n        background-color: rgba(245, 66, 66, 0.5);\n        left: ${n}px;\n        top: ${t}px;\n        height: ${a}px;\n        width: ${e}px;\n        position:absolute;\n    `),i};let yn,Cn=-1;const wn=(n,t,e,a,i)=>{const s=o("div");return r(s,["button",n]),s.id=n,u(s,`\n            position: absolute;\n            left:${a}px;\n            top: ${i}px;\n            width: 32px;\n            height: 32px;\n            background: url(${gn}) -${32*t}px 0;\n        `),d(s,"click",e),s},Bn=n=>{Cn+=1,2===Cn&&(Cn=-1,vn()),0===Cn?(An("light-shader"),bn("level-1")):1===Cn&&(vn(),bn("level-2"),An("dark-shader"))},kn=o("div");r(kn,["game"]),n(document.body,kn),u(kn,"\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n    position:relative;\n    width:100%;\n    left: -100px;\n"),n(kn,(()=>{u(document.body,`\n        background-color: #242424;\n        background-image: url("${D}");\n        background-size: 70px;\n        background-repeat: repeat;\n    `);const t=(()=>{const t=o("div");return r(t,["wrapper"]),u(t,"\n        position:relative;\n        border: 5px solid darkslategray;\n        width:640px;\n        height:640px;\n    "),n(document.body,t),F=t,t})(),e=rn(640,640,0),a=rn(640,640,1);n(t,e),n(t,a),(t=>{((t,e,a,i,s,l,c,d,p)=>{const m=o("canvas");let h;r(m,["spritecanvas"]),f(m,["id","width","height"],[e,"64px","64px"]),"none"===i?h="none":(h=new Image,h.src=i),u(m,"\n        position:absolute;\n        pointer-events:none;\n        top: 300px;\n        left: 100px;\n    ");let g={name:e,size:32,ele:m,x:100,y:300,direction:"left",img:h,speed:5,direction_data:{none:0},draw_index:0,frame:0,show:!0,frames:1,updates_per_frames:2,timer:1};q.push(g);{const e=m.getContext("2d");e.imageSmoothingEnabled=!1,h.onload=function(){e.clearRect(0,0,64,64),e.drawImage(h,0,0,32,32,0,0,64,64)},n(t,m)}U=m})(t,"package_drone",0,N)})(t),(t=>{const e=o("div");r(e,["shadwrap"]),u(e,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),n(t,e)})(t),console.log("commencing"),an([e,a]);const i=(yn=o("div"),r(yn,["button-overlay"]),u(yn,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(t=>{n(t,wn("changebg",8,Bn,16,16))})(yn),yn);return n(t,i),t})()),n(kn,(()=>{const t=(()=>{const t=o("div");return r(t,["mini-wrapper"]),u(t,"\n        position:relative;\n        background-color: #000000;\n        border: 5px solid darkslategray;\n        width: 640px;\n        display:flex;\n        justify-content: flex-start; \n        height:64px;\n        align-items:center;\n        margin-top: 10px;\n    "),n(document.body,t),t})();return e=t,cn.map((t=>n(e,(n=>{const t=new Image;t.src=fn;const e=new hn(n,t,fn,mn.length),o=e.init();return mn.push(e),o})(t)))),(()=>{const t=o("div");r(t,["infoScreen"]),u(t,"\n        width: 250px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: 650px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n    "),n(t,(()=>{const n=o("div");return r(n,["infoTop"]),u(n,"\n        padding: 5px;\n    "),n})()),n(t,(()=>{const n=o("div");return r(n,["infoBottom"]),n})()),n(F,(()=>{const n=o("div");return r(n,["healthbar"]),u(n,"\n        width: 32px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: -52px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n        display:flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    "),un(n),n})()),n(F,t)})(),V(H,"click"),V(J,"close"),V(K,"coin"),V(X,"epic"),V(Y,"swipe"),V(Q,"open"),t;var e})()),n(kn,(()=>{const t=(()=>{const t=o("div");r(t,["debug-wrapper"]),u(t,"\n        position:relative;\n    ");const e=o("input");e.id="slider1",d(e,"input",ln),f(e,["type","min","max","value","class"],["range","0","640","0","slidey"]),n(t,e);const a=o("input");a.id="slider2",d(a,"input",ln),f(a,["type","min","max","value","class"],["range","0","640","0","slidey"]),n(t,a);const i=o("h1");return i.id="score",u(i,"\n        color:white;\n        font-family: munro;\n    "),((n="bruh")=>{sn+=1,c("bruh"===n?s("#score"):n,`Score: ${sn}`)})(i),n(t,i),t})();return n(document.body,t),t})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,