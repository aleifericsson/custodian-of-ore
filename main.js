(()=>{"use strict";var e={320:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([e.id,".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}","",{version:3,sources:["webpack://./src/css/animations.css"],names:[],mappings:"AAAA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B",sourcesContent:[".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}"],sourceRoot:""}]);const s=a},414:(e,n,t)=>{t.d(n,{Z:()=>p});var o=t(537),r=t.n(o),i=t(645),a=t.n(i),s=t(667),l=t.n(s),d=new URL(t(542),t.b),c=a()(r()),u=l()(d);c.push([e.id,`html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(${u}) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */`,"",{version:3,sources:["webpack://./src/css/fonts.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;IACI,oBAAoB;IACpB,+DAA+C;EACjD;;EAEA;;;;;;;;;;GAUC",sourcesContent:["html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(../fonts/munro.ttf) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */"],sourceRoot:""}]);const p=c},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);o&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),n.push(c))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],d=o.base?l[0]+o.base:l[0],c=i[d]||0,u="".concat(d," ").concat(c);i[d]=c+1;var p=t(u),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)n[p].references++,n[p].updater(h);else{var g=r(h,o);o.byIndex=s,n.splice(s,0,{identifier:u,updater:g,references:1})}a.push(u)}return a}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=t(i[a]);n[s].references--}for(var l=o(e,r),d=0;d<i.length;d++){var c=t(i[d]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}i=l}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},542:(e,n,t)=>{e.exports=t.p+"f78662ff4aad4d038806.ttf"}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var i=n[o]={id:o,exports:{}};return e[o](i,i.exports,t),i.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!e;)e=o[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{const e=(e,n)=>{e.appendChild(n)},n=(e,n)=>{n.parentNode===e&&e.removeChild(n)},o=e=>document.createElement(e),r=(e,n)=>{n.forEach((n=>{e.classList.add(n)}))},i=(e,n)=>e.classList.contains(n),a=(e,n)=>{n.forEach((n=>{e.classList.remove(n)}))},s=e=>document.querySelector(e),l=e=>document.querySelectorAll(e),d=(e,n)=>{e.textContent=n},c=(e,n,t)=>{e.addEventListener(n,t)},u=(e,n,t)=>{e.removeEventListener(n,t)},p=(e,n)=>{e.style.cssText=n},h=(e,n,t)=>{n.map(((n,o)=>{e.setAttribute(n,t[o])}))},g=(e,n,t,o)=>{e.style.top=t-o/2+"px",e.style.left=n-o/2+"px"},m=(e,n)=>{const t=n.getBoundingClientRect();return{x:e.clientX-t.left,y:e.clientY-t.top}},f=(e,n)=>{if(null===e||null===n)return!1;const t=e.getBoundingClientRect(),o=n.getBoundingClientRect();return!(t.right-15<o.left+15||t.left+15>o.right-15||t.bottom-15<o.top+15||t.top+15>o.bottom-15)},x=(e,n)=>{if(null===e||null===n)return!1;const t=e.getBoundingClientRect(),o=n.getBoundingClientRect();return!(t.right<o.left||t.left>o.right||t.bottom<o.top||t.top>o.bottom)},b=(e,n)=>{const t=e.style.left,o=e.style.top;let r,i;return"none"===n?(r=Number(t.substring(0,t.length-2)),i=Number(o.substring(0,o.length-2))):(r=Number(t.substring(0,t.length-2))+n/2,i=Number(o.substring(0,o.length-2))+n/2),{x:r,y:i}};var y=t(379),v=t.n(y),A=t(795),w=t.n(A),_=t(569),k=t.n(_),M=t(565),C=t.n(M),I=t(216),B=t.n(I),D=t(589),$=t.n(D),T=t(320),E={};E.styleTagTransform=$(),E.setAttributes=C(),E.insert=k().bind(null,"head"),E.domAPI=w(),E.insertStyleElement=B(),v()(T.Z,E),T.Z&&T.Z.locals&&T.Z.locals;var z=t(414),R={};R.styleTagTransform=$(),R.setAttributes=C(),R.insert=k().bind(null,"head"),R.domAPI=w(),R.insertStyleElement=B(),v()(z.Z,R),z.Z&&z.Z.locals&&z.Z.locals;const S=t.p+"2303bf42784ad28af8cb.gif",P=t.p+"82e9ac88b221b8bd6b76.png";t.p;let L=null,j=null,F=null,N=null,O=null,W=null;const Z=t.p+"89cc97a32f3bdd1a1f7c.png";let U;const H=(e,n)=>{e.forEach(((e,t)=>{e.forEach(((e,o)=>{G(e,t,o,n)}))}))},G=(e,n,t,o)=>{const r=64;let i=new Image;i.src=Z,i.onload=function(){o.drawImage(i,e*r,0,r,r,n*r,t*r,r,r)}},Y=()=>new Array(10).fill(0).map((()=>new Array(10).fill(10))),q=t.p+"34d9a99d3f3e7de647ab.png",J=t.p+"bd6b270a5746a2e9b4ff.png",K=t.p+"3d5d3708ee783e84e3da.png",X=t.p+"8a4cc9c73d3e00071e47.png";let Q=0;const V=[4,5,8,9,10];let ee=[350,450,250,560,200,350,270];const ne=["down","left","up","right","random"],te=["Magnet_Drone","Force-field_Drone","Lightning_Rod_Drone","Air_Strike","Machine_Gun","Drone_GPS_Hack","Recall_Drones","Repair_Package_Drone"],oe=["\nAttracts metal towards it\n\n- Placeable\n- Only one on the field at a time\n\n- Cooldown: none\n","\nDissolves bullets and missiles it touches,\nbut can be taken down by attack drones\n\n- Placeable\n- Only one on the field at a time\n\n- Depletes power in 10 seconds\n- Cooldown: 15 seconds\n","\nAbsorbs lightning in a small radius\n\n- Placeable\n- Only one on the field at a time\n\n- Depletes power in 10 seconds\n- Cooldown: 15 seconds\n","\nCall a missile to any point on the field\n\n- Ammo: 1 missile\n- Damage: high\n- Cooldown: 3 seconds\n","\nFires shots at any point on the field,\nmachine overheats after 20 shots\n\n- Ammo: 20 bullets\n- Firerate: 4 bullets per second\n- Cooldown: 10 seconds\n","\nLocks position of all drones temporarily,\nmissiles lose heat-seeking function.\n\n- Duration: 10 seconds\n- Cooldown: 20 seconds\n","\nRemove all placed drones from field.\n\n- Cooldown: none\n","\nWhen held near package drone, \nrestores 2 health every 4 seconds.\n\n- Cooldown: 20 seconds\n","\nHas Dio's special package,\nget it to his house somewhere west.\n","\nShoots low damage burst shots\nin 4 diagonal directions.\n","\nFires heat-seeking missiles\nor torpedoes,  tboth are high damage.\n","\nWill try to ram into you and cut you\nwith its saws. Longer contact means\nmore damage.\n","\nThe boss. Can spawn attack drones\nand even summon lightning somehow.\n"],re=t.p+"253f6d096c5e70f2592b.png",ie=t.p+"288679a9935244c50a6f.png",ae=[["D: My package has been suspiciously failed to be delivered twice in a row now!","D: I'm not even getting refunds for this!!","D: I guess when you want something done you have to do it yourself."],["P: Package drone status: Ready to deliver ref#7355608","P: Package drone status: Aberration detected - access from unautorised party","P: Package drone status: Limited remote control mode activated. Freedom of movement restricted at this admin level","D: Damn, I'm in but I cant' move. Guess I'll need my magnet drones to move the package. At least I haven't triggered security... yet."],["P: Package drone status: Warning. Security drones in area. Deviation from designated path may result in aggression.","D: These will do nothing against what I have in my arsenal."],["P: Package drone status: Warning. Heavy wind detected, recalculation of trajectory detected to remain on path.","D: Might be wise to control the drone's rotors directly with my control hack, even if it is temporary."],["D: What?! The path doesn't even go to my house! Someone's already in the system and stealing packages. No wonder I never got mine.","D: No time to get distracted tho, the sooner I get my package, the sooner I can forget about this scummy company."],["S: Security drone status: Aberration detected in rogue package drone. Requesting immediate backup to eliminate the issue","D: Finally: A reason to go all out"],["D: Hey, that's my house! I'm so close!","d: !!..","A: You have laid waste to my brethren and humiliated me!","A: Why do you persist in protecting a nonsentient piece of scrap metal?","d: I'm just rightfully getting something I paid for. Now get out my way before you end up like the rest of your trash!","A: Such determination you hold for something your life is not dependent on!","A: Unlike you, I will get REPLACED if I fail to elimiate any aberrations, and now your on the top of my list!","d: About time you get an update! Your buggy programming can't detect a real threat to your crumbling company if you ever saw one.","d: There are thieves in your system and you go after a guy who's protecting his legal property?! I think it's time for YOU to pay."],["A: Well, you have defeated me. I failed the one job I was programmed to complete. I will no doubt be replaced soon.","A: Say something nice. It might be the last thing I hear before I'm gone forever","D: We're not too different, man. We both made sacrifices defending metal.","D: Tell me, do you have a name?","A: They refered to me as 'Security AI Beta Test v8.10.04'","D: Haha, no wonder you failed. You never made it past beta!","D: Well then, I will give you a proper name. You will be crowned as the one who guarded pieces of rock minerals.","D: The custodian of ore.","C: Befitting name. So long then, enjoy your package.","D: Finally, it is in my hands!","D: Tungsten cube!!"]];let se=0,le=[];const de=e=>{Number.isInteger(e)&&(se=e);const n=ue(le[se]);se+=1,c(n,"click",ce)},ce=e=>{se<=3&&ve();let t=e.target;i(t,"dialogue")||(t=t.parentNode,i(t,"dialogue")||(t=t.parentNode)),u(t,"click",ce),r(t,["dialogue-start-end"]),setTimeout((()=>{n(s(".game"),t),le[se-1].follow&&de()}),200)},ue=n=>{const t=o("div");return r(t,["dialogue","dialogue-start-end"]),h(t,["id","draggable"],[`dialogue-${n.code}`,"false"]),p(t,"\n            color:white;\n            background-color: slategray;\n            border: 5px solid darkred;\n            position:absolute;\n            transition: 0.1s;\n            width: 600px;\n            height: 100px;\n            left: calc(50% -200px);\n            top: 500px;\n            display:flex;\n            justify-content: flex-start;\n            align-items: center;\n            gap: 10px;\n            padding: 10px;\n            z-index: 7;\n        "),e(t,pe(n.charactersrc,n.index)),e(t,he(n.text,n.charname)),e(s(".game"),t),setTimeout((()=>t.classList.remove("dialogue-start-end")),100),t},pe=(e,n)=>{const t=o("div");return r(t,["charBox"]),p(t,`\n        border: 2px solid darkred;\n        min-width: 32px;\n        min-height: 32px;\n        margin: 16px;\n        scale: 2;\n        image-rendering: pixelated;\n        background: url(${e}) -${32*n}px 0px;\n    `),t},he=(n,t)=>{const r=o("div"),i=o("div"),a=o("div");return p(r,"\n        position:relative;\n        top: -10px;\n    "),p(i,"\n        color:white;\n        font-family: 'munro';\n        font-size: 20px;\n    "),p(a,"\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n    "),d(i,n),d(a,t),e(r,a),e(r,i),r},ge=()=>{ae.map((e=>{e.map(((n,t)=>{const o=n.substring(0,1),r=n.substring(3,n.length);let i,a,s,l=ie;s=t!==e.length-1,"D"===o?(i="Dio",a=0):"d"===o?(i="Dio",a=3):"A"===o?(i="Security AI",a=4):"P"===o?(i="Package Drone",a=1):"S"===o?(i="Security Drone",a=2):"C"===o&&(i="Custodian of Ore",a=4),((e,n,t,o,r,i)=>{le.push({text:e,code:t,charactersrc:o,follow:r,charname:n,index:i})})(r,i,a,l,s,a),a+=1}))}))},me=t.p+"9f4a624ec8848f4ec512.png";let fe=!0,xe=0,be=0;const ye=(e,n)=>{xe=e,fe=n;const t=s(".cutscene");t.style.visibility=fe?"visible":"hidden",t.style.background=`url(${me}) -${320*xe}px 0px`},ve=()=>{3===be&&(ye(xe,!1),setTimeout((()=>{de()}),1e3)),0===be?(be+=1,u(s(".start-but"),"click",ve),n(j,s(".start-but")),de(),ye(1,!0)):2===be?(ye(2,!0),be+=1):be+=1},Ae=t.p+"40bead41f130d5bf6de7.png",we=t.p+"99abed76b1b33034fd39.png",_e=t.p+"e17a9544f3d78de0605e.png",ke=t.p+"3331e3f5214631b75c3d.png",Me=(e,n)=>{const t=Math.floor(n.x/64),o=Math.floor(n.y/64);let r=U[t][o];r++,20==r&&(r=0),((e,n,t)=>{U[e][n]=t})(t,o,r)},Ce=n=>{const t=o("div");let i;r(t,["shader"]),t.id=n,"light-shader"===n?i="\n            background-image: linear-gradient(135deg, rgba(227, 245, 66, 0.3), rgba(230, 201, 147, 0.1));\n        ":"dark-shader"===n&&(i="\n            background-image: linear-gradient(135deg, rgba(54, 88, 163, 0.3), rgba(90, 76, 115, 0.6));\n        "),p(t,`\n        height:640px;\n        width: 640px;\n        position: absolute;\n        z-index: 5;\n        ${i}\n    `),e(N,t)},Ie=(e,n,t,i)=>{const a=o("div");return r(a,["pathblock"]),p(a,`\n        background-color: rgba(245, 66, 66, 0.3);\n        left: ${e}px;\n        top: ${n}px;\n        height: ${i}px;\n        width: ${t}px;\n        position:absolute;\n    `),a},Be=()=>{l(".pathblock").forEach((e=>{n(N,e)}))},De=e=>{const n=o("div");return r(n,["endblock"]),p(n,"\n            background-color: rgba(34, 117, 59, 0.6);\n            left: 0px;\n            top: 0px;\n            height: 640px;\n            width: 10px;\n            position:absolute;\n        "),n};let $e=[],Te=20,Ee=!1,ze=40;function Re(t,i,a,l){this.name=t,this.index=l,this.img=i,this.imgsrc=a,this.currentFrame=0,this.canvele,this.imgele,this.backele,this.lock=null,this.init=()=>{const n=this.index;this.addedleft=64*$e.length,this.size;const t=this.name,i=o("canvas");r(i,["mini-canvas",`${t}`]),h(i,["width","height"],["64px","64px"]),p(i,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const a=i.getContext("2d"),s=this.img;a.imageSmoothingEnabled=!1,s.onload=function(){a.clearRect(0,0,64,64),a.drawImage(s,16*n,0,16,16,0,0,64,64)},this.canvele=i,this.ctx=a;const l=o("canvas");r(l,["canvas-icon"]),h(l,["width","height","id"],["64px","64px",t]),p(l,"\n        ");const d=o("div");r(d,["backele",t]),p(d,"\n            width: 64px;\n            height: 64px;\n            position:relative;\n        ");const c=l.getContext("2d");return c.imageSmoothingEnabled=!1,s.onload=function(){c.clearRect(0,0,64,64),c.drawImage(s,16*n,0,16,16,0,0,64,64)},l.dataset.imgsrc=this.imgsrc,l.dataset.index=n,this.imgele=l,this.initMouse(i,l),e(d,l),this.backele=d,d},this.cooldown=i=>{const a=this.backele,s=o("div");r(s,["lock",t]),p(s,`\n            width: 16px;\n            height: 16px;\n            scale: 4;\n            top: 24px;\n            left: 24px;\n            image-rendering: pixelated;\n            position:absolute;\n            background: url(${re}) -144px 0px;\n        `),e(a,s),this.lock=s,setTimeout((()=>{n(a,s),this.lock=null}),i)},this.initMouse=(r,a)=>{const l=r.getContext("2d");let d;const h=j;let f,x=[],b=this.size,y=(this.currentFrame,this.index),v=!1;const A=e=>{v=!0,0===x.length&&("Machine_Gun"===t?(Te=20,x.push(setInterval((()=>{0===Te?clearInterval(x[0]):(Te-=1,Ge("good_hit",f.x-24,f.y-24,90*Math.floor(4*Math.random())))}),250))):"Magnet_Drone"===t?x.push(setInterval((()=>{g(L,f.x,f.y,200)}),100)):"Lightning_Rod_Drone"===t?x.push(setInterval((()=>{g(W,f.x,f.y,200)}),100)):"Repair_Package_Drone"===t&&x.push(setInterval((()=>{g(O,f.x,f.y,200),0===ze?(ze=40,Ve(Xe+2)):ze-=1}),100)))},w=e=>{e.preventDefault(),f=m(e,h),d=m(e,document.body),g(r,d.x,d.y,64)};c(a,"mousedown",(a=>{a.preventDefault(),r.style.top="-1000px",r.style.left="-1000px",e(document.body,r),c(document.body,"mousemove",w),c(h,"mouseenter",A),l.clearRect(0,0,64,64),l.drawImage(i,16*y,0,16,16,0,0,64,64),"Magnet_Drone"===t?(null!==L&&(n(j,L),L=null),(()=>{const n=o("div");n.id="magnet_hitbox",p(n,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        z-index: 5;\n        pointer-events: none;\n    "),L=n,e(s(".wrapper"),n)})()):("Force-field_Drone"===t&&this.cooldown(15e3),"Lightning_Rod_Drone"===t&&(this.cooldown(15e3),(()=>{const n=o("div");n.id="lr_hitbox",p(n,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        z-index: 5;\n        pointer-events: none;\n        background-color: rgba(255,255,255, 0.5);\n    "),W=n,e(s(".wrapper"),n)})()),"Air_Strike"===t&&(Pe=!0,Be(),this.cooldown(3e3)),"Machine_Gun"===t&&(this.cooldown(1e4),Pe=!0,Be()),"Drone_GPS_Hack"===t&&(this.cooldown(2e4),Ee=!0,setTimeout((()=>{Ee=!1}),1e4)),"Repair_Package_Drone"===t&&((()=>{const n=o("div");n.id="heal_hitbox",p(n,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        z-index: 5;\n        pointer-events: none;\n    "),O=n,e(s(".wrapper"),n)})(),this.cooldown(2e4)),"Recall_Drones"===t&&(null!==on[1]&&cn(1),null!==on[2]&&cn(2),null!==on[3]&&cn(3))),["Magnet_Drone","Lightning_Rod_Drone","Force-field_Drone"].includes(this.name)&&null!==on[ln(this.name)]&&cn(ln(this.name))})),c(document.body,"mouseup",(e=>{u(document.body,"mousemove",w),u(h,"mouseenter",A);let o=m(e,h);if(!0===v){if("Air_Strike"===this.name&&Ge("good_missile",o.x,o.y,0),["Magnet_Drone","Lightning_Rod_Drone","Force-field_Drone"].includes(this.name)){const e=o.x-40,r=o.y-40,i=4;if(e<576&&e>0&&r<576&&r>0)if(hn(t,e,r),"Force-field_Drone"===t){const n=e-10,t=r-10;Ge("force_field",n+32+i/2,t-i,90),Ge("force_field",n-i,t+32+i/2,0),Ge("force_field",n+32+i/2,t+64+i,90),Ge("force_field",n+64+i,t+32+i/2,0),setTimeout((()=>{cn(3)}),1e4)}else"Lightning_Rod_Drone"===t&&setTimeout((()=>{cn(2),n(j,W),W=null}),1e4)}"Repair_Package_Drone"===t&&null!==O&&(n(j,O),L=null),v=!1}clearInterval(x[0]),x=[],null!=s(`.mini-canvas.${this.name}`)&&n(document.body,r),l.clearRect(0,0,b,b)})),c(a,"mouseenter",(e=>{nn(e.target.id,e.target)}))}}let Se=[],Pe=!1;const Le=(e,n,t)=>{let o,i,a,s=5;"gunner_drone"===e&&(o=we,i=100),"missile_drone"===e&&(o=_e,i=250),"attack_drone"===e&&(o=ke,i=6,s=2),"none"===o?a="none":(a=new Image,a.src=o);let l=Math.floor(Math.random()*i*.5),d=360*Math.random();const c=an(j,e,32,o,n,t,5,!0,6);r(c,["enemy"]),Se.push({ele:c,type:e,x:n,y:t,img:a,fireevery:i,firetimer:l,timeout:null,size:64,moving:!1,moveTimer:10,speed:s,rot:d,direction_data:{none:0},draw_index:0,frame:0,show:!0,frames:6,updates_per_frames:4,timer:1,hp:5})},je=(e,n)=>{const t=e.x,o=e.y,r=n+90,i=e.speed*Math.cos(r*(Math.PI/180)),a=e.speed*Math.sin(r*(Math.PI/180)),s=t+i-e.size/2,l=o+a-e.size/2;let d=!0;s<576&&s>0&&l<576&&l>0&&(d=!1),d||(e.x=s+e.size/2,e.y=l+e.size/2,e.ele.style.left=`${e.x}px`,e.ele.style.top=`${e.y}px`)},Fe=e=>{n(j,e.ele),u(e.ele,"mouseenter",sn),Se=Se.filter((function(n){return n!==e}))},Ne=(e,n)=>{Ge("bullet",e,n,45),Ge("bullet",e,n,135),Ge("bullet",e,n,225),Ge("bullet",e,n,315)},Oe=()=>{Se=[],l(".enemy").forEach((e=>{n(j,e),u(e,"mouseenter",sn)}))};let We=[],Ze=null,Ue=null,He=[];const Ge=(n,t,i,a)=>{const s=o("div");let l,d,c,u=i,h=0,g=1,m="none";"wind"===n?(l=9,d=100,h=1,c=2):"bullet"===n?(l=1,d="none",h=10,c=2):"hit"===n?(l=2,d=10,c=2):"lightning_warning"===n?(l=10,d=20,c=4,g=.5):"lightning_strike"===n?(l=4,d=7,h=0,c=4):"lightning_bolt"===n?(l=3,d=7,c=4):"missile"===n?(l=0,d="none",h=12,c=2):"explosion"===n?(l=7,d=10,c=2):"good_missile"===n?(l=0,d="none",h=15,c=2,m=i,u=0):"good_explosion"===n?(l=7,d=10,c=4):"good_hit"===n?(l=2,d=10,c=4):"force_field"===n&&(l=12,c=4,d="none"),r(s,["effect",n]),p(s,`\n        scale: ${c};\n        top: ${i}px;\n        left: ${t}px;\n        height: 16px;\n        width: 16px;\n        background: url(${Ae}) -${16*l}px 0;\n        position:absolute;\n        image-rendering: pixelated;\n        transform: rotate(${a}deg);\n        opacity: ${g};\n    `);const f={type:n,x:t,y:u,speed:h,fadein:d,rot:a,ele:s,size:16,final_y:m};We.push(f),"good_explosion"===n&&(Ze=s),"good_hit"===n&&(null!=Ue&&(Ke(Ue),Ue=null),Ue=f),"force_field"===n&&He.push(s),e(N,s)},Ye=()=>{We=[],l(".effect").forEach((e=>{n(N,e)}))},qe=e=>{const n=e.x,t=e.y,o=e.rot+90,r=e.speed*Math.cos(o*(Math.PI/180)),i=e.speed*Math.sin(o*(Math.PI/180)),a=n+r-e.size/2,s=t+i-e.size/2;let d=!1;l(".edge").forEach((n=>{x(n,e.ele)&&(d=!0)})),d?Ke(e):(e.x=a+e.size/2,e.y=s+e.size/2,e.ele.style.left=`${e.x}px`,e.ele.style.top=`${e.y}px`)},Je=(e,n,t)=>{const o=b(t,64),r=o.x-e,i=o.y-n;let a=Math.atan(-i/r);return r<0&&(-i<0?a-=Math.PI:a+=Math.PI),a*=180/Math.PI,a-=90,a=-a,a<=-180&&(a+=360),a},Ke=e=>{n(N,e.ele),We=We.filter((function(n){return n!==e}))};let Xe=20,Qe=100;const Ve=n=>{if(n<=0)ye(4,!0),s(".healthbar").textContent="",Ye(),Oe();else{let t,r;null===s(".healthbar")?(t=Xe,r=n):"number"==typeof n&&(t=n>20?20:n,Xe=t,r=s(".healthbar"),r.textContent="");for(let n=0;n<t;n++){const t=20-n,i=350,a=470,s=Math.floor(t/20*(a-i)+i),l=o("div");l.id=`heart-${t}`,p(l,`\n            height:28px;\n            width: 28px;\n            margin: 2px;\n            background-color: hsl(${s}, 70%, 62%);\n        `),e(r,l)}}},en=e=>{Qe=e;const t=s(".bbbar");e<=0?n(j,t):t.style.width=e/100*500+"px"},nn=(n,t)=>{const i=t.cloneNode(!1);i.id="infoPic",a(i,["canvas-icon"]),"boss"===n?(h(i,["width","height"],["256px","256px"]),p(i,"\n            padding-left: 5px;\n            padding-top: 10px;\n            left: -15px;\n            position:relative;\n        ")):(h(i,["width","height"],["64px","64px"]),p(i,"\n        padding-left: 5px;\n        padding-top: 10px;\n    "));const l=i.getContext("2d");l.imageSmoothingEnabled=!1;const c=new Image;c.src=i.dataset.imgsrc;let u=i.dataset.index;["package_drone","gunner_drone","missile_drone","attack_drone","boss"].includes(n)?c.onload="boss"===n?function(){l.clearRect(0,0,256,256),l.drawImage(c,0,0,128,128,0,0,256,256)}:function(){l.clearRect(0,0,64,64),l.drawImage(c,0,0,32,32,0,0,64,64)}:c.onload=function(){l.clearRect(0,0,64,64),l.drawImage(c,16*u,0,16,16,0,0,64,64)},"package_drone"===n&&(u=8),"gunner_drone"===n&&(u=9),"missile_drone"===n&&(u=10),"attack_drone"===n&&(u=11),"boss"===n&&(u=12);const g=s(".infoTop");g.textContent="";const m=o("div");r(m,["infoTitle"]);let f=n.replace("_"," ");f=f.replace("_"," "),d(m,f),p(m,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n        text-transform: capitalize;\n    ");const x=o("div");r(x,["infoText"]),p(x,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 15px;\n        white-space: pre;\n    "),d(x,oe[u]),e(g,m),e(g,i),e(g,x)};let tn,on=[null,null,null,null],rn=["package_drone","magnet_drone","lightning_rod_drone","force_field_drone"];const an=(n,t,i,a,s,l,d,u,g)=>{let m=64;"boss"===t&&(m=256,console.log("huh???"));const f=o("canvas");let x;r(f,["spritecanvas",t]),h(f,["id","width","height"],[t,`${m}px`,`${m}px`]),"none"===a?x="none":(x=new Image,x.src=a),p(f,`\n        position:absolute;\n        top: ${l}px;\n        left: ${s}px;\n    `);let b={name:t,size:i,ele:f,canvsize:m,x:s,y:l,direction:"left",img:x,speed:d,direction_data:{none:0},draw_index:0,frame:0,show:u,frames:g,updates_per_frames:4,timer:1};if(rn.includes(t)&&(on[ln(t)]=b),u){const t=f.getContext("2d");t.imageSmoothingEnabled=!1,x.onload=function(){t.clearRect(0,0,m,m),t.drawImage(x,0,0*i,i,i,0,0,m,m)},e(n,f),c(f,"mouseenter",sn)}return"package_drone"===t&&(F=f),"boss"===t&&(tn=b),f.dataset.imgsrc=a,f},sn=e=>{nn(e.target.id,e.target)},ln=e=>{let n;return n="package_drone"===e?0:"lightning_rod_drone"===e||"Lightning_Rod_Drone"===e?2:"magnet_drone"===e||"Magnet_Drone"===e?1:3,n},dn=(e,n,t,o)=>{const r=on[e],i=o?2:r.speed,a=n-r.size/2,s=t-r.size/2,l=a-r.x,d=s-r.y,c=Math.sqrt(l*l+d*d),u=l/c*i,p=d/c*i,h=r.x+u-r.size/2,g=r.y+p-r.size/2;Math.atan(-p/u),((e,n)=>{if(e>0&&n>0&&e<=640&&n<=640){const t=Math.floor(e/64),o=Math.floor(n/64);U[t][o]}})(h,g);let m=!0;if(h<576&&h>0&&g<576&&g>0&&(m=!1),m);else if(c>r.speed){on[e].x=h+r.size/2,on[e].y=g+r.size/2,pn(e,h,g);let n=Math.atan(-p/u);u<0&&(-p<0?n-=Math.PI:n+=Math.PI),n*=180/Math.PI;let t="left";n>=22.5&&n<=67.5?t="upright":n>=67.5&&n<=112.5?t="up":n>=112.5&&n<=157.5?t="upleft":n<=22.5&&n>=-22.5?t="right":n<=-22.5&&n>=-67.5?t="downright":n<=-67.5&&n>=-112.5?t="down":n<=-112.5&&n>=-157.5?t="downleft":n>=157.5&&n<=-157.5&&(t="left")}},cn=e=>{n(j,on[e].ele),on[e]=null,u(on[e],"mouseenter",sn)},un=(e,n,t)=>{let o=n;if("increment"===n&&(e.timer===e.updates_per_frames?(o=e.frame+1,e.frame=o,e.timer=1):e.timer+=1),o===e.frames&&(o="highlight"===e.name?1:0,e.frame=o),1===e.timer){e.direction=t;const n=e.direction_data[t];e.draw_index=n;const r=e.ele.getContext("2d"),i=e.img;r.clearRect(0,0,64,64),r.drawImage(i,32*o,32*n,32,32,0,0,64,64)}},pn=(e,n,t)=>{p(on[e].ele,`\n        position:absolute;\n        pointer-events:none;\n        top: ${t}px;\n        left: ${n}px;\n    `)},hn=(e,n,t)=>{let o,r;"Lightning_Rod_Drone"===e?(o=J,r="lightning_rod_drone"):"Magnet_Drone"===e?(o=X,r="magnet_drone"):"Force-field_Drone"===e&&(o=K,r="force_field_drone"),an(j,r,32,o,n,t,0,!0,6)},gn=t.p+"84225ec5d1329e2c7ddb.png";let mn,fn=null,xn=null,bn=["fire","missile","drones","charge","evade","lightning"];const yn=[{x:86,y:35},{x:98,y:46},{x:106,y:56}],vn=[{x:73,y:73},{x:90,y:90}],An=[{x:86,y:60},{x:78,y:50},{x:93,y:67}],wn=()=>{null!==Ue&&f(mn,Ue.ele)&&(Ge("hit",Ue.x,Ue.y,90*Math.floor(4*Math.random())),Ke(Ue),Ue=null,en(Qe-1)),null!==Ze&&f(mn,Ze)&&(en(Qe-5),Ze=null)},_n=()=>{const e=b(mn,"none");yn.map((n=>{Ge("bullet",e.x+2*n.x-10,e.y+2*(128-n.y),-90)}))},kn=()=>{const e=b(mn,"none");vn.map((n=>{Ge("missile",e.x+2*n.x-10,e.y+2*(128-n.y),-135)}))},Mn=e=>{_n(),setTimeout((()=>{_n()}),400),setTimeout((()=>{_n()}),800),setTimeout((()=>{_n()}),1200),setTimeout((()=>{2===e?xn=null:fn=null}),6e3)},Cn=e=>{setTimeout((()=>{kn()}),1e3),setTimeout((()=>{kn()}),3e3),setTimeout((()=>{2===e?xn=null:fn=null}),6e3)},In=()=>{const e=b(mn,"none"),n=An[Math.floor(Math.random()*An.length)];Le("attack_drone",e.x+2*(5*Math.random()+n.x),e.y+2*(5*Math.random()+n.y))},Bn=e=>{In(),setTimeout((()=>{In()}),2e3),setTimeout((()=>{In()}),4e3),setTimeout((()=>{2===e?xn=null:fn=null}),6e3)},Dn=e=>{},$n=e=>{},Tn=e=>{};let En;const zn=(e,n,t,i,a)=>{const s=o("div");return r(s,["button",e]),s.id=e,p(s,`\n            position: absolute;\n            left:${i}px;\n            top: ${a}px;\n            width: 32px;\n            height: 32px;\n            background: url(${P}) -${32*n}px 0;\n        `),c(s,"click",t),s},Rn=()=>{if(l(".shader").forEach((e=>{n(N,e)})),null!==on[1]&&cn(1),null!==on[2]&&cn(2),null!==on[3]&&cn(3),10===Q?Q=0:Q+=1,10===Q){const n=an(j,"boss",128,gn,25,200,5,!0,1);mn=n,(()=>{const n=o("div");r(n,["bbwrap"]),p(n,"\n        width: 550px;\n        max-height: 12px;\n        background-color: #242424;\n        position: absolute;\n        left: 40px;\n        color:white;\n        display:flex;\n        justify-content: flex-start;\n        padding: 10px;\n        align-items: center;\n        position:absolute;\n        gap: 20px;\n        z-index: 5;\n    ");const t=o("div");p(t,"\n        font-size: 20px;\n        font-family:munro;\n        color:white;\n    "),d(t,"BOSS"),e(n,t);const i=o("div");r(i,["bbbar"]),p(i,"\n        height: 5px;\n        width: 500px;\n        background-color: white;\n    "),e(n,i),e(j,n)})()}d(s("#level"),`Level: ${Q}`),(n=>{const t=o("div");r(t,["level","shader"]),t.id=n,p(t,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),Ye(),(e=>{Oe(),"level-1"===e?(Le("gunner_drone",70,450),Le("gunner_drone",100,50)):"level-2"===e?(Le("gunner_drone",150,450),Le("gunner_drone",100,100)):"level-3"===e?(Le("gunner_drone",50,50),Le("gunner_drone",70,400),Le("gunner_drone",300,400)):"level-4"===e?(Le("gunner_drone",50,50),Le("gunner_drone",200,500),Le("gunner_drone",200,200)):"level-5"===e?(Le("missile_drone",150,400),Le("gunner_drone",200,350),Le("gunner_drone",300,500),Le("gunner_drone",500,550)):"level-6"===e?(Le("gunner_drone",500*Math.random()+50,500*Math.random()+50),Le("gunner_drone",50,300),Le("gunner_drone",100,500*Math.random()+50),Le("missile_drone",400,400)):"level-7"===e?(Le("gunner_drone",500*Math.random()+50,300),Le("gunner_drone",200,500*Math.random()+50),Le("gunner_drone",300*Math.random()+300,500*Math.random()+50),Le("missile_drone",500*Math.random()+50,500*Math.random()+50),Le("attack_drone",320,200*Math.random()+220)):"level-8"===e?(Le("gunner_drone",500*Math.random()+50,300),Le("gunner_drone",500,500*Math.random()+50),Le("gunner_drone",500*Math.random()+50,500),Le("missile_drone",500*Math.random()+50,500*Math.random()+50),Le("missile_drone",100,500*Math.random()+50),Le("attack_drone",250,200*Math.random()+20),Le("attack_drone",450,200*Math.random()+420)):"level-9"===e&&(Le("gunner_drone",100,100),Le("gunner_drone",500*Math.random()+50,320),Le("gunner_drone",500*Math.random()+50,500*Math.random()+50),Le("missile_drone",200*Math.random()+50,200*Math.random()+50),Le("missile_drone",300*Math.random()+250,300*Math.random()+250),Le("attack_drone",150,200*Math.random()+220),Le("attack_drone",350,200*Math.random()+220),Le("attack_drone",450,150))})(n),"level-1"===n?(e(t,Ie(0,200,300,150)),e(t,Ie(200,350,440,150))):"level-2"===n?(e(t,Ie(400,200,240,100)),e(t,Ie(300,200,100,300)),e(t,Ie(100,500,300,50)),e(t,Ie(0,550,150,50))):"level-3"===n?(e(t,Ie(140,550,500,50)),e(t,Ie(140,320,50,230)),e(t,Ie(140,270,320,50)),e(t,Ie(410,220,50,50)),e(t,Ie(0,170,460,50))):"level-4"===n?(e(t,Ie(360,170,280,100)),e(t,Ie(220,270,200,50)),e(t,Ie(100,320,170,50)),e(t,Ie(0,370,160,50))):"level-5"===n?(e(t,Ie(480,370,160,50)),e(t,Ie(430,230,50,360)),e(t,Ie(317,180,233,50)),e(t,Ie(550,78,50,152)),e(t,Ie(100,478,50,112)),e(t,Ie(267,275,50,203)),e(t,Ie(188,78,50,111)),e(t,Ie(138,134,50,141)),e(t,Ie(100,28,500,50)),e(t,Ie(100,590,380,50)),e(t,Ie(100,428,167,50)),e(t,Ie(0,275,267,50))):"level-6"===n&&(e(t,Ie(373,275,267,50)),e(t,Ie(373,325,50,315))),"level-10"!==n&&e(t,De()),e(N,t)})(`level-${Q}`),V.includes(Q)?Ce("dark-shader"):Ce("light-shader"),Pe=!(Q<=6)};t.p;let Sn=0;const Pn=()=>{Sn+=1,Ln(),Se.map((e=>{!0===Pe&&((e=>{if(null!==Ze&&f(Ze,e.ele)&&Fe(e),0===e.firetimer){e.firetimer=e.fireevery;const n=e.x+32,t=e.y+32;"gunner_drone"===e.type&&(Ne(n,t),setTimeout((()=>{Ne(n,t)}),200),setTimeout((()=>{Ne(n,t)}),400),setTimeout((()=>{e.moving=!0}),1e3)),"missile_drone"===e.type&&(Ge("missile",n,t,180),setTimeout((()=>{e.moving=!0}),1e3)),"attack_drone"===e.type&&x(e.ele,F)&&Ve(Xe-1)}else e.firetimer=e.firetimer-1})(e),(e=>{Ee||(!0===e.moving&&(0===e.moveTimer?(e.moveTimer=10,e.moving=!1,e.rot=360*Math.random()):(e.moveTimer=e.moveTimer-1,je(e,e.rot))),"attack_drone"===e.type&&je(e,Je(e.x,e.y,F)+180))})(e),(e=>{null!==Ue&&f(e.ele,Ue.ele)&&(Ge("hit",Ue.x,Ue.y,90*Math.floor(4*Math.random())),Ke(Ue),Ue=null,e.hp=e.hp-1,0===e.hp&&(Ge("explosion",e.x+16,e.y+16,90*Math.floor(4*Math.random())),Fe(e))),"attack_drone"===e.type&&null!==on[3]&&f(e.ele,on[3].ele)&&(Ge("explosion",on[3].x+16,on[3].y+16,90*Math.floor(4*Math.random())),cn(3))})(e)),un(e,"increment","none")})),V.includes(Q)&&(e=>{let n,t;if("random"===e){let e=Math.floor(4*Math.random());n=ne[e]}else n=e;"down"===n?(dn(0,on[0].x,640,!0),t=0):"right"===n?(dn(0,640,on[0].y,!0),t=270):"up"===n?(dn(0,on[0].x,0,!0),t=180):"left"===n&&(dn(0,0,on[0].y,!0),t=90);const o=Math.floor(22*Math.random());if(21===o&&Ge("wind",640*Math.random(),640*Math.random(),t),(8===Q||9===Q||10===Q)&&(Math.floor(300*Math.random()),21===o)){const e=64*Math.floor(10*Math.random())+24,n=64*Math.floor(10*Math.random())+24;Ge("lightning_warning",e,n,0)}})(ne[V.indexOf(Q)]),We.map((e=>{if(["bullet","wind","good_missile"].includes(e.type))qe(e);else if("missile"===e.type){let n;if(!Ee){x(L,e.ele),n=Je(e.x,e.y,F);let t=((e,n)=>{let t=n-e;return t<=-180&&(t+=360),t>180&&(t-=360),t>0?-1:t<0?1:0})(e.rot,n);1===t?e.rot=e.rot+3:-1===t&&(e.rot=e.rot-3),e.rot>180&&(e.rot=e.rot-360),e.ele.style.transform=`rotate(${e.rot}deg)`}He.map((n=>{f(e.ele,n)&&Ke(e)})),qe(e)}if((e=>{if(0===e.fadein){if("lightning_warning"===e.type)if(x(e.ele,W))if(null===on[2]){const e=b(W,200);let n=Math.floor((e.y-64)/64);for(let t=0;t<n+1;t++)Ge("lightning_bolt",e.x,e.y-64(64*t),0)}else{const e=b(on[2].ele,64);let n=Math.floor((e.y-64)/64);for(let t=0;t<n+1;t++)Ge("lightning_bolt",e.x,e.y-64-64*t,0)}else{Ge("lightning_strike",e.x,e.y,90*Math.floor(4*Math.random()));let n=(e.y-24)/64;for(let t=0;t<n+1;t++)Ge("lightning_bolt",e.x,e.y-64*t,0)}"good_explosion"===e.type&&(Ze=null),Ke(e)}else"none"!==e.fadein?(e.fadein=e.fadein-1,"lightning_warning"===e.type&&(e.fadein%4==0||e.fadein%4==1?e.ele.style.background=`url(${Ae}) -176px 0`:e.ele.style.background=`url(${Ae}) -160px 0`)):"good_missile"===e.type?e.y>=e.final_y&&(Ge("good_explosion",e.x,e.y,90*Math.floor(4*Math.random())),Ke(e)):"force_field"===e.type&&(null===on[3]&&(Ke(e),He=[]),e.ele.style.background=Sn%8<4?`url(${Ae}) -208px 0`:`url(${Ae}) -192px 0`)})(e),!0===Pe){if("bullet"===e.type){if(f(e.ele,F)){Ve(Xe-1);let n=0,t=0;45===e.rot?(n=16,t=-16):135===e.rot?(n=16,t=16):225===e.rot?(n=-16,t=16):315===e.rot&&(n=-16,t=-16);let o=b(F,64);Ge("hit",o.x+n,o.y+t,360*Math.random()),Ke(e)}He.map((n=>{f(e.ele,n)&&Ke(e)}))}if("lightning_strike"===e.type&&f(e.ele,F)&&(Ve(Xe-3),Ke(e)),"missile"===e.type){if(f(e.ele,F)){Ve(Xe-4);let n=b(F,64);Ge("explosion",n.x,n.y,360*Math.random()),Ke(e)}if(null!==on[1])if(f(e.ele,on[1].ele)){let t=b(L,64);Ge("explosion",t.x+64,t.y+64,360*Math.random()),Ke(e),cn(1),null!==L&&n(j,L)}else null!==Ue&&f(Ue.ele,e.ele)&&Ke(e)}}}));for(let e=0;e<4;e++)null!==on[e]&&un(on[e],"increment","none");10===Q&&(wn(),null===fn&&null===xn&&(fn=bn[Math.floor(Math.random()*bn.length)],"fire"===fn?Mn(1):"missile"===fn?Cn(1):"drones"===fn?Bn(1):"charge"===fn?Dn(1):"evade"===fn?$n(1):"lightning"===fn&&Tn(1),console.log(fn)))},Ln=()=>{if(x(L,F)&&(e=>{const n=b(L,200);dn(0,n.x,n.y,!1)})(),Q>0&&Q<=6){const e=l(".pathblock");let t=!1;e.forEach((e=>{f(e,F)&&(t=!0)})),!1===t&&(e.forEach((e=>{n(s(".level.shader"),e)})),Pe=!0)}if(x(s(".endblock"),F)){if(0===Q)g(F,600,420,64),on[0].x=570,on[0].y=420;else{const e=b(F,64);on[0].y=Q<=5?ee[Q+1]:e.y,on[0].x=570,g(F,on[0].x,on[0].y,64)}Rn()}},jn=1e3/30;let Fn=window.performance.now();const Nn=(e,n,t)=>{const a=o("canvas");r(a,["game-canvas",`layer-${t}`]),h(a,["width","height"],[`${e}px`,`${n}px`]),p(a,"\n        position:absolute;\n    ");const s=a.getContext("2d");return(e=>{c(e,"click",(n=>{e.getContext("2d");const t=function(e,n){const t=e.getBoundingClientRect();return{x:n.clientX-t.left,y:n.clientY-t.top}}(e,n);i(e,"layer-1")&&Me(0,t)}))})(a),0===t&&((e,n,t)=>{U=Y(),U[2][1]=11,U[9][9]=18,U[9][8]=18,U[8][8]=19,U[8][9]=19,console.log(U),((e,n,t)=>{H(U,e)})(e)})(s),a};let On=-1;const Wn=e=>{"slider1"===e.target.id?s(".layer-1").style.left=`${e.target.value}px`:"slider2"===e.target.id&&(s(".button-overlay").style.left=`${e.target.value}px`)},Zn=o("div");r(Zn,["game"]),e(document.body,Zn),p(Zn,"\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n    position:relative;\n    width:100%;\n    left: -100px;\n"),e(Zn,(()=>{p(document.body,`\n        background-color: #242424;\n        background-image: url("${S}");\n        background-size: 70px;\n        background-repeat: repeat;\n        padding: 20px;\n    `);const n=(()=>{const n=o("div");return r(n,["wrapper"]),p(n,"\n        position:relative;\n        border: 5px solid darkred;\n        width:640px;\n        height:640px;\n    "),e(document.body,n),j=n,n})(),t=Nn(640,640,0),i=Nn(640,640,1);e(n,t),e(n,i),(e=>{an(e,"package_drone",32,q,500,300,5,!0,8)})(n),(n=>{const t=o("div");r(t,["shadwrap"]),p(t,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n        pointer-events:none;\n        z-index:4;\n    "),e(n,t),e(t,De()),N=t,(n=>{let t=o("div");r(t,["edge","left"]),p(t,"\n            left: -15px;\n            top: -10px;\n            height: 660px;\n            width: 10px;\n            position:absolute;\n    "),e(n,t),t=o("div"),r(t,["edge","top"]),p(t,"\n            left: -10px;\n            top: -15px;\n            height: 10px;\n            width: 660px;\n            position:absolute;\n    "),e(n,t),t=o("div"),r(t,["edge","bottom"]),p(t,"\n            left: 0px;\n            top: 635px;\n            height: 10px;\n            width: 660px;\n            position:absolute;\n    "),e(n,t),t=o("div"),r(t,["edge","right"]),p(t,"\n            left: 635px;\n            top: 0px;\n            height: 660px;\n            width: 10px;\n            position:absolute;\n    "),e(n,t)})(n)})(n),console.log("commencing"),function(e,n,t){const o=()=>{window.requestAnimationFrame(o);const e=window.performance.now(),n=e-Fn;n<jn||(Fn=e-n%jn,Pn())};o()}();const a=(En=o("div"),r(En,["button-overlay"]),p(En,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(n=>{e(n,zn("changebg",8,Rn,16,16))})(En),En);return e(n,a),n})()),e(Zn,(()=>{const n=(()=>{const n=o("div");return r(n,["mini-wrapper"]),p(n,"\n        position:relative;\n        background-color: #000000;\n        border: 5px solid darkred;\n        width: 640px;\n        display:flex;\n        justify-content: space-around;\n        height:64px;\n        align-items:center;\n        margin-top: 10px;\n    "),e(document.body,n),n})();return t=n,te.map((n=>e(t,(e=>{const n=new Image;n.src=re;const t=new Re(e,n,re,$e.length),o=t.init();return $e.push(t),o})(n)))),ge(),(()=>{const n=o("div");r(n,["infoScreen"]),p(n,"\n        width: 250px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkred;\n        position: absolute;\n        left: 650px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n    "),e(n,(()=>{const e=o("div");return r(e,["infoTop"]),p(e,"\n        padding: 5px;\n        position:relative;\n    "),e})()),e(n,(()=>{const e=o("div");return r(e,["infoBottom"]),e})()),e(j,(()=>{const n=o("div");r(n,["healthbar"]),p(n,"\n        width: 32px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkred;\n        position: absolute;\n        left: -52px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n        display:flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    "),Ve(n);const t=o("div");return p(t,`\n        position:absolute;\n        width: 16px;\n        height: 16px;\n        background: url(${re}) -128px 0px;\n        scale: 300%;\n        image-rendering: pixelated;\n        left: 8px;\n        z-index: 5;\n        transform: translate(0, 3px);\n    `),e(n,t),n})()),e(j,n)})(),(n=>{const t=o("div");r(t,["cutscene"]),t.style.visibility=fe?"visible":"hidden",p(t,`\n        height:320px;\n        width: 320px;\n        scale: 2;\n        position:absolute;\n        top: 160px;\n        left: 160px;\n        background: url(${me}) -${320*xe}px 0px;\n        image-rendering: pixelated;\n        z-index: 6;\n    `),e(n,t);const i=o("div");r(i,["start-but","button"]),p(i,"\n        width: 100px;\n        height:50px;\n        position:absolute;\n        left: 270px;\n        top: 450px;\n        background-color: darkred;\n        color: white;\n        font-family: munro;\n        font-size: 30px;\n        padding:5px;\n        padding-bottom: 0px;\n        text-align: center;\n        vertical-align: center;\n        z-index: 7;\n    "),d(i,"Start"),c(i,"click",ve),e(n,i)})(j),n;var t})()),e(Zn,(()=>{const n=(()=>{const n=o("div");r(n,["debug-wrapper"]),p(n,"\n        position:relative;\n    ");const t=o("input");t.id="slider1",c(t,"input",Wn),h(t,["type","min","max","value","class"],["range","0","640","0","slidey"]),e(n,t);const i=o("input");i.id="slider2",c(i,"input",Wn),h(i,["type","min","max","value","class"],["range","0","640","0","slidey"]),e(n,i);const a=o("h1");a.id="score",p(a,"\n        color:white;\n        font-family: munro;\n    ");const l=o("h1");return l.id="level",p(l,"\n        color:white;\n        font-family:munro;\n    "),d(l,"Level: 0"),((e="bruh")=>{On+=1,d("bruh"===e?s("#score"):e,`Score: ${On}`)})(a),e(n,a),e(n,l),n})();return e(document.body,n),n})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,