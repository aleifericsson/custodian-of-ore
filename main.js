(()=>{"use strict";var n={320:(n,e,t)=>{t.d(e,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([n.id,".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}","",{version:3,sources:["webpack://./src/css/animations.css"],names:[],mappings:"AAAA;IACI,gCAAgC;AACpC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,+BAA+B;AACnC;;AAEA;IACI,KAAK,uBAAuB,EAAE;IAC9B,MAAM,uBAAuB,EAAE;IAC/B,MAAM,sBAAsB,EAAE;IAC9B,MAAM,wBAAwB,EAAE;IAChC,OAAO,uBAAuB,EAAE;AACpC;;AAEA;IACI,gCAAgC;CACnC,6BAA6B;CAC7B,2BAA2B;CAC3B,4BAA4B;CAC5B,wBAAwB;AACzB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,+BAA+B;CAClC,4BAA4B;CAC5B,0BAA0B;CAC1B,2BAA2B;CAC3B,uBAAuB;AACxB;;AAEA;IACI,mCAAmC;IACnC,gCAAgC;IAChC,8BAA8B;IAC9B,+BAA+B;IAC/B,2BAA2B;AAC/B",sourcesContent:[".start-state{\n    transform: translate(0, -2000px);\n}\n\n.end-state{\n    transform: scale(0);\n}\n\n.dialogue-start-end{\n    transform: translate(0, 1000px);\n}\n\n.vibrate {\n    animation: tilt-shaking 0.25s 5;\n}  \n\n@keyframes tilt-shaking {\n    0% { transform: rotate(0deg); }\n    25% { transform: rotate(5deg); }\n    50% { transform: rotate(0eg); }\n    75% { transform: rotate(-5deg); }\n    100% { transform: rotate(0deg); }\n}\n\n.button .canvas-icon{\n    -webkit-filter: brightness(100%);\n\t-moz-filter: brightness(100%);\n\t-o-filter: brightness(100%);\n\t-ms-filter: brightness(100%);\n\tfilter: brightness(100%);\n}\n\n.button:hover, .canvas-icon:hover, .dialogue:hover, .bar:hover, .selected{\n    -webkit-filter: brightness(80%);\n\t-moz-filter: brightness(80%);\n\t-o-filter: brightness(80%);\n\t-ms-filter: brightness(80%);\n\tfilter: brightness(80%);\n}\n\n.button:active, .canvas-icon:active{\n    -webkit-filter: brightness(60%);\n\t-moz-filter: brightness(60%);\n\t-o-filter: brightness(60%);\n\t-ms-filter: brightness(60%);\n\tfilter: brightness(60%);\n}\n\n.notransition {\n    -webkit-transition: none !important;\n    -moz-transition: none !important;\n    -o-transition: none !important;\n    -ms-transition: none !important;\n    transition: none !important;\n}"],sourceRoot:""}]);const s=i},414:(n,e,t)=>{t.d(e,{Z:()=>p});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),s=t(667),l=t.n(s),d=new URL(t(542),t.b),c=i()(r()),u=l()(d);c.push([n.id,`html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(${u}) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */`,"",{version:3,sources:["webpack://./src/css/fonts.css"],names:[],mappings:"AAAA;EACE,kBAAkB;AACpB;;AAEA;IACI,oBAAoB;IACpB,+DAA+C;EACjD;;EAEA;;;;;;;;;;GAUC",sourcesContent:["html {\n  overflow-y: scroll;\n}\n\n@font-face {\n    font-family: 'munro';\n    src: url(../fonts/munro.ttf) format('truetype');\n  }\n\n  /*\n  @font-face {\n    font-family: 'munro-narrow';\n    src: url(../fonts/munro-narrow.ttf) format('truetype');\n  }\n  \n  @font-face {\n    font-family: 'munro-small';\n    src: url(../fonts/munro-small.ttf) format('truetype');\n  }\n  */"],sourceRoot:""}]);const p=c},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var d=0;d<n.length;d++){var c=[].concat(n[d]);o&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],s=0;s<n.length;s++){var l=n[s],d=o.base?l[0]+o.base:l[0],c=a[d]||0,u="".concat(d," ").concat(c);a[d]=c+1;var p=t(u),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(m);else{var h=r(m,o);o.byIndex=s,e.splice(s,0,{identifier:u,updater:h,references:1})}i.push(u)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var l=o(n,r),d=0;d<a.length;d++){var c=t(a[d]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}a=l}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},542:(n,e,t)=>{n.exports=t.p+"f78662ff4aad4d038806.ttf"}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var o=e.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!n;)n=o[r--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{const n=(n,e)=>{n.appendChild(e)},e=(n,e)=>{e.parentNode===n&&n.removeChild(e)},o=n=>document.createElement(n),r=(n,e)=>{e.forEach((e=>{n.classList.add(e)}))},a=(n,e)=>n.classList.contains(e),i=(n,e)=>{e.forEach((e=>{n.classList.remove(e)}))},s=n=>document.querySelector(n),l=n=>document.querySelectorAll(n),d=(n,e)=>{n.textContent=e},c=(n,e,t)=>{n.addEventListener(e,t)},u=(n,e,t)=>{n.removeEventListener(e,t)},p=(n,e)=>{n.style.cssText=e},m=(n,e,t)=>{e.map(((e,o)=>{n.setAttribute(e,t[o])}))},h=(n,e,t,o)=>{n.style.top=t-o/2+"px",n.style.left=e-o/2+"px"},g=(n,e)=>{const t=e.getBoundingClientRect();return{x:n.clientX-t.left,y:n.clientY-t.top}},f=(n,e)=>{if(null===n||null===e)return!1;const t=n.getBoundingClientRect(),o=e.getBoundingClientRect();return!(t.right<o.left||t.left>o.right||t.bottom<o.top||t.top>o.bottom)},b=(n,e)=>{const t=n.style.left,o=n.style.top;return{x:Number(t.substring(0,t.length-2))+e/2,y:Number(o.substring(0,o.length-2))+e/2}};var y=t(379),A=t.n(y),v=t(795),x=t.n(v),w=t(569),C=t.n(w),k=t(565),_=t.n(k),B=t(216),I=t.n(B),M=t(589),E=t.n(M),D=t(320),$={};$.styleTagTransform=E(),$.setAttributes=_(),$.insert=C().bind(null,"head"),$.domAPI=x(),$.insertStyleElement=I(),A()(D.Z,$),D.Z&&D.Z.locals&&D.Z.locals;var S=t(414),z={};z.styleTagTransform=E(),z.setAttributes=_(),z.insert=C().bind(null,"head"),z.domAPI=x(),z.insertStyleElement=I(),A()(S.Z,z),S.Z&&S.Z.locals&&S.Z.locals;const T=t.p+"2303bf42784ad28af8cb.gif",P=t.p+"82e9ac88b221b8bd6b76.png",R=(t.p,t.p+"46f9a3232743a28fe55c.mp3"),j=t.p+"f6a9d30b202864f403ab.mp3",L=t.p+"4b0a7fa0436041018c59.mp3",N=t.p+"2313cadcd41e0912116a.mp3",O=t.p+"db5db37355927833123f.mp3",F=t.p+"9a548da064d95ad7ec01.mp3";let W=[];const Z=(n,e)=>{var t=new Audio(n);W.push({audio:t,name:e})},U=n=>{W.find((e=>e.name===n)).audio.play()};let H=null,Y=null,q=null,G=null;const J=t.p+"89cc97a32f3bdd1a1f7c.png";let K;const X=(n,e,t)=>{Q(K,n)},Q=(n,e)=>{n.forEach(((n,t)=>{n.forEach(((n,o)=>{V(n,t,o,e)}))}))},V=(n,e,t,o)=>{const r=64;let a=new Image;a.src=J,a.onload=function(){o.drawImage(a,n*r,0,r,r,e*r,t*r,r,r)}},nn=t.p+"c488352b32cb2834c60f.png",en=t.p+"dc3293068f5630490558.png",tn=t.p+"6c039a05fb3f3dab314c.png",on=t.p+"e2b44efb30368e5df2a8.png";let rn=[];const an=(n,e,t)=>{let o,a;"gunner_drone"===n&&(o=en,a=200),"missile_drone"===n&&(o=tn,a=400),"attack_drone"===n&&(o=on,a=500);let i=Math.floor(Math.random()*a);const s=yn(Y,n,32,o,e,t,5,!0,1);r(s,["enemy"]),rn.push({ele:s,type:n,firing:!1,x:e,y:t,fireevery:a,timer:i,timeout:null})};let sn=0;const ln=[4,5,8,9,10];let dn=[350,450,250,560,200,350,270];const cn=["down","left","up","right","random"],un=["Magnet_Drone","Gunner_Drone","Lightning_Rod_Drone","Air_Strike","Machine_Gun","Drone_Control_Hack","Drone_GPS_Hack","Recall_Drones","Repair_Package_Drone"],pn=["\nAttracts metal towards it\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Cooldown: none\n","\nShoots things in a small radius\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Ammo: 10 bullets\n- Damage: low\n- Cooldown: 20 seconds\n","\nAbsorbs lightning in a small radius\n\n- Placeable & draggable\n- Only one on the field at a time\n\n- Shatters after 3 lightning strikes\n- Cooldown: 20 seconds\n","\nCall a missile to any point on the field\n\n- Ammo: 1 missile\n- Damage: high\n- Cooldown: 10 seconds\n","\nFires shots at any point on the field,\nmachine overheats after 20 shots\n\n- Ammo: 20 bullets\n- Firerate: 4 bullets per second\n- Cooldown: 20 seconds\n","\nMakes drones moveable temporarily,\ndrag onto desired drone and\ndrag affected drone to move it\n\n- Duration: 10 seconds\n- Cooldown: 30 seconds\n","\nLocks a drone's position temporarily,\ndrag onto desired drone\n\n- Duration: 10 seconds\n- Cooldown: 30 seconds\n","\nRemove all placed drones from field.\n\n- Cooldown: none\n","\nWhen near package drone, restores\n2 health per 5 seconds.\n\n- Cooldown: 30 seconds\n","\nHas Dio's special package,\nget it to his house somewhere west.\n","\nShoots low damage burst shots\nin 4 diagonal directions.\n","\nFires heat-seeking missiles\nor torpedoes,  tboth are high damage.\n","\nWill try to ram into you and cut you\nwith its saws. Longer contact means\nmore damage.\n","\nThe boss. Can spawn all drones\nand even summon lightning somehow.\n"],mn=t.p+"89d1863fe0155e15b8ec.png";let hn=20;const gn=e=>{let t,r;null===s(".healthbar")?(t=hn,r=e):"number"==typeof e&&(t=e,hn=t,r=s(".healthbar"),r.textContent="");for(let e=0;e<t;e++){const t=20-e,a=350,i=470,s=Math.floor(t/20*(i-a)+a),l=o("div");l.id=`heart-${t}`,p(l,`\n            height:28px;\n            width: 28px;\n            margin: 2px;\n            background-color: hsl(${s}, 70%, 62%);\n        `),n(r,l)}},fn=(e,t)=>{const a=t.cloneNode(!1);a.id="infoPic",i(a,["canvas-icon"]),m(a,["width","height"],["64px","64px"]),p(a,"\n        padding-left: 5px;\n        padding-top: 10px;\n    ");const l=a.getContext("2d");l.imageSmoothingEnabled=!1;const c=new Image;c.src=a.dataset.imgsrc;let u=a.dataset.index;["package_drone","gunner_drone","missile_drone","attack_drone","boss_drone"].includes(e)?c.onload=function(){l.clearRect(0,0,64,64),l.drawImage(c,0,0,32,32,0,0,64,64)}:c.onload=function(){l.clearRect(0,0,64,64),l.drawImage(c,16*u,0,16,16,0,0,64,64)},"package_drone"===e&&(u=9),"gunner_drone"===e&&(u=10),"missile_drone"===e&&(u=11),"attack_drone"===e&&(u=12),"boss_drone"===e&&(u=13);const h=s(".infoTop");h.textContent="";const g=o("div");r(g,["infoTitle"]);let f=e.replace("_"," ");f=f.replace("_"," "),d(g,f),p(g,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n        text-transform: capitalize;\n    ");const b=o("div");r(b,["infoText"]),p(b,"\n        padding-left: 5px;\n        color:white;\n        font-family: 'munro';\n        font-size: 15px;\n        white-space: pre;\n    "),d(b,pn[u]),n(h,g),n(h,a),n(h,b)};let bn=[];const yn=(e,t,a,i,s,l,d,u,h)=>{const g=o("canvas");let f;r(g,["spritecanvas",t]),m(g,["id","width","height"],[t,"64px","64px"]),"none"===i?f="none":(f=new Image,f.src=i),p(g,`\n        position:absolute;\n        top: ${l}px;\n        left: ${s}px;\n    `);let b={name:t,size:a,ele:g,x:s,y:l,direction:"left",img:f,speed:d,direction_data:{none:0},draw_index:0,frame:0,show:u,frames:h,updates_per_frames:2,timer:1};if(bn.push(b),u){const t=g.getContext("2d");t.imageSmoothingEnabled=!1,f.onload=function(){t.clearRect(0,0,64,64),t.drawImage(f,0,0*a,a,a,0,0,64,64)},n(e,g),c(g,"mouseenter",An)}return"package_drone"===t&&(q=g),g.dataset.imgsrc=i,g},An=n=>{fn(n.target.id,n.target)},vn=(n,e,t,o)=>{const r=bn[n],a=o?2:r.speed,i=e-r.size/2,s=t-r.size/2,l=i-r.x,d=s-r.y,c=Math.sqrt(l*l+d*d),u=l/c*a,p=d/c*a,m=r.x+u-r.size/2,h=r.y+p-r.size/2,g=(bn[n].size,((n,e)=>{if(n>0&&e>0&&n<=640&&e<=640){const t=Math.floor(n/64),o=Math.floor(e/64);K[t][o]}})(m,h),m>640-r.size/2||m<0-r.size/2||h>640-r.size/2||h<0-r.size/2);if(c>r.speed&&!g){bn[n].x=m+r.size/2,bn[n].y=h+r.size/2,xn(n,m,h);let e=Math.atan(-p/u);u<0&&(-p<0?e-=Math.PI:e+=Math.PI),e*=180/Math.PI;let t="left";e>=22.5&&e<=67.5?t="upright":e>=67.5&&e<=112.5?t="up":e>=112.5&&e<=157.5?t="upleft":e<=22.5&&e>=-22.5?t="right":e<=-22.5&&e>=-67.5?t="downright":e<=-67.5&&e>=-112.5?t="down":e<=-112.5&&e>=-157.5?t="downleft":e>=157.5&&e<=-157.5&&(t="left")}},xn=(n,e,t)=>{p(bn[n].ele,`\n        position:absolute;\n        pointer-events:none;\n        top: ${t}px;\n        left: ${e}px;\n    `)},wn=t.p+"39e6521c1a1cd6dea9e1.png";let Cn=[];const kn=(e,t,a,i)=>{const s=o("div");let l,d,c,u;"wind"===e&&(l=9,d=200,c=2,u=2),r(s,["effect",e]),p(s,`\n        scale: ${u};\n        top: ${a}px;\n        left: ${t}px;\n        height: 16px;\n        width: 16px;\n        background: url(${wn}) -${16*l}px 0;\n        position:absolute;\n        image-rendering: pixelated;\n        transform: rotate(${i}deg);\n    `),Cn.push({type:e,x:t,y:a,speed:c,fadein:d,rot:i,ele:s}),n(G,s)},_n=e=>{const t=o("div");let a;r(t,["shader"]),t.id=e,"light-shader"===e?a="\n            background-image: linear-gradient(135deg, rgba(227, 245, 66, 0.3), rgba(230, 201, 147, 0.1));\n        ":"dark-shader"===e&&(a="\n            background-image: linear-gradient(135deg, rgba(54, 88, 163, 0.3), rgba(90, 76, 115, 0.6));\n        "),p(t,`\n        height:640px;\n        width: 640px;\n        position: absolute;\n        z-index: 5;\n        ${a}\n    `),n(G,t)},Bn=t=>{const a=o("div");r(a,["level","shader"]),a.id=t,p(a,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n    "),Cn=[],l(".effect").forEach((n=>{e(G,n)})),(n=>{rn=[],l(".enemy").forEach((n=>{e(Y,n)})),"level-1"===n?(an("gunner_drone",70,450),an("gunner_drone",100,50)):"level-2"===n?(an("gunner_drone",150,450),an("gunner_drone",100,100)):"level-3"===n?(an("gunner_drone",50,50),an("gunner_drone",70,400),an("gunner_drone",300,400)):"level-4"===n?(an("gunner_drone",50,50),an("gunner_drone",200,500),an("missile_drone",400,400),an("gunner_drone",200,200)):"level-5"===n?(an("gunner_drone",150,500),an("gunner_drone",200,350),an("gunner_drone",300,500),an("missile_drone",70,70),an("gunner_drone",500,550)):"level-6"===n?(an("gunner_drone",500*Math.random()+50,500*Math.random()+50),an("gunner_drone",50,300),an("gunner_drone",100,500*Math.random()+50),an("missile_drone",400,400),an("missile_drone",500*Math.random()+50,500*Math.random()+50)):"level-7"===n?(an("gunner_drone",500*Math.random()+50,300),an("gunner_drone",200,500*Math.random()+50),an("gunner_drone",300*Math.random()+300,500*Math.random()+50),an("missile_drone",400,500*Math.random()+50),an("missile_drone",500*Math.random()+50,500*Math.random()+50),an("attack_drone",320,200*Math.random()+220)):"level-8"===n?(an("gunner_drone",500*Math.random()+50,300),an("gunner_drone",500,500*Math.random()+50),an("gunner_drone",500*Math.random()+50,500),an("gunner_drone",500*Math.random()+50,500*Math.random()+50),an("missile_drone",100,500*Math.random()+50),an("missile_drone",500*Math.random()+50,500*Math.random()+50),an("attack_drone",250,200*Math.random()+20),an("attack_drone",450,200*Math.random()+420)):"level-9"===n&&(an("gunner_drone",100,100),an("gunner_drone",500*Math.random()+50,320),an("gunner_drone",500*Math.random()+50,500*Math.random()+50),an("missile_drone",500*Math.random()+50,550),an("missile_drone",500*Math.random()+50,150),an("missile_drone",200*Math.random()+50,200*Math.random()+50),an("missile_drone",300*Math.random()+250,300*Math.random()+250),an("attack_drone",150,200*Math.random()+220),an("attack_drone",350,200*Math.random()+220),an("attack_drone",450,150))})(t),"level-1"===t?(n(a,In(0,200,300,150)),n(a,In(200,350,440,150))):"level-2"===t?(n(a,In(400,200,240,100)),n(a,In(300,200,100,300)),n(a,In(100,500,300,50)),n(a,In(0,550,150,50))):"level-3"===t?(n(a,In(140,550,500,50)),n(a,In(140,320,50,230)),n(a,In(140,270,320,50)),n(a,In(410,220,50,50)),n(a,In(0,170,460,50))):"level-4"===t?(n(a,In(360,170,280,100)),n(a,In(220,270,200,50)),n(a,In(100,320,170,50)),n(a,In(0,370,160,50)),kn("wind",20,100,0)):"level-5"===t?(n(a,In(480,370,160,50)),n(a,In(430,230,50,360)),n(a,In(317,180,233,50)),n(a,In(550,78,50,152)),n(a,In(100,478,50,112)),n(a,In(267,275,50,203)),n(a,In(188,78,50,111)),n(a,In(138,134,50,141)),n(a,In(100,28,500,50)),n(a,In(100,590,380,50)),n(a,In(100,428,167,50)),n(a,In(0,275,267,50)),kn("wind",20,100,90)):"level-6"===t&&(n(a,In(373,275,267,50)),n(a,In(373,325,50,315))),"level-10"!==t&&n(a,Mn(":)")),n(G,a)},In=(n,e,t,a)=>{const i=o("div");return r(i,["pathblock"]),p(i,`\n        background-color: rgba(245, 66, 66, 0.3);\n        left: ${n}px;\n        top: ${e}px;\n        height: ${a}px;\n        width: ${t}px;\n        position:absolute;\n    `),i},Mn=n=>{const e=o("div");return r(e,["endblock"]),p(e,"\n            background-color: rgba(34, 117, 59, 0.6);\n            left: 0px;\n            top: 0px;\n            height: 640px;\n            width: 10px;\n            position:absolute;\n        "),e};let En;const Dn=(n,e,t,a,i)=>{const s=o("div");return r(s,["button",n]),s.id=n,p(s,`\n            position: absolute;\n            left:${a}px;\n            top: ${i}px;\n            width: 32px;\n            height: 32px;\n            background: url(${P}) -${32*e}px 0;\n        `),c(s,"click",t),s},$n=()=>{l(".shader").forEach((n=>{e(G,n)})),sn+=1,d(s("#level"),`Level: ${sn}`),Bn(`level-${sn}`),ln.includes(sn)?_n("dark-shader"):_n("light-shader"),10===sn&&(sn=0)},Sn=[["D: My package has been suspiciously failed to be delivered twice in a row now!","D: I'm not even getting refunds for this!!","D: I guess when you want something done you have to do it yourself."],["P: Package drone status: Ready to deliver ref#7355608","P: Package drone status: Aberration detected - access from unautorised party","P: Package drone status: Limited remote control mode activated. Freedom of movement restricted at this admin level","D: Damn, I'm in but I cant' move. Guess I'll need my magnet drones to move the package.","D: At least I haven't triggered security... yet."],["P: Package drone status: Warning. Security drones in area. Deviation from designated path may result in aggression.","D: These will do nothing against what I have in my arsenal."],["P: Package drone status: Warning. Heavy wind detected, recalculation of trajectory detected to remain on path.","D: Might be wise to control the drone's rotors directly with my control hack, even if it is temporary."],["D: What?! The path doesn't even go to my house! Someone's already in the system and stealing packages. No wonder I never got mine.","D: No time to get distracted tho, the sooner I get my package, the sooner I can forget about this scummy company."],["S: Security drone status: Aberration detected in rogue package drone. Requesting immediate backup to eliminate the issue","D: Finally: A reason to go all out"],["D: Hey, that's my house! I'm so close!","d: !!..","A: You have laid waste to my brethren and humiliated me!","A: Why do you persist in protecting a nonsentient piece of scrap metal?","d: I'm just rightfully getting something I paid for. Now get out my way before you end up like the rest of your trash!","A: Such determination you hold for something your life is not dependent on!","A: Unlike you, I will get REPLACED if I fail to elimiate any aberrations, and now your on the top of my list!","d: About time you get an update! Your buggy programming can't detect a real threat to your crumbling company if you ever saw one.","d: There are thieves in your system and you go after a guy who's protecting his legal property?! I think it's time for YOU to pay."],["A: Well, you have defeated me. I failed the one job I was programmed to complete. I will no doubt be replaced soon.","A: Say something nice. It might be the last thing I hear before I'm gone forever","D: We're not too different, man. We both made sacrifices defending metal.","D: Tell me, do you have a name?","A: They refered to me as 'Security AI Beta Test v8.10.04'","D: Haha, no wonder you failed. You never made it past beta!","D: Well then, I will give you a proper name. You will be crowned as the one who guarded pieces of rock minerals.","D: The custodian of ore.","C: Befitting name. So long then, enjoy your package.","D: Finally, it is in my hands!","D: Tungsten cube!!"]];let zn=0,Tn=[];const Pn=n=>{U("swipe"),Number.isInteger(n)&&(zn=n);const e=jn(Tn[zn]);zn+=1,c(e,"click",Rn)},Rn=n=>{zn<=3&&Xn(),U("swipe");let t=n.target;a(t,"dialogue")||(t=t.parentNode,a(t,"dialogue")||(t=t.parentNode)),u(t,"click",Rn),r(t,["dialogue-start-end"]),setTimeout((()=>{e(s(".game"),t),Tn[zn-1].follow&&Pn()}),200)},jn=e=>{const t=o("div");return r(t,["dialogue","dialogue-start-end"]),m(t,["id","draggable"],[`dialogue-${e.code}`,"false"]),p(t,"\n            color:white;\n            background-color: slategray;\n            border: 5px solid darkslategray;\n            position:absolute;\n            transition: 0.1s;\n            width: 600px;\n            height: 100px;\n            left: calc(50% -200px);\n            top: 500px;\n            display:flex;\n            justify-content: flex-start;\n            align-items: center;\n            gap: 10px;\n            padding: 10px;\n            z-index: 7;\n        "),n(t,Ln(e.charactersrc)),n(t,Nn(e.text,e.charname)),n(s(".game"),t),setTimeout((()=>t.classList.remove("dialogue-start-end")),100),t},Ln=n=>{const e=o("div");return r(e,["charBox"]),p(e,`\n        border: 5px solid darkslategray;\n        min-width: 64px;\n        min-height: 64px;\n        background: url(${n}) 0 0;\n    `),e},Nn=(e,t)=>{const r=o("div"),a=o("div"),i=o("div");return p(r,"\n        position:relative;\n        top: -10px;\n    "),p(a,"\n        color:white;\n        font-family: 'munro';\n        font-size: 20px;\n    "),p(i,"\n        color:white;\n        font-family: 'munro';\n        font-size: 30px;\n    "),d(a,e),d(i,t),n(r,i),n(r,a),r},On=()=>{(()=>{let n=0;Sn.map((e=>{e.map(((t,o)=>{const r=t.substring(0,1),a=t.substring(3,t.length);let i,s;s=o!==e.length-1,"D"===r||"d"===r?i="Dio":"A"===r?i="Security AI":"P"===r?i="Package Drone":"S"===r?i="Security Drone":"C"===r&&(i="Custodian of Ore"),((n,e,t,o,r)=>{Tn.push({text:n,code:t,charactersrc:o,follow:r,charname:e})})(a,i,n,void 0,s),n+=1}))}))})()},Fn=()=>{if(f(H,q)&&(n=>{const e=b(H,200);vn(0,e.x,e.y,!1)})(),sn>0&&sn<=6){const n=l(".pathblock");let t=!1;n.forEach((n=>{f(n,q)&&(t=!0)})),!1===t&&(n.forEach((n=>{e(s(".level.shader"),n)})),rn.map(((n,e)=>{rn[e].firing=!0})))}if(f(s(".endblock"),q)){if(0===sn)h(q,600,420,64),bn[0].x=600,bn[0].y=420;else{const n=b(q,64);bn[0].y=sn<=5?dn[sn+1]:n.y,bn[0].x=n.x+580,h(q,bn[0].x,bn[0].y,64)}$n()}},Wn=(n,e)=>{const t=Math.floor(e.x/64),o=Math.floor(e.y/64);let r=K[t][o];r++,20==r&&(r=0),((n,e,t)=>{K[n][e]=t})(t,o,r)},Zn=1e3/30;let Un=window.performance.now();const Hn=(n,e,t)=>{const i=o("canvas");r(i,["game-canvas",`layer-${t}`]),m(i,["width","height"],[`${n}px`,`${e}px`]),p(i,"\n        position:absolute;\n    ");const s=i.getContext("2d");return(n=>{c(n,"click",(e=>{n.getContext("2d");const t=function(n,e){const t=n.getBoundingClientRect();return{x:e.clientX-t.left,y:e.clientY-t.top}}(n,e);a(n,"layer-1")&&Wn(0,t)}))})(i),0===t&&((n,e,t)=>{K=new Array(10).fill(0).map((()=>new Array(10).fill(10))),K[2][1]=11,K[9][9]=18,K[9][8]=18,K[8][8]=19,K[8][9]=19,console.log(K),X(n)})(s),i};let Yn=-1;const qn=n=>{"slider1"===n.target.id?s(".layer-1").style.left=`${n.target.value}px`:"slider2"===n.target.id&&(s(".button-overlay").style.left=`${n.target.value}px`)};let Gn=[];function Jn(t,a,i,l){this.name=t,this.index=l,this.img=a,this.imgsrc=i,this.currentFrame=0,this.canvele,this.imgele,this.init=()=>{const n=this.index;this.addedleft=64*Gn.length,this.size;const e=this.name,t=o("canvas");r(t,["mini-canvas",`${e}`]),m(t,["width","height"],["64px","64px"]),p(t,"\n            position:absolute;\n            margin: 5 auto;\n            pointer-events:none;\n        ");const a=t.getContext("2d"),i=this.img;a.imageSmoothingEnabled=!1,i.onload=function(){a.clearRect(0,0,64,64),a.drawImage(i,16*n,0,16,16,0,0,64,64)},this.canvele=t,this.ctx=a;const s=o("canvas");r(s,["canvas-icon"]),m(s,["width","height","id"],["64px","64px",e]),p(s,"\n\n        ");const l=s.getContext("2d");return l.imageSmoothingEnabled=!1,i.onload=function(){l.clearRect(0,0,64,64),l.drawImage(i,16*n,0,16,16,0,0,64,64)},s.dataset.imgsrc=this.imgsrc,s.dataset.index=n,this.imgele=s,this.initMouse(t,s),s},this.initMouse=(r,i)=>{const l=r.getContext("2d");let d;const m=Y;let f,b=[],y=this.size,A=(this.currentFrame,this.index);const v=n=>{0===b.length&&b.push(setInterval((()=>{"Magnet_Drone"===t&&h(H,f.x,f.y,200)}),100))},x=n=>{n.preventDefault(),f=g(n,m),d=g(n,document.body),h(r,d.x,d.y,64)};c(i,"mousedown",(e=>{e.preventDefault(),r.style.top="-1000px",r.style.left="-1000px",n(document.body,r),c(document.body,"mousemove",x),c(m,"mouseenter",v),l.clearRect(0,0,64,64),l.drawImage(a,16*A,0,16,16,0,0,64,64),"Magnet_Drone"===t&&(()=>{const e=o("div");e.id="magnet_hitbox",p(e,"\n        height: 200px;\n        width: 200px;\n        top: -1000px;\n        left; -1000px;\n        position: absolute;\n        background-color:rgba(255,255,255, 0.5);\n        z-index: 5;\n    "),H=e,n(s(".wrapper"),e)})()})),c(document.body,"mouseup",(n=>{u(document.body,"mousemove",x),u(m,"mouseenter",v),b.length,clearInterval(b[0]),b=[],null!=s(`.mini-canvas.${this.name}`)&&e(document.body,r),l.clearRect(0,0,y,y),"Magnet_Drone"===t&&null!==H&&e(Y,H)})),c(i,"mouseenter",(n=>{fn(n.target.id,n.target)}))}}let Kn=0;const Xn=()=>{3===Kn&&e(Y,s(".start-screen")),0===Kn?(Kn+=1,u(s(".start-but"),"click",Xn),e(Y,s(".start-but")),Pn()):Kn+=1},Qn=o("div");r(Qn,["game"]),n(document.body,Qn),p(Qn,"\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n    position:relative;\n    width:100%;\n    left: -100px;\n"),n(Qn,(()=>{p(document.body,`\n        background-color: #242424;\n        background-image: url("${T}");\n        background-size: 70px;\n        background-repeat: repeat;\n    `);const e=(()=>{const e=o("div");return r(e,["wrapper"]),p(e,"\n        position:relative;\n        border: 5px solid darkslategray;\n        width:640px;\n        height:640px;\n    "),n(document.body,e),Y=e,e})(),t=Hn(640,640,0),a=Hn(640,640,1);n(e,t),n(e,a),(n=>{yn(n,"package_drone",32,nn,500,300,5,!0,1)})(e),(e=>{const t=o("div");r(t,["shadwrap"]),p(t,"\n        height:640px;\n        width: 640px;\n        position: absolute;\n        pointer-events:none;\n    "),n(e,t),n(t,Mn("start")),G=t})(e),console.log("commencing"),function(n,e,t){const o=()=>{window.requestAnimationFrame(o);const e=window.performance.now(),t=e-Un;t<Zn||(Un=e-t%Zn,n.map(((n,e)=>{const t=n.getContext("2d");0===e&&X(t)})),Fn(),rn.map((n=>{})),ln.includes(sn)&&(n=>{let e,t;if("random"===n){let n=Math.floor(4*Math.random());e=cn[n]}else e=n;"down"===e?(vn(0,bn[0].x,640,!0),t=0):"right"===e?(vn(0,640,bn[0].y,!0),t=270):"up"===e?(vn(0,bn[0].x,0,!0),t=180):"left"===e&&(vn(0,0,bn[0].y,!0),t=90),21===Math.floor(25*Math.random())&&kn("wind",640*Math.random(),640*Math.random(),e)})(cn[ln.indexOf(sn)]))};o()}([t,a]);const i=(En=o("div"),r(En,["button-overlay"]),p(En,"\n        min-height: 640;\n        min-width: 640;\n        position: absolute;\n    "),(e=>{n(e,Dn("changebg",8,$n,16,16))})(En),En);n(e,i);const s=o("div");r(s,["start-screen"]),p(s,"\n        height:640px;\n        width: 640px;\n        position:absolute;\n        background-color: black;\n        z-index: 6;\n    "),n(e,s);const l=o("div");return r(l,["start-but","button"]),p(l,"\n        width: 100px;\n        height:50px;\n        position:absolute;\n        left: 270px;\n        top: 450px;\n        background-color: darkslategray;\n        color: white;\n        font-family: munro;\n        font-size: 30px;\n        padding:5px;\n        padding-bottom: 0px;\n        text-align: center;\n        vertical-align: center;\n        z-index: 7;\n    "),d(l,"Start"),c(l,"click",Xn),n(e,l),e})()),n(Qn,(()=>{const e=(()=>{const e=o("div");return r(e,["mini-wrapper"]),p(e,"\n        position:relative;\n        background-color: #000000;\n        border: 5px solid darkslategray;\n        width: 640px;\n        display:flex;\n        justify-content: space-around;\n        height:64px;\n        align-items:center;\n        margin-top: 10px;\n    "),n(document.body,e),e})();return t=e,un.map((e=>n(t,(n=>{const e=new Image;e.src=mn;const t=new Jn(n,e,mn,Gn.length),o=t.init();return Gn.push(t),o})(e)))),On(),(()=>{const e=o("div");r(e,["infoScreen"]),p(e,"\n        width: 250px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: 650px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n    "),n(e,(()=>{const n=o("div");return r(n,["infoTop"]),p(n,"\n        padding: 5px;\n    "),n})()),n(e,(()=>{const n=o("div");return r(n,["infoBottom"]),n})()),n(Y,(()=>{const e=o("div");r(e,["healthbar"]),p(e,"\n        width: 32px;\n        height: 640px;\n        background-color: #242424;\n        border: 5px solid darkslategray;\n        position: absolute;\n        left: -52px;\n        top:-5px;\n        color:white;\n        font-family:munro;\n        display:flex;\n        flex-direction: column;\n        justify-content: flex-end;\n    "),gn(e);const t=o("div");return p(t,`\n        position:absolute;\n        width: 16px;\n        height: 16px;\n        background: url(${mn}) -144px 0px;\n        scale: 300%;\n        image-rendering: pixelated;\n        left: 8px;\n        z-index: 5;\n        transform: translate(0, 3px);\n    `),n(e,t),e})()),n(Y,e)})(),Z(j,"click"),Z(R,"close"),Z(L,"coin"),Z(N,"epic"),Z(O,"swipe"),Z(F,"open"),e;var t})()),n(Qn,(()=>{const e=(()=>{const e=o("div");r(e,["debug-wrapper"]),p(e,"\n        position:relative;\n    ");const t=o("input");t.id="slider1",c(t,"input",qn),m(t,["type","min","max","value","class"],["range","0","640","0","slidey"]),n(e,t);const a=o("input");a.id="slider2",c(a,"input",qn),m(a,["type","min","max","value","class"],["range","0","640","0","slidey"]),n(e,a);const i=o("h1");i.id="score",p(i,"\n        color:white;\n        font-family: munro;\n    ");const l=o("h1");return l.id="level",p(l,"\n        color:white;\n        font-family:munro;\n    "),d(l,"Level: 0"),((n="bruh")=>{Yn+=1,d("bruh"===n?s("#score"):n,`Score: ${Yn}`)})(i),n(e,i),n(e,l),e})();return n(document.body,e),e})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,